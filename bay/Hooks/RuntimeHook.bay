/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Hooks;

use Runtime.BaseHook;


class RuntimeHook extends BaseHook
{
	static const string INIT = "runtime::init";
	static const string START = "runtime::start";
	static const string LAUNCHED = "runtime::launched";
	static const string RUN = "runtime::run";
	static const string ENV = "runtime::env";
	
	
	/**
	 * Returns method name by hook name
	 */
	string getMethodName(string hook_name)
	{
		if (hook_name == static::INIT) return "init";
		if (hook_name == static::START) return "start";
		if (hook_name == static::LAUNCHED) return "launched";
		if (hook_name == static::RUN) return "run";
		if (hook_name == static::ENV) return "env";
		return "";
	}
	
	
	/**
	 * Init context
	 */
	async Dict init(Dict d)
	{
		return d;
	}
	
	
	/**
	 * Start context
	 */
	async Dict start(Dict d)
	{
		return d;
	}
	
	
	/**
	 * Launched context
	 */
	async Dict launched(Dict d)
	{
		return d;
	}
	
	
	/**
	 * Run entry point
	 */
	async Dict run(Dict d)
	{
		return d;
	}
	
	
	/**
	 * Init context
	 */
	Dict env(Dict d)
	{
		return d;
	}
}