/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.Map;
use Runtime.Vector;


class CoreObject
{
	
	
	/** 
	 * Constructor
	 */
	public void constructor()
	{
		#switch
		#case ifcode PHP then
		$this->_init($__ctx);
		#case ifcode JAVASCRIPT then
		this._init(__ctx);
		#endswitch
	}
	
	
	/**
	 * Init function
	 */
	protected void _init()
	{
		#switch
		#case ifcode PHP then
		#case ifcode JAVASCRIPT then
		#endswitch
	}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @param string default_value
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null)
	{
		return this.takeVirtualValue(variable_name, default_value);
	}
	
	
	
	/**
	 * Returns virtual values
	 * @param string variable_name
	 * @param string default_value
	 * @return var
	 */
	void takeVirtualValue(string variable_name, var default_value = null)
	{
		return default_value;
	}
	
	
	
	/**
	 * Set new value
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value)
	{
		this.assignVirtualValue(variable_name, value);
	}
	
	
	
	/**
	 * Assign virtual value
	 * @param string variable_name
	 * @param var value
	 */
	void assignVirtualValue(string variable_name, var value)
	{
	}
	
	
	
	/**
	 * Assign and clone data from other object
	 * @param CoreObject obj
	 */
	void assignObject(CoreObject obj)
	{
	}
	
	
	
	/**
	 * Set new values instance by Map
	 * @param Map<var> map
	 * @return CoreObject
	 */
	public CoreObject assignDict(Dict<var> values = null)
	{
		if (values == null) return null;
		fn f = rtl::@method ("Runtime.RuntimeUtils", "getVariablesNames");
		Collection<string> names = f(this.getClassName(), 2);
		for (int i=0; i<names.count(); i++)
		{
			string name = names.item(i);
			this.assignValue(name, values.get(name, null));
		}
		return this;
	}
	
	
	
	/**
	 * Set new values instance by Map
	 * @param Dict<var> map
	 * @return CoreObject
	 */
	public CoreObject setDict(Dict<var> values = null)
	{
		if (values == null) return null;
		values.each( rtl::@method (this, "assignValue") );
		return this;
	}
	
	
	
	/**
	 * Dump serializable object to Map
	 * @return Map<var>
	 */
	public Map<var> takeDict(Collection<string> fields = null, int flag=2)
	{
		Map<var> values = new Map();
		if (fields == null)
		{		
			fn f = rtl::@method ("Runtime.RuntimeUtils", "getVariablesNames");
			Collection<string> names = f(this.getClassName(), flag);
			for (int i=0; i<names.count(); i++)
			{
				string name = names.item(i);
				values.set(name, this.takeValue(name, null));
			}
		}
		else
		{
			for (int i=0; i<fields.count(); i++)
			{
				string name = fields.item(i);
				values.set(name, this.takeValue(name, null));
			}
		}
		return values.toDict();
	}
	
	public fn @staticMethod(string method_name)
	{
		return rtl::method(null, this.getClassName(), method_name);
	}
	
	public var callStatic(string method_name)
	{
		#switch
		#case ifcode PHP then
		$args = func_get_args();
		$class_name = static::class;
		$method_name = array_shift($args);
		return call_user_func_array([$class_name, $method_name], $args);
		#endswitch
		return null;
	}
	
	
	
	public var callStaticParent(string method_name)
	{
		#switch
		#case ifcode PHP then
		$args = func_get_args();
		$class_name = static::class; 
		$class_name = $class_name::getParentClassName();
		$method_name = array_shift($args);
		return call_user_func_array([$class_name, $method_name], $args);
		#endswitch
		return null;
	}
	
	
	/* --------------------------- Introspection --------------------------- */
	
	/**
	 * Returns public fields list
	 * @param Vector<string> names
	 */
	declare static void getFieldsList(Vector<string> names, int flag=0);
	
	
	
	/**
	 * Returns public virtual fields names
	 * @param Vector<string> names
	 */
	declare static void getVirtualFieldsList(Vector<string> names, int flag=0);
	
	
	
	/**
	 * Returns field info by field_name
	 * @param string field_name
	 * @return IntrospectionInfo
	 */
	declare static var getFieldInfoByName(string field_name);
	
	
	
	/**
	 * Returns virtual field info by field_name
	 * @param string field_name
	 * @return IntrospectionInfo
	 */
	declare static var getVirtualFieldInfoByName(string field_name);
	
	
	
	/**
	 * Returns list of the public methods
	 * @param Vector<string> methods
	 */
	declare static void getMethodsList(Vector<string> methods);
	
	
	
	/**
	 * Returns info of the public method by name
	 * @param string method_name
	 * @return IntrospectionInfo
	 */
	declare static var getMethodInfoByName(string method_name);
	
	
}