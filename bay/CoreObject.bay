/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.Map;
use Runtime.Vector;


class CoreObject{
	
	protected bool _is_destroyed = false;	
	
	
	/** 
	 * Constructor
	 */
	public void constructor(){
		#switch
		#case ifcode PHP then
		$this->_init();
		#case ifcode JAVASCRIPT then
		this._init();
		#endswitch
	}
	
	
	
	#switch
	#case ifcode PHP then
	protected function _init(){}
	#case ifcode JAVASCRIPT then
	_init(){
		this.__implements__ = new Array();
	}
	#endswitch
	
	
	
	#switch
	#case ifcode JAVASCRIPT then
	_del(){
	}
	#case ifcode PHP then
	function __destruct() {
		/*this._is_destroyed = true;*/
	}
	#endswitch
	
	
	
	/**
	 * Returns name of variables to serialization
	 * @return Vector<string>
	 */
	public void getVariablesNames(Vector<string> names){}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null){}
	
	
	
	/**
	 * Assign and clone data from other object
	 * @param CoreObject obj
	 */
	void assignObject(CoreObject obj){
		this.assignObjectAfter(obj);
	}
	
	
	
	/**
	 * Assign and clone data from other object
	 * @param CoreObject obj
	 */
	void assignObjectAfter(CoreObject obj){
	}
	
	
	
	/**
	 * Set new value instance by variable name
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value){
		this.assignValueAfter(variable_name, value);
	}
	
	
	
	/**
	 * Calls after assign new value
	 * @param string variable_name
	 * @param var value
	 */
	void assignValueAfter(string variable_name, var value){
	}
	
	
	
	/**
	 * Calls after assign new value
	 * @param string variable_name
	 */
	void assignAfter(string variable_name){
		this.assignValueAfter(variable_name, this.takeValue(variable_name));
	}
	
	
	
	/**
	 * Set new values instance by Map
	 * @param Map<mixed> map
	 */
	public void assignMap(Map<mixed> values = null){
		if (values == null)
			return;
		Vector<string> names = new Vector();
		this.getVariablesNames(names);
		names.each(void (string name) use (values){
			mixed value = values.get(name, null);
			this.assignValue(name, value);
		});
		delete names;
	}
	
	
	
	/**
	 * Dump serializable object to Map
	 * @return Map<mixed>
	 */
	public Map<mixed> takeMap(){
		Map<mixed> values = new Map();
		Vector<string> names = new Vector();
		this.getVariablesNames(names);
		names.each(void (string name) use (values){
			mixed value = this.takeValue(name, null);
			values.set(name, value);
		});
		return values;
	}
	
	
	
	/**
	 * Call static method of the current class
	 * @param string method_name
	 * @param Vector args
	 * @return mixed
	 */
	public mixed callStaticMethod(string method_name, Vector args = null){
		string class_name = this.getClassName();
		return rtl::callStaticMethod(class_name, method_name, args);
	}
}