/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Exceptions.KeyNotFound;

#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


declare class Dict<T>
{

	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	declare public bool contains(string key);
	
	
	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	declare public bool has(string key);
	
	
	
	/**
	 * Returns value from position
	 * @param string key
	 * @param T default_value
	 * @return T
	 */
	declare public T get(string key, T default_value, string type_value = "mixed", string type_template = "");
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param string key - position
	 * @return T
	 */
	declare public T item(string key, string type_value, string type_template = "");
	
	
	
	/**
	 * Set value size_to position
	 * @param string key - position
	 * @param T value 
	 * @return self
	 */
	declare public Dict<T> setIm(string key, T value);
	
	
	
	/**
	 * Remove value from position
	 * @param string key
	 * @return self
	 */
	declare public Dict<T> removeIm(string key);

	
	
	/**
	 * Returns count items in vector
	 */
	declare public int count();
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Collection<string>
	 */
	declare public Collection<string> keys();
	
	
	
	/**
	 * Returns vector of the values
	 * @return Collection<T>
	 */
	declare public Collection<T> values();
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	declare void each(func f);
	
	
	
	/**
	 * Call function map
	 * @param func f
	 * @return Dict
	 */
	declare Dict map(func f);
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Collection
	 */
	declare Dict<T> filter(func f);
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	declare mixed reduce(func f, mixed init_value);
	
	
	
	/**
	 * Add values from other map
	 * @param Dict<T> map
	 * @return self
	 */
	declare public Dict<T> concat(Dict<T> map);
	
	
	
	/**
	 * Convert to dict
	 */
	declare Dict<T> toDict();
	
	
	
	/**
	 * Convert to dict
	 */
	declare Dict<T> toMap();
}



#switch
#case ifcode JAVASCRIPT then
if (typeof Runtime == "undefined") Runtime = {};

Runtime.Dict = class extends Map
{
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static createNewInstance(obj)
	{
		if (obj == undefined) obj = null;
		return new Runtime.Dict(obj);
	}
	
	
	
	/**
	 * Convert to dict
	 */
	toDict()
	{
		return new Runtime.Dict(this);
	}
	
	
	
	/**
	 * Convert to dict
	 */
	toMap()
	{
		var _Map = Runtime.Dict.getMap();
		return new _Map(this);
	}
	
	
	
	/**
	 * Returns copy of the current Dict
	 */
	copy()
	{
		return this.constructor.createNewInstance(this);
	}
	
	
	
	/**
	 * Correct items
	 */
	_correctItemsByType(type)
	{
		if (type == "mixed" || type == "primitive" || type == "var") return this;
		
		var obj = this.constructor.createNewInstance();
		var it = super.keys();
		var next = it.next();
		while (!next.done){
			var key = next.value;
			var val = super.get(key);
			if (isBrowser()) val = Runtime.rtl.correct(val, type, null);
			else val = rtl.correct(val, type, null);
			obj.set(key, val);
			next = it.next();
		}
		
		return obj;
	}
	
	
	
	/**
	 * Convert to string
	 * @param var value
	 * @return value
	 */
	toString(value){
		if (isBrowser()) return Runtime.rtl.toString(value);
		return rtl.toString(value);
	}
	
	
	
	/**
	 * Dict constructor
	 */
	constructor(map)
	{
		super();
		if (map != undefined && typeof map == 'object')
		{		
			if (map instanceof Runtime.Dict)
			{
				var keys = map.keys();
				keys.each(
					(key)=>{
						super.set(key, map.item(key));
					}
				);		
			}
			else
			{
				for (var i in map)
				{
					super.set(i, map[i]);
				}
			}
		}
		this.__uq__ = Symbol();
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T key
	 * @return bool var
	 */
	contains(key)
	{
		key = this.toString(key);
		return super.has(key);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T key
	 * @return bool var
	 */
	has(key)
	{
		key = this.toString(key);
		return super.has(key);
	}
	
	
	
	/**
	 * Returns value from position
	 * @param T key
	 * @param T default_value
	 * @return T
	 */
	get(key, default_value, type_value = "mixed", type_template = "")
	{
		key = this.toString(key);
		var val = super.get(key);
		if (val == undefined) return default_value;
		if (isBrowser()) return Runtime.rtl.correct(val, type_value, default_value, type_template);
		return rtl.correct(val, type_value, default_value, type_template);
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T key - position
	 * @return T
	 */
	item(key)
	{
		key = this.toString(key);
		if (!super.has(key))
		{
			if (isBrowser()) throw new Runtime.Exceptions.KeyNotFound(key);
			throw new KeyNotFound(key);
		}
		var val = super.get(key);
		if (val === null || val == undefined) return null;
		return val;
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T pos - position
	 * @param T value 
	 */
	setIm(key, value)
	{
		key = this.toString(key);
		var res = this.copy();
		res.set(key, value);
		return res;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param T key
	 */
	removeIm(key)
	{
		key = this.toString(key);
		if (super.has(key))
		{
			var res = this.copy();
			res.delete(key, value);
			return res;
		}
		return this;
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	count(){
		return this.size;
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T>
	 */
	keys()
	{
		var it = super.keys();
		var res = new Runtime.Collection();
		var next = it.next();
		while (!next.done)
		{
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T>
	 */
	values()
	{
		var it = super.values();
		var res = new Runtime.Collection();
		var next = it.next();
		while (!next.done)
		{
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	each(f)
	{
		var keys = this.keys();
		keys.each(
			(key)=>{
				var value = this.item(key);
				f(key, value);
			}
		);
		return this;
	}
	
	
	
	/**
	 * Call function map
	 * @param func f
	 * @return Dict
	 */
	map(f)
	{
		var obj={};
		this.each(
			(key, value)=>{
				obj[key] = f(key, value);
			}
		);
		return this.constructor.createNewInstance(obj);
	}
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Dict
	 */
	filter(f)
	{
		var obj={};
		this.each(
			(key, value)=>{
				if (f(key, value))
				{
					obj[key] = value;
				}
			}
		);
		return this.constructor.createNewInstance(obj);
	}
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	reduce(f, init_value)
	{
		var res = init_value;
		this.each(
			(key, value) => {
				res = f(res, key, value);
			}
		);
		return res;
	}
	
	
	
	/**
	 * Add values from other map
	 * @param Dict<T, T> map
	 * @return self
	 */
	concat(map)
	{
		if (map != null)
		{
			var res = this.copy();
			map.each(
				(key)=>{
					res.set(key, map.item(key));
				}
			);
			return res;
		}
		return this;
	}
	
	
	
	/**
	 * Convert Dict to Object
	 */
	toObject(){
		var obj = {};
		this.each((key)=>{obj[key]=this.get(key, null);});
		return obj;
	}
	
}


#case ifcode NODEJS then
Runtime.Dict.getMap = function(){ return require('./Map.js'); }

#case ifcode ES6 then
Runtime.Dict.getMap = function(){ return Runtime.Map; }


#case ifcode NODEJS then

if (false){

module.exports = {
	"Dict": Runtime.Dict
}

}
else{

module.exports = Runtime.Dict;

}


#case ifcode PHP then

class Dict implements \JsonSerializable
{
	
	
	protected $_map = null;
	
	
	/**
	 * Returns map
	 */
	public function _getArr()
	{
		return $this->_map;
	}
	
	
	/**
	 * Returns new Instance
	 */
	public static function createNewInstance($obj=null)
	{
		$class_name = static::class;
		return new $class_name($obj);
	}
	
	
	
	/**
	 * Returns copy of the current Dict
	 */
	function copy()
	{
		return static::createNewInstance($this->_map);
	}
	
	
	
	/**
	 * Convert to dict
	 */
	public function toDict()
	{
		return new \Runtime\Dict($this);
	}
	
	
	
	/**
	 * Convert to map
	 */
	public function toMap()
	{
		return new \Runtime\Map($this);
	}
	
	
	
	/**
	 * Correct items
	 */
	public function _correctItemsByType($type)
	{
		if ($type == "mixed" or $type == "primitive" or $type == "var") return $this;
		
		return $this->map(
			function($key, $value) use ($type)
			{
				return rtl::correct($value, $type, null);
			}
		);
	}
	
	
	
	/**
	 * Constructor
	 */
	public function __construct($map = null)
	{
		$this->_map = [];
		if ($map instanceof Dict)
		{
			foreach ($map->_map as $key => $value)
			{
				$key = rtl::toString($key);
				$this->_map[$key] = $value;
			}		
		}
		else if (is_array($map))
		{
			foreach ($map as $key => $value)
			{
				$key = rtl::toString($key);
				$this->_map[$key] = $value;
			}		
		}
		else if (is_object($map))
		{
			$values = get_object_vars($map);
			foreach ($values as $key => $value)
			{
				$key = rtl::toString($key);
				$this->_map[$key] = $value;
			}
		}
	}
	
	
	
	/**
	 * Destructor
	 */
	public function __destruct()
	{
		unset($this->_map);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T key
	 * @return bool var
	 */
	public function contains($key)
	{
		$key = rtl::toString($key);
		return isset($this->_map[$key]);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T key
	 * @return bool var
	 */
	public function has($key)
	{
		$key = rtl::toString($key);
		return isset($this->_map[$key]);
	}
	
	
	
	/**
	 * Returns value from position
	 * @param T key
	 * @param T default_value
	 * @return T
	 */
	public function get($key, $default_value, $type_value = "mixed", $type_template = "")
	{
		$key = rtl::toString($key);
		$val = isset($this->_map[$key]) ? $this->_map[$key] : $default_value;
		$val = rtl::convert($val, $type_value, $default_value, $type_template);
		return $val;
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T key - position
	 * @return T
	 */
	public function item($key, $type_value = "mixed", $type_template = "")
	{
		$key = rtl::toString($key);
		if (!array_key_exists($key, $this->_map)){
			throw new KeyNotFound($key);
		}
		return $this->_map[$key];
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T pos - position
	 * @param T value 
	 * @return self
	 */
	public function setIm($key, $value)
	{
		$res = $this->copy();
		$key = rtl::toString($key);
		$res->_map[$key] = $value;
		return $res;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param T key
	 * @return self
	 */
	public function removeIm($key)
	{
		$key = rtl::toString($key);
		if (isset($this->_map[$key]))
		{
			$res = $this->copy();
			unset($res->_map[$key]);
			return $res;
		}
		return $this;
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	public function count()
	{
		return count($this->_map);
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T>
	 */
	public function keys()
	{
		$keys = array_keys($this->_map);
		$res = static::createNewInstance($keys);
		return $res;
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T>
	 */
	public function values()
	{
		$values = array_values($this->_map);
		$res = static::createNewInstance($values);
		return $res;
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	function each($f)
	{
		foreach ($this->_map as $key => $value)
		{
			$f( $key, $value );
		}
		return $this;
	}
	
	
	
	/**
	 * Call function map
	 * @param func f
	 * @return Dict
	 */
	function map($f)
	{
		$res = [];
		foreach ($this->_map as $key => $value)
		{
			$res[$key] = $f( $key, $value );
		}
		return static::createNewInstance($res);
	}
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Dict
	 */
	function filter($f)
	{
		$arr2 = static::createNewInstance();
		$arr2->_map = [];
		foreach ($this->_map as $key => $value)
		{
			if ($f($key, $value))
			{
				$arr2->_map[$key] = $value;
			}
		}
		return $arr2;
	}
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	function reduce($f, $init_value)
	{
		$res = $init_value;
		foreach ($this->_map as $key => $value)
		{
			$res = $f($res, $key, $value );
		}
		return $res;
	}
	
	
	
	/**
	 * Add values from other map
	 * @param Dict<T, T> map
	 * @return self
	 */
	function concat($map)
	{
		if ($map != null)
		{
			$res = $this->copy();
			$map->each(
				function ($key) use ($map, $res)
				{
					$res->_map[$key] = $map->item($key);
				}
			);
			return $res;
		}
		return $this;
	}
	
	
	
	/**
	 * Get and set methods
	 */
	function __set($name, $value){
		return $this->set($name, $value);
	}
	function __get($name){
		return $this->get($name, null);
	}
	function __isset($name){
		return $this->has($name);
	}
	function __unset($name){
		return $this->remove($name);
	}
	
	
	
	/**
	 * JsonSerializable
	 */
	public function jsonSerialize(){
		return (object) $this->_map;
	}
}

#endswitch