/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Collection;
use Runtime.Exceptions.KeyNotFound;

#switch
#case ifcode NODEJS then
var use = require('bayrell').use; use.platform = "nodejs";
#case ifcode ES6 then
var use = function(s){return Runtime.rtl.find_class(s);}
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch



declare class _Map{}

#switch
#case ifcode JAVASCRIPT then

if (typeof Runtime == 'undefined') Runtime = {};

Runtime._Map = function(ctx, map)
{
	this._map = {};
	if (map != undefined && typeof map == 'object')
	{
		if (map instanceof Runtime.Dict)
		{
			for (var i in map._map)
			{
				this._map[i] = map._map[i];
			}
		}
		else
		{
			for (var i in map)
			{
				this._map["|" + i] = map[i];
			}
		}
	}
	this.__uq__ = Symbol();
	return this;
}
Runtime._Map.prototype = Object.create(Map.prototype);
Runtime._Map.prototype.constructor = Runtime._Map;
Object.assign(Runtime._Map.prototype,
{
	toStr: function(value)
	{ 
		return use("Runtime.rtl").toStr(value);
	},
	toObject: function()
	{
		var obj = {};
		for (var key in this._map)
		{
			obj[key.substring(1)] = this._map[key];
		}
		return obj;
	},
	getClassName: function(){ return "Runtime._Map"; },
});
Object.assign(Runtime._Map,
{
	from: function(map)
	{
		var res = this.Instance(null);
		for (var i in map)
		{
			res._map["|" + i] = map[i];
		}
		return res;
	},
	getCurrentNamespace: function(){ return "Runtime"; },
	getCurrentClassName: function(){ return "Runtime._Map"; },
	getParentClassName: function(){ return ""; },
});
#case ifcode NODEJS then
use.add(Runtime._Map);
#case ifcode PHP then
class _Map implements \ArrayAccess, \JsonSerializable
{
	public $_map = [];
	
	
	/**
	 * From
	 */
	static function from($map)
	{
		$class_name = static::class;
		$res = new $class_name(null);
		if ($map != null)
		{
			foreach ($map as $key => $value)
			{
				$key = $res->toStr($key);
				$res->_map[$key] = $value;
			}
		}
		else if (is_object($map))
		{
			$values = get_object_vars($map);
			foreach ($values as $key => $value)
			{
				$key = $res->toStr($key);
				$res->_map[$key] = $value;
			}
		}
		return $res;	
	}
	
	
	/**
	 * JsonSerializable
	 */
	public function toStr($value)
	{
		return rtl::toStr($value);
	}
	
	
	/**
	 * JsonSerializable
	 */
	public function jsonSerialize()
	{
		return (object) $this->_map;
	}
	
	
	/**
	 * Constructor
	 */
	public function __construct($ctx, $map=null)
	{
		$this->_map = [];
		if ($map == null) {}
		else if ($map instanceof Dict)
		{
			foreach ($map->_map as $key => $value)
			{
				$key = $this->toStr($key);
				$this->_map[$key] = $value;
			}		
		}
		else if (is_array($map))
		{
			foreach ($map as $key => $value)
			{
				$key = $this->toStr($key);
				$this->_map[$key] = $value;
			}
		}
		else if (is_object($map))
		{
			$values = get_object_vars($map);
			foreach ($values as $key => $value)
			{
				$key = $this->toStr($key);
				$this->_map[$key] = $value;
			}
		}
	}
	
	
	/**
	 * Destructor
	 */
	public function __destruct()
	{
		unset($this->_map);
	}
	
	
	/**
	 * Get array
	 */
	public function _getArr()
	{
		return $this->_map;
	}
	
	
	/**
	 * Get and set methods
	 */
	function __isset($k){return $this->has($k);}
	function __get($k){return $this->item($k);}
	function __set($k,$v){throw new \Runtime\Exceptions\AssignStructValueError($k);}
	function __unset($k){throw new \Runtime\Exceptions\AssignStructValueError($k);}
	public function offsetExists($k){return $this->has($k);}
	public function offsetGet($k){return $this->item($k);}
	public function offsetSet($k,$v){throw new \Runtime\Exceptions\AssignStructValueError($k);}
	public function offsetUnset($k){throw new \Runtime\Exceptions\AssignStructValueError($k);}
	
	/* Class name */
	public function getClassName(){return "Runtime._Map";}
	public static function getCurrentClassName(){return "Runtime._Map";}
	public static function getParentClassName(){return "";}
}

#endswitch



class Dict<T> extends _Map
{
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Dict<T> Instance()
	{
		return new Dict();
	}
	
	
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Dict<T> create(var obj)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return new (Function.prototype.bind.apply(this, [null, ctx, obj]));
		#case ifcode PHP then
		$class_name = static::class;
		return new $class_name($obj);
		#endswitch
	}
	
	
	
	/**
	 * Returns copy of Dict
	 * @param int pos - position
	 */
	public Dict<T> copy()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var new_obj = this.constructor.Instance(ctx);
		new_obj._map = Object.assign({}, this._map);
		return new_obj;
		#case ifcode PHP then
		$new_obj = static::Instance($ctx);
		$new_obj->_map = $this->_map;
		return $new_obj;
		#endswitch
	}
	
	
	
	/**
	 * Convert to dict
	 */
	Dict<T> toDict()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var Dict = use ("Runtime.Dict");
		return new Dict(ctx, this);
		#case ifcode PHP then
		return new \Runtime\Dict($ctx, $this);
		#endswitch
	}
	
	
	
	/**
	 * Convert to dict
	 */
	Dict<T> toMap()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var Map = use ("Runtime.Map");
		return new Map(ctx, this);
		#case ifcode PHP then
		return new \Runtime\Map($ctx, $this);
		#endswitch
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	public bool contains(string key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		return typeof this._map["|" + key] != "undefined";
		#case ifcode PHP then
		$key = $this->toStr($key);
		return isset($this->_map[$key]);
		#endswitch
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	public bool has(string key)
	{
		return this.contains(key);
	}
	
	
	
	/**
	 * Returns value from position
	 * @param string key
	 * @param T default_value
	 * @return T
	 */
	public T get(string key, T default_value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		var val = this._map["|" + key];
		if (typeof val == "undefined") return default_value;
		return val;
		#case ifcode PHP then
		$key = $this->toStr($key);
		$val = isset($this->_map[$key]) ? $this->_map[$key] : $default_value;
		return $val;
		#endswitch
	}
	
	
	
	/**
	 * Returns value from position
	 * @param string key
	 * @param T default_value
	 * @return T
	 */
	public var attr(Collection items, T default_value)
	{
		return rtl::attr(this, items, default_value);
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param string key - position
	 * @return T
	 */
	public T item(string key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		if (typeof this._map["|" + key] == "undefined")
		{
			var _KeyNotFound = use("Runtime.Exceptions.KeyNotFound");
			throw new _KeyNotFound(key);
		}
		var val = this._map["|" + key];
		if (val === null || typeof val == "undefined") return null;
		return val;
		#case ifcode PHP then
		$key = $this->toStr($key);
		if (!array_key_exists($key, $this->_map))
		{
			throw new KeyNotFound($key);
		}
		return $this->_map[$key];
		#endswitch
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param string key - position
	 * @param T value 
	 * @return self
	 */
	public Dict<T> setIm(string key, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var res = this.copy(ctx);
		key = this.toStr(key);
		res._map["|" + key] = value;
		return res;
		#case ifcode PHP then
		$res = $this->copy($ctx);
		$key = $this->toStr($key);
		$res->_map[$key] = $value;
		return $res;
		#endswitch
	}
	
	
	
	/**
	 * Remove value from position
	 * @param string key
	 * @return self
	 */
	public Dict<T> removeIm(string key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		if (typeof this._map["|" + key] != "undefined")
		{
			var res = this.copy();
			delete res._map["|" + key];
			return res;
		}
		return this;
		#case ifcode PHP then
		$key = $this->toStr($key);
		if (isset($this->_map[$key]))
		{
			$res = $this->copy($ctx);
			unset($res->_map[$key]);
			return $res;
		}
		return $this;
		#endswitch
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Collection<string>
	 */
	public Collection<string> keys()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var res = new Runtime.Collection(ctx);
		for (var key in this._map) res.push(key.substring(1));
		return res;
		#case ifcode PHP then
		$keys = array_keys($this->_map);
		$res = \Runtime\Collection::from($keys);
		return $res;
		#endswitch
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Collection<T>
	 */
	public Collection<T> values()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var res = new Runtime.Collection(ctx);
		for (var key in this._map) res.push( this._map[key] );
		return res;
		#case ifcode PHP then
		$values = array_values($this->_map);
		$res = \Runtime\Collection::from($values);
		return $res;
		#endswitch
	}
	
	
	
	/**
	 * Call function map
	 * @param fn f
	 * @return Dict
	 */
	Dict map(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var obj = this.constructor.Instance(ctx);
		for (var key in this._map)
		{
			var new_key = key.substring(1);
			var new_val = f(ctx, this._map[key], new_key);
			obj._map[key] = new_val;
		}
		return obj;
		#case ifcode PHP then
		$map2 = static::Instance($ctx);
		foreach ($this->_map as $key => $value)
		{
			$new_val = $f($ctx, $value, $key);
			$map2->_map[$key] = $new_val;
		}
		return $map2;
		#endswitch
	}
	
	
	
	/**
	 * Filter items
	 * @param fn f
	 * @return Collection
	 */
	Dict<T> filter(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var obj = this.contstructor.Instance(ctx);
		for (var key in this._map)
		{
			var new_key = key.substring(1);
			var value = this._map[key];
			var flag = f(ctx, value, new_key);
			if (flag) obj._map[key] = new_val;
		}
		return obj;
		#case ifcode PHP then
		$map2 = static::Instance($ctx);
		foreach ($this->_map as $key => $value)
		{
			$flag = $f($ctx, $value, $key);
			if ($flag) $map2->_map[$key] = $value;
		}
		return $map2;
		#endswitch
	}
	
	
	
	/**
	 * Call function for each item
	 * @param fn f
	 */
	void each(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var key in this._map)
		{
			var new_key = key.substring(1);
			var value = this._map[key];
			f(ctx, value, new_key);
		}
		#case ifcode PHP then
		foreach ($this->_map as $key => $value)
		{
			$f($ctx, $value, $key);
		}
		#endswitch
	}
	
	
	
	/**
	 * Transition Dict to Collection
	 * @param fn f
	 * @return Collection
	 */
	Collection<T> transition(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var Collection = use("Runtime.Collection");
		var arr = new Collection(ctx);
		for (var key in this._map)
		{
			var new_value = f(ctx, this._map[key], key.substring(1));
			Array.prototype.push.call(arr, new_value);
		}
		return arr;
		#case ifcode PHP then
		$arr = new \Runtime\Collection($ctx);
		foreach ($this->_map as $key => $value)
		{
			$arr->_arr[] = $f($ctx, $value, $key);
		}
		return $arr;
		#endswitch
	}
	
	
	
	/**
	 * 	
	 * @param fn f
	 * @param var init_value
	 * @return init_value
	 */
	var reduce(fn f, var init_value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var key in this._map)
		{
			init_value = f(ctx, init_value, this._map[key], key.substring(1));
		}
		return init_value;
		#case ifcode PHP then
		foreach ($this->_map as $key => $value)
		{
			$init_value = $f($ctx, $init_value, $value, $key);
		}
		return $init_value;
		#endswitch
	}
	
	
	
	/**
	 * Add values from other map
	 * @param Dict<T> map
	 * @return self
	 */
	public Dict<T> concat(Dict<T> map = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (map == null) return this;
		var res = this.copy(ctx);
		for (var key in map._map)
		{
			res._map[key] = map._map[key];
		}
		return res;
		#case ifcode PHP then
		if ($map == null) return $this;
		$res = $this->copy($ctx);
		foreach ($this->_map as $key => $value)
		{
			$res->_map[$key] = $value;
		}
		return $res;
		#endswitch
	}
	
	
}