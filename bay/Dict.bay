/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Collection;
use Runtime.Exceptions.KeyNotFound;


interface Dict<T>
{
	/**
	 * Returns value from position
	 * @param string key
	 * @param T default_value
	 * @return T
	 */
	T get(string key, T default_value = null);
	
	
	/**
	 * Set value size_to position
	 * @param string key - position
	 * @param T value
	 * @return self
	 */
	Dict<T> set(string key, T value);
	
	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	bool has(string key);
	
	
	/**
	 * Remove value from position
	 * @param string key
	 * @return self
	 */
	Dict<T> remove(string key);
	
	
	/**
	 * Clear all values from vector
	 * @return self
	 */
	Dict<T> clear();
	
	
	/**
	 * Add values from other map
	 * @param Dict<T> map
	 * @return self
	 */
	Dict<T> concat(Dict<T> map = null);
	
	
	/**
	 * Returns vector of the keys
	 * @return Collection<string>
	 */
	Collection<string> keys();
	
	
	/**
	 * Returns vector of the values
	 * @return Collection<T>
	 */
	Collection<T> values();
	
	
	/**
	 * Call function map
	 * @param fn f
	 * @return Dict
	 */
	Dict map(fn f);
	
	
	/**
	 * Reduce
	 * @param fn f
	 * @param var init_value
	 * @return init_value
	 */
	var reduce(fn f, var init_value);
	
	
	/**
	 * Filter items
	 * @param fn f
	 * @return Collection
	 */
	Dict<T> filter(fn f);
	
	
	/**
	 * Call function for each item
	 * @param fn f
	 */
	void each(fn f);
	
	
	/**
	 * Transition Dict to Vector
	 * @param fn f
	 * @return Vector
	 */
	Vector<T> transition(fn f);
}