/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.CoreEvent;
use Runtime.CoreObject;
use Runtime.Map;
use Runtime.Vector;
use Runtime.Interfaces.SubscribeInterface;


class Emitter extends CoreObject{
	
	protected Map<Vector> methods = null;
	protected Map<Vector> subscribers = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(callback val = null){
		parent();
		this.methods = new Map<Vector>();
		this.subscribers = new Map<Vector>();
		if (val != null){
			this.addMethod(val);
		}
	}
	
	
	
	/**
	 * Add method by name
	 * @param callback f
	 * @param string name
	 */
	void addMethodByName(callback f, string name){
		if (not this.methods.has(name)){
			this.methods.set(name, new Vector());
		}
		Vector v = this.methods.item(name);
		if (v.indexOf(f) == -1){
			v.push(f);
		}
	}
	
	
	
	/**
	 * Add method
	 * @param callback f
	 * @param Vector<string> events
	 * @return callback
	 */
	callback addMethod(callback f, Vector<string> events = null){
		if (events == null){
			this.addMethodByName(f, "");
		}
		else{
			events.each(void (string item) use (f){
				this.addMethodByName(f, item);
			});
		}
		return f;
	}
	
	
	
	/**
	 * Remove method
	 * @param callback f
	 */
	void removeMethod(callback f, Vector<string> events = null){
		if (events == null){
			events = this.methods.keys();
		}
		events.each(void (string name) use (f){
			Vector v = this.methods.get(name, null);
			if (v == null) return;
			v.removeItem(f);
		});
	}
	
	
	
	/**
	 * Add object by name
	 * @param callback f
	 * @param string name
	 */
	void addObjectByName(callback f, string name){
		if (not this.subscribers.has(name)){
			this.subscribers.set(name, new Vector());
		}
		Vector v = this.subscribers.item(name);
		if (v.indexOf(f) == -1){
			v.push(f);
		}
	}
	
	
	
	/**
	 * Add object
	 * @param SubscribeInterface f
	 * @param Vector<string> events
	 */
	void addObject(SubscribeInterface f, Vector<string> events = null){
		if (events == null){
			this.addObjectByName(f, "");
		}
		else{
			events.each(void (string item) use (f){
				this.addObjectByName(f, item);
			});
		}
		return f;
	}
	
	
	
	/**
	 * Remove object
	 * @param SubscribeInterface f
	 */
	void removeObject(SubscribeInterface f, Vector<string> events = null){
		if (events == null){
			events = this.subscribers.keys();
		}
		events.each(void (string name) use (f){
			Vector v = this.subscribers.get(name, null);
			if (v == null) return;
			v.removeItem(f);
		});
	}
	
	
	
	/**
	 * Dispatch event
	 * @param CoreEvent e
	 */
	void dispatch(CoreEvent e){

		Vector<string> keys = null;
		
		/* Copy items */
		Map<Vector> methods = this.methods.map( Vector (string key, Vector items) { return items.slice(); });
		Map<Vector> subscribers = this.subscribers.map( Vector (string key, Vector items) { return items.slice(); });
	
		/* Call self handler */
		this.handlerEvent(e);
		
		/* Call methods */
		keys = methods.keys();
		for (int i=0; i<keys.count(); i++){
			string key = keys.item(i);
			Vector items = methods.item(key);
			
			if (key != "" and e.getClassName() != key)
				continue;
			
			for (int j=0; j<items.count(); j++){
				callback f = items.item(j);
				rtl::call(f, [e]);
			}
		}
		
		/* Call subscribers */
		keys = subscribers.keys();
		for (int i=0; i<keys.count(); i++){
			string key = keys.item(i);
			Vector items = subscribers.item(key);
			
			if (key != "" and e.getClassName() != key)
				continue;
			
			for (int j=0; j<items.count(); j++){
				SubscribeInterface obj = items.item(j);
				obj.handlerEvent(e);
			}
		}
		
	}
	
	
	
	/**
	 * Handler Event
	 */
	public void handlerEvent(var e){
	}
}