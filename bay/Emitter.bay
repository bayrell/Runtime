/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.CoreEvent;
use Runtime.CoreObject;
use Runtime.Vector;
use Runtime.Interfaces.SubscribeInterface;


class Emitter extends CoreObject{
	
	protected Vector methods = null;
	protected Vector subscribers = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(callback val = null){
		parent();
		this.methods = new Vector();
		this.subscribers = new Vector();
		if (val != null){
			this.methods.push(val);
		}
	}
	
	
	
	/**
	 * Add method
	 * @param callback f
	 * @param Vector<string> events
	 * @return callback
	 */
	callback addMethod(callback f, Vector<string> events = null){
		if (this.methods.indexOf(f) == -1){
			this.methods.push(f);
		}
		return f;
	}
	
	
	
	/**
	 * Remove method
	 * @param callback f
	 */
	void removeMethod(callback f){
		this.methods.removeItem(f);
	}
	
	
	
	/**
	 * Add object
	 * @param SubscribeInterface f
	 * @param Vector<string> events
	 */
	void addObject(SubscribeInterface f, Vector<string> events = null){
		if (this.subscribers.indexOf(f) == -1){
			this.subscribers.push(f);
		}
	}
	
	
	
	/**
	 * Remove object
	 * @param SubscribeInterface f
	 */
	void removeObject(SubscribeInterface f){
		this.subscribers.removeItem(f);
	}
	
	
	
	/**
	 * Dispatch event
	 * @param CoreEvent e
	 */
	void emit(CoreEvent e){
		this.dispatch(e);
	}
	
	
	
	/**
	 * Dispatch event
	 * @param CoreEvent e
	 */
	void dispatch(CoreEvent e){
		
		/* Call self handler */
		this.handlerEvent(e);
		
		/* Call methods */
		Vector methods = this.methods.slice();
		methods.each(void (callback f) use (e){
			rtl::call(f, [e]);
		});
		
		/* Call subscribers */
		Vector<SubscribeInterface> subscribers = this.subscribers.slice();
		subscribers.each(void (SubscribeInterface obj) use (e){
			obj.handlerEvent(e);
		});
		
	}
	
	
	
	/**
	 * Handler Event
	 */
	public void handlerEvent(var e){
	}
}