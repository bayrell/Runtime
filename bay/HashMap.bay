/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;


class HashMap<Key, Value>
{
	var _map;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._map = new Map();
		#case ifcode PHP then
		$this->_map = new \SplObjectStorage();
		#endswitch
	}
	
	
	/**
	 * Set value size_to position
	 * @param Key key - position
	 * @param Value value 
	 * @return self
	 */
	public HashMap<Key, Value> set(Key key, Value value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._map.set(key, value);
		#case ifcode PHP then
		$this->_map->attach($key, $value);
		#endswitch
		return this;
	}
	
	
	/**
	 * Returns value from position
	 * @param string key
	 * @return Value
	 */
	public Value get(Key key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return this._map.get(key);
		#case ifcode PHP then
		if (!$this->_map->contains($key)) return null;
		return $this->_map[$key];
		#endswitch
		return this;
	}
	
	
	/**
	 * Return true if key exists
	 * @param string key
	 * @return bool var
	 */
	public bool has(Key key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return this._map.has(key);
		#case ifcode PHP then
		if (!$this->_map->has($key)) return false;
		return true;
		#endswitch
	}
	
	
	/**
	 * Remove value from position
	 * @param string key
	 * @return self
	 */
	public HashMap<Key, Value> remove(Key key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._map.delete(key);
		#case ifcode PHP then
		$this->_map->detach($key);
		#endswitch
		return this;
	}
}