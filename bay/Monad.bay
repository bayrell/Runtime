/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.Exceptions.RuntimeException;


class Monad
{
	var val = null;
	var err = null;
	
	
	/** 
	 * Constructor
	 */
	public void constructor(var value, var err = null)
	{
		this.val = value;
		this.err = null;
	}
	
	
	
	/**
	 * Return attr of object
	 */
	public var attr(string attr_name)
	{
		if (this.val === null or this.err != null) return this;
		return new Monad( rtl::attr(this.val, [ attr_name ], null) );
	}
	
	
	
	/**
	 * Call function on value
	 */
	public var call(fn f)
	{
		if (this.val === null or this.err != null) return this;
		
		var res = null;
		var err = null;
		try
		{
			res = f(this.val);
		}
		catch (RuntimeException e)
		{
			res = null;
			err = e;
		}
		
		return new Monad( res, err );
	}
	
	
	
	/**
	 * Call async function on value
	 */
	public async var callAsync(fn f)
	{
		if (this.val === null or this.err != null) return this;
		
		var res = null;
		var err = null;
		try
		{
			res = await f(this.val);
		}
		catch (RuntimeException e)
		{
			res = null;
			err = e;
		}
		
		return new Monad( res, err );
	}
	
	
	
	/**
	 * Call method on value
	 */
	public var callMethod(string method_name, Collection args = null)
	{
		if (this.val === null or this.err != null) return this;
		
		var res = null;
		var err = null;
		try
		{
			fn f = rtl::method(this.val.getClassName(), method_name);
			if (args != null) f = rtl::apply(f, args);
			res = f(this.val);
		}
		catch (RuntimeException e)
		{
			res = null;
			err = e;
		}
		
		return new Monad( res, err );
	}
	
	
	
	/**
	 * Call async method on value
	 */
	public async var callMethodAsync(string method_name, Collection args = null)
	{
		if (this.val === null or this.err != null) return this;
		
		var res = null;
		var err = null;
		try
		{
			fn f = rtl::method(this.val.getClassName(), method_name);
			if (args != null) f = rtl::apply(f, args);
			res = await f(this.val);
		}
		catch (RuntimeException e)
		{
			res = null;
			err = e;
		}
		
		return new Monad( res, err );
	}
	
	
	
	/**
	 * Call function on monad
	 */
	public var monad(fn f)
	{
		return f(this);
	}
	
	
	
	/**
	 * Returns value
	 */
	public var value()
	{
		if (this.err != null)
		{
			throw this.err;
		}
		if (this.val === null or this.err != null) return null;
		return this.val;
	}
	
}