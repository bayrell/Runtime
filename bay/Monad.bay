/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.Callback;


class Monad
{
	var val = null;
	var err = null;
	
	
	/** 
	 * Constructor
	 */
	public void constructor(var value, var err = null)
	{
		this.val = value;
		this.err = err;
	}
	
	
	/**
	 * Return attr of object
	 */
	public var attr(string attr_name)
	{
		if (this.val === null or this.err != null) return this;
		return new Monad( rtl::attr(this.val, attr_name, null) );
	}
	
	
	/**
	 * Call function on value
	 */
	public Monad call(fn f, bool is_return_value = true)
	{
		if (this.val === null or this.err != null) return this;
		
		try
		{
			var value = rtl::apply(f, [this.val]);
			if (is_return_value)
			{
				this.val = value;
			}
		}
		catch (var e)
		{
			this.res = null;
			this.err = e;
		}
		
		return this;
	}
	
	
	/**
	 * Call async function on value
	 */
	public async Monad callAsync(fn f, bool is_return_value = true)
	{
		if (this.val === null or this.err != null) return this;
		
		try
		{
			var value = rtl::apply(f, [this.val]);
			if (rtl::isPromise(value))
			{
				await rtl::resolvePromise(value);
			}
			if (is_return_value)
			{
				this.val = value;
			}
		}
		catch (var e)
		{
			this.val = null;
			this.err = e;
		}
		
		return this;
	}
	
	
	/**
	 * Call function on value
	 */
	public Monad map(fn f, bool is_return = true)
	{
		return this.call(f, is_return);
	}
	
	
	/**
	 * Call function on value
	 */
	public async Monad mapAsync(fn f, bool is_return = true)
	{
		return await this.callAsync(f, is_return);
	}
	
	
	/**
	 * Call method on value
	 */
	public Monad callMethod(string method_name, Collection args = null)
	{
		if (this.val === null or this.err != null) return this;
		
		try
		{
			Callback f = new Callback(this.val, method_name);
			this.val = rtl::apply(f, args);
		}
		catch (var e)
		{
			this.val = null;
			this.err = e;
		}
		
		return this;
	}
	
	
	/**
	 * Call async method on value
	 */
	public async Monad callMethodAsync(string method_name, Collection args = null)
	{
		if (this.val === null or this.err != null) return this;
		
		try
		{
			Callback f = new Callback(this.val, method_name);
			this.val = await rtl::apply(f, args);
		}
		catch (var e)
		{
			this.val = null;
			this.err = e;
		}
		
		return this;
	}
	
	
	/**
	 * Call function on monad
	 */
	public Monad monad(fn f)
	{
		return rtl::apply(f, [this]);
	}
	
	
	/**
	 * Returns value
	 */
	public var value()
	{
		if (this.err != null)
		{
			throw this.err;
		}
		if (this.val === null or this.err != null) return null;
		return this.val;
	}
}