/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.Exceptions.RuntimeException;


class Callback extends BaseObject
{
	var obj;
	string name;
	var tag = null;
	
	
	/**
	 * Constructor
	 */
	public void constructor(var obj, string name, var tag = null)
	{
		parent();
		
		/* Init object */
		this._init();
		
		/* Set variables */
		this.obj = obj;
		this.name = name;
		this.tag = tag;
	}
	
	
	/**
	 * Check if method exists
	 */
	bool exists()
	{
		if (not rtl::methodExists(this.obj, this.name))
		{
			return false;
		}
		return true;
	}
	
	
	/**
	 * Check callback
	 */
	void check()
	{
		if (not this.exists())
		{
			throw new RuntimeException(
				"Method '" ~ this.name ~ "' not found in " ~ rtl::className(this.obj)
			);
		}
	}
	
	
	/**
	 * Apply
	 */
	var apply(Collection args = null)
	{
		this.check();
		
		#switch
		#case ifcode PHP then
		
		if ($args == null) $args = [];
		else if ($args instanceof \Runtime\Collection) $args = $args->toArray();
		
		$obj = $this->obj;
		if (gettype($obj) == "string") $obj = rtl::findClass($obj);
		return call_user_func_array([$obj, $this->name], $args);
		
		#case ifcode JAVASCRIPT then
		
		if (args == null) args = [];
		
		var obj = this.obj;
		if (typeof obj == "string") obj = Runtime.rtl.findClass(obj);
		return obj[this.name].bind(obj).apply(null, args);
		
		#endswitch
	}
	
	
	#ifcode PHP then
	
	function __invoke()
	{
		return $this->apply(func_get_args());
	}
	
	#endif
}
