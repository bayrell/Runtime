/*!
 *  Bayrell Runtime Library.  
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl.Lib;

use BayrellRtl.Lib.rtl;

export class rs{


	/**
	 * Returns string lenght
	 * @param string s The string
	 * @return int
	 */
	declare export static int strlen(string s);
	 
	#switch
	#case ifcode PHP then
	static function strlen(&$s){
		return strlen($s);
	}
	#case ifcode ES6 then
	static strlen(s){
		return BayrellRtl.Lib.rtl.toString(s).length;
	}
	#case ifcode NODEJS then
	static strlen(s){
		return rtl.toString(s).length;
	}
	#endswitch
	
	
	
	/**
	 * Returns ASCII symbol code
	 * @param char ch
	 */
	declare export static int ord(char ch);

	#switch
	#case ifcode PHP then
	static function ord($s){
		return ord($s);
	}
	#case ifcode ES6 then
	static ord(s){
		return BayrellRtl.Lib.rtl.toString(s).charCodeAt(0);
	}
	#case ifcode NODEJS then
	static ord(s){
		return rtl.toString(s).charCodeAt(0);
	}
	#endswitch
	
	
	
	/**
	 * Convert string to lower case
	 * @param string s 
	 * @return string
	 */
	declare export static string strtolower(string s);

	#switch
	#case ifcode PHP then
	static function strtolower($s){
		return mb_strtolower($s);
	}
	#case ifcode ES6 then
	static strtolower(s){
		return BayrellRtl.Lib.rtl.toString(s).toLowerCase();
	}
	#case ifcode NODEJS then
	static strtolower(s){
		return rtl.toString(s).toLowerCase();
	}
	#endswitch
	
	
	
	/**
	 * Convert string to upper case
	 * @param string s
	 * @return string
	 */
	declare export static string strtoupper(string s);

	#switch
	#case ifcode PHP then
	static function strtoupper($s){
		return mb_strtoupper($s);
	}
	#case ifcode ES6 then
	static strtoupper(s){
		return BayrellRtl.Lib.rtl.toString(s).toUpperCase();
	}
	#case ifcode NODEJS then
	static strtoupper(s){
		return rtl.toString(s).toUpperCase();
	}
	#endswitch
	
	
	
	/**
	 * Ищет позицию первого вхождения подстроки search в строке s.
	 * @param {string} s - строка, в которой производится поиск 
	 * @param {string} search - строка, которую ищем 
	 * @param {string} offset - если этот параметр указан, 
	 *                 то поиск будет начат с указанного количества символов с начала строки.  
	 * @return {variable} Если строка найдена, то возвращает позицию вхождения, начиная с 0.
	 *                    Если строка не найдена, то вернет -1
	 */
	declare export static int strpos(string s, string search, string offset = 0);

	#switch
	#case ifcode PHP then
	static function strpos($s, $search, $offset = 0){
		$res = strpos($s, $search, $offset);
		if ($res === false)
			return -1;
		return $res;
	}
	#case ifcode ES6 then
	static strpos(s, search, offset){
		if (!BayrellRtl.Lib.rtl.exists(offset)) offset = 0;
		var res = BayrellRtl.Lib.rtl.toString(s).indexOf(search);
		return res;
	}
	#case ifcode NODEJS then
	static strpos(s, search, offset){
		if (!rtl.exists(offset)) offset = 0;
		var res = rtl.toString(s).indexOf(search);
		return res;
	}
	#endswitch
	
}