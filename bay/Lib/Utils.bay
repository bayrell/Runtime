/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl.Lib;

use BayrellRtl.Lib.rs;
use BayrellRtl.Lib.rtl;
use BayrellRtl.Exceptions.AssertError;
use BayrellRtl.Interfaces.ContextInterface;
use BayrellRtl.Interfaces.FactoryInterface;
use BayrellRtl.Interfaces.MapInterface;
use BayrellRtl.Types.PathInfo;
use BayrellRtl.Types.Vector;
use BayrellRtl.Types.Map;
use BayrellRtl.ContextObject;
use BayrellRtl.CoreObject;


export class Utils{
	
	
	
	/**
	 * Equals value1 and value2. Throw exception if value1 != value2
	 * @param var value1
	 * @param var value2
	 */
	public static void assert(boolean value, string message = ""){
		if (not value){
			throw new AssertError(null, message);
		}
	}
	
	
	
	/**
	 * Returns true if value is primitive value
	 * @return boolean 
	 */
	public static bool isPrimitiveValue(var value){
		if (rtl::isScalarValue(value)) return true;
		if (value instanceof Vector) return true;
		if (value instanceof Map) return true;
		return false;
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	public static string translate(string message, MapInterface params = null, string locale = "", 
	Object context = null){
			
		if (context == null) context = rtl::globalContext();
		if (context != null) {
			Vector<var> args = (new Vector<var>())
				.push(message)
				.push(params)
				.push(locale)
			;
			return rtl::callMethod(
				context,
				"translate",
				args
			);
		}	
		return message;
	}
	
	
	
	/**
	 * Разбивает путь файла на составляющие
	 * @param {string} filepath путь к файлу
	 * @return {json} Объект вида:
	 *         dirname    - папка, в которой находиться файл
	 *         basename   - полное имя файла
	 *         extension  - расширение файла
	 *         filename   - имя файла без расширения
	 */
	public static PathInfo pathinfo(string filepath){
		Vector<string> arr1 = rs::explode(".", filepath);
		Vector<string> arr2 = rs::explode("/", filepath);
		
		PathInfo ret = new PathInfo();
		
		ret.filepath = filepath;
		ret.extension = arr1.pop();
		ret.basename = arr2.pop();
		ret.dirname = rs::implode("/", arr2);
		
		int ext_length = rs::strlen(ret.extension);
		if (ext_length > 0) ext_length++;
		ret.filename = rs::substr(ret.basename, 0, -1*ext_length);
		
		delete arr1;
		delete arr2;
		
		return ret;
	}
	
	
	
	/**
	 * Возвращает полное имя файла
	 * @param {string} filepath - путь к файлу
	 * @return {string} полное имя файла
	 */
	public static string basename(string filepath){
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.basename;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Возвращает расширение файла
	 * @param {string} filepath - путь к файлу
	 * @return {string} расширение файла
	 */
	public static string extname(string filepath){
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.extension;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Возвращает путь к папке, содержащий файл
	 * @param {string} filepath - путь к файлу
	 * @return {string} путь к папке, содержащий файл
	 */
	public static string dirname(string filepath){
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.dirname;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Returns relative path of the filepath
	 * @param string filepath
	 * @param string basepath
	 * @param string ch - Directory separator
	 * @return string relative path
	 */
	public static string relativePath(string filepath, string basepath, string ch = "/"){
		Vector<string> source = rs::explode(ch, filepath);
		Vector<string> base = rs::explode(ch, basepath);
		
		source = source.filter(bool (string s){ return s != ""; });
		base = base.filter(bool (string s){ return s != ""; });
		
		int i=0;
		while (source.count() > 0 and base.count() > 0 and source.item(0) == base.item(0)){
			source.shift();
			base.shift();
		}
		
		base.each(void (string s) use (source){
			source.unshift("..");
		});
		
		return rs::implode(ch, source);
	}
	
	
	
	/**
	 * Convert bytes to string
	 * @param Vector<byte> arr - vector of the bytes
	 * @string charset - charset of the bytes vector. Default utf8
	 * @return string
	 */
	public string bytesToString(Vector<byte> arr, string charset="utf8"){}
	
	
	
	/**
	 * Convert string to bytes
	 * @param string s - incoming string
	 * @param Vector<byte> arr - output vector
	 * @param charset - Result bytes charset. Default utf8
	 */
	public void stringToBytes(string s, Vector<byte> arr, string charset="utf8"){}
	
}