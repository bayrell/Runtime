/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.BaseStruct;
use Runtime.Dict;


struct DateTime extends BaseStruct
{
	public int y = 1970;
	public int m = 1;
	public int d = 1;
	public int h = 0;
	public int i = 0;
	public int s = 0;
	public int ms = 0;
	public string tz = "UTC";
	
	
	#ifcode PHP then
	
	private function toObject($ctx)
	{
		$dt = new \DateTime();
		$dt->setTimezone( new \DateTimeZone($this->tz) );
		$dt->setDate($this->y, $this->m, $this->d);
		$dt->setTime($this->h, $this->i, $this->s);
		return $dt;
	}
	
	public static function fromObject($ctx, $dt)
	{
		$y = (int)$dt->format("Y");
		$m = (int)$dt->format("m");
		$d = (int)$dt->format("d");
		$h = (int)$dt->format("H");
		$i = (int)$dt->format("i");
		$s = (int)$dt->format("s");
		$tz = $dt->getTimezone()->getName();
		return new \Runtime\DateTime($ctx,
			Dict::from(["y"=>$y,"m"=>$m,"d"=>$d,"h"=>$h,"i"=>$i,"s"=>$s,"tz"=>$tz])
		);
	}
	
	#endif
	
	
	/**
	 * Create date time from timestamp
	 */
	pure DateTime create(int time = -1, string tz = "UTC")
	{
		#switch
		#case ifcode PHP then
		if ($time == -1) $time = time();
		$dt = new \DateTime();
		$dt->setTimezone(new \DateTimeZone($tz));
		$dt->setTimestamp($time);
		return static::fromObject($ctx, $dt);
		
		#case ifcode JAVASCRIPT then
		var dt = null;
		if (time == -1) dt = new Date();
		else dt = new Date(time*1000);
		return this.fromObject(ctx, dt, tz);
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Create date time from string
	 */
	pure DateTime from(string s, string tz = "UTC")
	{
		return new DateTime{
			"y": rs::substr(s, 0, 4),
			"m": rs::substr(s, 5, 2),
			"d": rs::substr(s, 8, 2),
			"h": rs::substr(s, 11, 2),
			"i": rs::substr(s, 14, 2),
			"s": rs::substr(s, 17, 2),
			"tz": tz
		};
	}
	
	
	/**
	 * Returns datetime
	 * @param string tz
	 * @return DateTime
	 */
	pure DateTime now(string tz = "UTC") => static::create(-1, tz);
	
	
	/**
	 * Shift time
	 */
	DateTime shiftTime(int shift)
	{
		int timestamp = this.getTimestamp() + shift;
		DateTime dt = static::create(timestamp, this.tz);
		return dt;
	}
	
	
	/**
	 * Shift tz
	 */
	DateTime shift(string tz)
	{
		int timestamp = this.getTimestamp();
		DateTime dt = static::create(timestamp, tz);
		return dt;
	}
	
	
	/**
	 * Set week number
	 */
	DateTime setWeekNumber(int week)
	{
		#switch
		#case ifcode PHP then
		
		$dt = new \DateTime();
		$dt->setTimezone(new \DateTimeZone($this->tz));
		$dt->setISODate($this->y, $week);
		$dt->setTime(0, 0, 0);
		return static::fromObject($ctx, $dt);
		
		#case ifcode JAVASCRIPT then
		
		var dt = new Date(this.y, 0, 1, 0, 0, 0);
		var year_begin = Math.round(dt.getTime() / 1000) - dt.getTimezoneOffset() * 60;
		var day_begin = dt.getDay();
		var shift = (day_begin - 1) * 86400;
		var week_begin = year_begin - shift;
		week_begin = week_begin + week * 604800 + dt.getTimezoneOffset() * 60;
		return this.constructor.fromObject(ctx, new Date(week_begin*1000), this.tz, false);
		
		#endswitch
		
		return this;
	}
	
	
	/**
	 * Returns timestamp
	 * @return int
	 */
	int getTimestamp()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		return $dt->getTimestamp();
		
		#case ifcode JAVASCRIPT then
		var dt = this.toObject(ctx);
		return Math.round(dt.getTime() / 1000);
		
		#endswitch
		
		return null;
	}
	int timestamp() => this.getTimestamp();
	
	
	/**
	 * Returns day of week
	 * @return int
	 */
	int getDayOfWeek()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		return $dt->format("w");
		
		#case ifcode JAVASCRIPT then
		var dt = this.toObject(ctx);
		return dt.getDay();
		
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Return db datetime
	 * @return string
	 */
	string getDateTime(string tz = "")
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		if ($tz != "") $dt->setTimezone( new \DateTimeZone($tz) );
		return $dt->format("Y-m-d H:i:s");
		
		#case ifcode JAVASCRIPT then
		
		var offset = 0;
		var dt = this.toObject(ctx);
		if (tz == "") tz = this.tz;
		
		offset = this.constructor.getTimezoneOffset(ctx, tz);
		offset = offset - dt.getTimezoneOffset();
		dt = this.constructor.shiftOffset(ctx, dt, -offset);
		
		var y = Number(dt.getFullYear());
		var m = Number(dt.getMonth()) + 1;
		var d = Number(dt.getDate());
		var h = Number(dt.getHours());
		var i = Number(dt.getMinutes());
		var s = Number(dt.getSeconds());
		
		var m = (m < 10) ? "0" + m : "" + m;
		var d = (d < 10) ? "0" + d : "" + d;
		var h = (h < 10) ? "0" + h : "" + h;
		var i = (i < 10) ? "0" + i : "" + i;
		var s = (s < 10) ? "0" + s : "" + s;
		return y + "-" + m + "-" + d + " " + h + ":" + i + ":" + s;
		
		#endswitch
		
		return "";
	}
	
	
	/**
	 * Return date
	 * @return string
	 */
	string getDate(string tz = "")
	{
		string value = this.getDateTime(tz);
		return rs::substr(value, 0, 10);
	}
	
	
	/**
	 * Return datetime in RFC822
	 * @return string
	 */
	DateTime getRFC822()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		return $dt->format(\DateTime::RFC822);
		
		#case ifcode JAVASCRIPT then
		
		var y = this.y, m = this.m, d = this.d, h = this.h, i = this.i, s = this.s;
		var dt = new Date(y, m - 1, d, h, i, s);
		
		y = (y < 10) ? "0" + y : "" + y;
		m = (m < 10) ? "0" + m : "" + m;
		d = (d < 10) ? "0" + d : "" + d;
		h = (h < 10) ? "0" + h : "" + h;
		i = (i < 10) ? "0" + i : "" + i;
		s = (s < 10) ? "0" + s : "" + s;
		
		var dow = dt.getDay();
		var dow_s = "";
		if (dow == 0) dow_s = "Sun";
		if (dow == 1) dow_s = "Mon";
		if (dow == 2) dow_s = "Tue";
		if (dow == 3) dow_s = "Wed";
		if (dow == 4) dow_s = "Thu";
		if (dow == 5) dow_s = "Fri";
		if (dow == 6) dow_s = "Sat";
		
		var m_s = "";
		if (m == 1) m_s = "Jan";
		if (m == 2) m_s = "Feb";
		if (m == 3) m_s = "Mar";
		if (m == 4) m_s = "Apr";
		if (m == 5) m_s = "May";
		if (m == 6) m_s = "Jun";
		if (m == 7) m_s = "Jul";
		if (m == 8) m_s = "Aug";
		if (m == 9) m_s = "Sep";
		if (m == 10) m_s = "Oct";
		if (m == 11) m_s = "Nov";
		if (m == 12) m_s = "Dec";
		
		return dow_s + ", " + d + " " + m_s + " " + y + " " + h + ":" + i + ":" + s + " " + this.tz;
		#endswitch
		
		return "";
	}
	
	
	/**
	 * Return datetime in ISO8601
	 * @return string
	 */
	DateTime getISO8601()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		return $dt->format(\DateTime::ISO8601);
		
		#case ifcode JAVASCRIPT then
		var y = this.y, m = this.m, d = this.d, h = this.h, i = this.i, s = this.s;
		m = (m < 10) ? "0" + m : "" + m;
		d = (d < 10) ? "0" + d : "" + d;
		h = (h < 10) ? "0" + h : "" + h;
		i = (i < 10) ? "0" + i : "" + i;
		s = (s < 10) ? "0" + s : "" + s;
		var tz = Math.ceil(-this.constructor.getTimezoneOffset(ctx, this.tz) / 60);
		if (tz < 10 && tz >= 0) tz = "0" + tz;
		if (tz >= 0) tz = "+" + tz;
		return this.y + "-" + m + "-" + d + "T" + h + ":" + i + ":" + s + tz + "00";
		
		#endswitch
		
		return "";
	}
	
	
	/**
	 * Return datetime in database format y-m-d h:i:s
	 * @return string
	 */
	DateTime getDatabaseTime()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject($ctx);
		return $dt->format("y-m-d h:i:s");
		
		#case ifcode JAVASCRIPT then
		var y = this.y, m = this.m, d = this.d, h = this.h, i = this.i, s = this.s;
		m = (m < 10) ? "0" + m : "" + m;
		d = (d < 10) ? "0" + d : "" + d;
		h = (h < 10) ? "0" + h : "" + h;
		i = (i < 10) ? "0" + i : "" + i;
		s = (s < 10) ? "0" + s : "" + s;
		return this.y + "-" + m + "-" + d + " " + h + ":" + i + ":" + s;
		
		#endswitch
		
		return "";
	}
	
	
	/**
	 * Normalize date time
	 */
	DateTime normalize() => this;
	
}


#ifcode JAVASCRIPT then

Runtime.DateTime.getTimezoneOffset = function(ctx, tz)
{
	if (tz == "UTC") return 0;
	if (tz == "GMT") return 0;
	if (tz == "GMT+1") return -60;
	if (tz == "GMT+2") return -120;
	if (tz == "GMT+3") return -180;
	if (tz == "GMT+4") return -240;
	if (tz == "GMT+5") return -300;
	if (tz == "GMT+6") return -360;
	if (tz == "GMT+7") return -420;
	if (tz == "GMT+8") return -480;
	if (tz == "GMT+9") return -540;
	if (tz == "GMT+10") return -600;
	if (tz == "GMT+11") return -660;
	if (tz == "GMT+13") return -780;
	if (tz == "GMT+14") return -840;
	if (tz == "GMT-1") return 60;
	if (tz == "GMT-2") return 120;
	if (tz == "GMT-3") return 180;
	if (tz == "GMT-4") return 240;
	if (tz == "GMT-5") return 300;
	if (tz == "GMT-6") return 360;
	if (tz == "GMT-7") return 420;
	if (tz == "GMT-8") return 480;
	if (tz == "GMT-9") return 540;
	if (tz == "GMT-10") return 600;
	if (tz == "GMT-11") return 660;
	if (tz == "GMT-12") return 720;
	return 0;
}

Runtime.DateTime.shiftOffset = function(ctx, dt, offset)
{
	var h = Math.floor(offset / 60);
	var m = offset % 60;
	dt.setMinutes(dt.getMinutes() + m);
	dt.setHours(dt.getHours() + h);
	return dt;
}

Runtime.DateTime.prototype.toObject = function(ctx)
{
	var dt = new Date(this.y, this.m - 1, this.d, this.h, this.i, this.s);
	var offset = this.constructor.getTimezoneOffset(ctx, this.tz);
	var offset = offset - dt.getTimezoneOffset();
	dt = this.constructor.shiftOffset(ctx, dt, offset);
	return dt;
}

Runtime.DateTime.fromObject = function(ctx, dt, tz, is_shift)
{
	if (is_shift == undefined) is_shift = true;
	var Dict = use("Runtime.Dict");
	if (is_shift)
	{
		var offset = this.getTimezoneOffset(ctx, tz);
		var offset = offset - dt.getTimezoneOffset();
		dt = this.shiftOffset(ctx, dt, -offset);
	}
	var y = Number(dt.getFullYear());
	var m = Number(dt.getMonth()) + 1;
	var d = Number(dt.getDate());
	var h = Number(dt.getHours());
	var i = Number(dt.getMinutes());
	var s = Number(dt.getSeconds());
	var dt = new Runtime.DateTime(ctx, Dict.from({"y":y,"m":m,"d":d,"h":h,"i":i,"s":s,"tz":tz}));
	return dt;
}

#endif