/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.CoreStruct;
use Runtime.Dict;


struct DateTime extends CoreStruct
{
	
	public int y = 0;
	public int m = 0;
	public int d = 0;
	public int h = 0;
	public int i = 0;
	public int s = 0;
	public int ms = 0;
	public string tz = "UTC";
	
	
	#switch
	
	#case ifcode PHP then
	
	private function getDatetime()
	{
		$dt = new \DateTime();
		$dt->setTimezone( new \DateTimeZone($this->tz) );
		$dt->setDate($this->y, $this->m, $this->d);
		$dt->setTime($this->h, $this->i, $this->s);
		return $dt;
	}
	
	public static function fromObject($dt)
	{
		$y = (int)$dt->format("Y");
		$m = (int)$dt->format("m");
		$d = (int)$dt->format("d");
		$h = (int)$dt->format("H");
		$i = (int)$dt->format("i");
		$s = (int)$dt->format("s");
		$tz = $dt->getTimezone()->getName();
		return new DateTime( null, Dict::from(["y"=>$y,"m"=>$m,"d"=>$d,"h"=>$h,"i"=>$i,"s"=>$s,"tz"=>$tz]) );
	}
	
	#case ifcode JAVASCRIPT then
	static shiftOffset(dt, offset)
	{
		var h = Math.floor(offset / 60);
		var m = offset % 60;
		dt.setMinutes(dt.getMinutes() + m);
		dt.setHours(dt.getHours() + h);
		return dt;
	}
	static getTimezoneOffset(tz)
	{
		if (tz == "UTC") return 0;
		if (tz == "GMT") return 0;
		if (tz == "GMT+1") return -60;
		if (tz == "GMT+2") return -120;
		if (tz == "GMT+3") return -180;
		if (tz == "GMT+4") return -240;
		if (tz == "GMT+5") return -300;
		if (tz == "GMT+6") return -360;
		if (tz == "GMT+7") return -420;
		if (tz == "GMT+8") return -480;
		if (tz == "GMT+9") return -540;
		if (tz == "GMT+10") return -600;
		if (tz == "GMT+11") return -660;
		if (tz == "GMT+13") return -780;
		if (tz == "GMT+14") return -840;
		if (tz == "GMT-1") return 60;
		if (tz == "GMT-2") return 120;
		if (tz == "GMT-3") return 180;
		if (tz == "GMT-4") return 240;
		if (tz == "GMT-5") return 300;
		if (tz == "GMT-6") return 360;
		if (tz == "GMT-7") return 420;
		if (tz == "GMT-8") return 480;
		if (tz == "GMT-9") return 540;
		if (tz == "GMT-10") return 600;
		if (tz == "GMT-11") return 660;
		if (tz == "GMT-12") return 720;		
		return 0;
	}
	static fromObject(dt, tz)
	{
		var offset = this.getTimezoneOffset(tz);
		var offset = offset - dt.getTimezoneOffset();
		dt = this.shiftOffset(dt, offset);
		var y = Number(dt.getFullYear());
		var m = Number(dt.getMonth()) + 1;
		var d = Number(dt.getDate());
		var h = Number(dt.getHours());
		var i = Number(dt.getMinutes());
		var s = Number(dt.getSeconds());
		var dt = new DateTime( null, Dict.from({"y":y,"m":m,"d":d,"h":h,"i":i,"s":s,"tz":tz}) );
		return dt;
	}
	
	#endswitch
	
	
	
	/**
	 * Create date time from timestamp
	 */
	lambda DateTime timestamp(int time, string tz = "UTC")
	{
		#switch
		#case ifcode PHP then
		$dt = new \DateTime();
		$dt->setTimezone(new \DateTimeZone($tz));
		$dt->setTimestamp($time);		
		return static::fromObject($dt);
		
		#case ifcode JAVASCRIPT then
		var dt = new Date(time*1000);
		return this.fromObject(dt, tz);
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Output dbtime
	 */
	lambda string dbtime (int time, string tz = "UTC")
	{
		#switch
		#case ifcode PHP then
		$dt = new \DateTime();
		$dt->setTimezone(new \DateTimeZone($tz));
		$dt->setTimestamp($time);
		return $dt->format('Y-m-d H:i:s');
		
		#case ifcode JAVASCRIPT then
		var dt = new Date(time*1000);
		var obj = this.fromObject(dt, tz);
		return obj.getDBTime();		
		#endswitch
		
		return "";
	}
	
	
	
	
	/**
	 * Returns datetime
	 * @param string tz
	 * @return DateTime
	 */
	lambda DateTime now (string tz = "UTC")
	{
		#switch
		
		#case ifcode PHP then
		$dt = new \DateTime("now", new \DateTimezone($tz));
		return static::createDatetime($dt, $tz);
		
		#case ifcode JAVASCRIPT then
		var dt = new Date();
		return this.createDatetime(dt, tz);
		
		#endswitch
		
		return null;
	}


	
	/**
	 * Returns day of week
	 * @return int
	 */
	int getDayOfWeek ()
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime(obj);
		return $dt->format("w");
		
		#case ifcode JAVASCRIPT then
		var dt = this.getDatetime(obj);
		return dt.getDay();
		
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Returns timestamp
	 * @return int
	 */
	int getTimestamp ()
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime(obj);
		return $dt->getTimestamp();
		
		#case ifcode JAVASCRIPT then
		var dt = this.getDatetime(obj);
		return dt.getTime();
		
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Set timestamp
	 * @param int timestamp
	 * @return DateTime instance
	 */
	DateTime setTimestamp (int timestamp)
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime($obj);
		$dt->setTimestamp($timestamp);
		return static::assignDatetime($dt, $obj);
		
		#case ifcode JAVASCRIPT then
		
		
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Change time zone
	 * @param string tz
	 * @return DateTime instance
	 */
	DateTime changeTimezone (string tz)
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime($obj);
		$dt->setTimezone(new \DateTimeZone($tz));
		return static::assignDatetime($dt, $obj);
		
		#case ifcode JAVASCRIPT then
		
		
		return obj;
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Return datetime in RFC822
	 * @return string
	 */
	DateTime getRFC822()
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime($obj);
		return $dt->format(\DateTime::RFC822);
		
		#case ifcode JAVASCRIPT then
		
		var y,m,d,h,i,s,dow,dow_s,m_s,tz;
		
		y = obj.y % 100;
		y = (y < 10) ? "0" + y : "" + y;
		m = (obj.m < 10) ? "0" + obj.m : "" + obj.m;
		d = (obj.d < 10) ? "0" + obj.d : "" + obj.d;
		h = (obj.h < 10) ? "0" + obj.h : "" + obj.h;
		i = (obj.i < 10) ? "0" + obj.i : "" + obj.i;
		s = (obj.s < 10) ? "0" + obj.s : "" + obj.s;
		dow = this.getDayOfWeek(obj);
		
		dow_s = "";
		if (dow == 0) dow_s = "Sun";
		if (dow == 1) dow_s = "Mon";
		if (dow == 2) dow_s = "Tue";
		if (dow == 3) dow_s = "Wed";
		if (dow == 4) dow_s = "Thu";
		if (dow == 5) dow_s = "Fri";
		if (dow == 6) dow_s = "Sat";
		
		m = obj.m;
		m_s = "";
		if (m == 1) m_s = "Jan";
		if (m == 2) m_s = "Feb";
		if (m == 3) m_s = "Mar";
		if (m == 4) m_s = "Apr";
		if (m == 5) m_s = "May";
		if (m == 6) m_s = "Jun";
		if (m == 7) m_s = "Jul";
		if (m == 8) m_s = "Aug";
		if (m == 9) m_s = "Sep";
		if (m == 10) m_s = "Oct";
		if (m == 11) m_s = "Nov";
		if (m == 12) m_s = "Dec";
		
		tz = this.getTimezoneOffsetString(obj);
		
		return dow_s + ", " + d + " " + m_s + " " + y + " " + h + ":" + i + ":" + s + " " + tz;
		#endswitch
		
		return "";
	}
	
	
	
	/**
	 * Return datetime in ISO8601
	 * @return string
	 */
	DateTime getISO8601()
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime($obj);
		return $dt->format(\DateTime::ISO8601);
		
		#case ifcode JAVASCRIPT then
		var m = (obj.m < 10) ? "0" + obj.m : "" + obj.m;
		var d = (obj.d < 10) ? "0" + obj.d : "" + obj.d;
		var h = (obj.h < 10) ? "0" + obj.h : "" + obj.h;
		var i = (obj.i < 10) ? "0" + obj.i : "" + obj.i;
		var s = (obj.s < 10) ? "0" + obj.s : "" + obj.s;
		var tz = this.getTimezoneOffsetString(obj);
		return obj.y + "-" + m + "-" + d + "T" + h + ":" + i + ":" + s + tz;
		
		#endswitch
		
		return "";
	}
	
	
	
	/**
	 * Return db datetime
	 * @return string
	 */
	DateTime getDBTime()
	{
		#switch
		
		#case ifcode PHP then
		$dt = static::getDatetime($obj);
		return $dt->format("Y-m-d H:i:s");
		
		#case ifcode JAVASCRIPT then
		var m = (obj.m < 10) ? "0" + obj.m : "" + obj.m;
		var d = (obj.d < 10) ? "0" + obj.d : "" + obj.d;
		var h = (obj.h < 10) ? "0" + obj.h : "" + obj.h;
		var i = (obj.i < 10) ? "0" + obj.i : "" + obj.i;
		var s = (obj.s < 10) ? "0" + obj.s : "" + obj.s;
		return obj.y + "-" + m + "-" + d + " " + h + ":" + i + ":" + s;
		
		#endswitch
		
		return "";
	}
	
	
	
	/**
	 * Return datetime by UTC
	 * @return string
	 */
	DateTime getUTC()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->getDatetime();
		$dt->setTimezone( new \DateTimeZone("UTC") ); 
		return $dt->format("Y-m-d H:i:s");
		
		#case ifcode JAVASCRIPT then
		var dt = this.getDatetime(obj);
		var y = Number(dt.getUTCFullYear());
		var m = Number(dt.getUTCMonth()) + 1;
		var d = Number(dt.getUTCDate());
		var h = Number(dt.getUTCHours());
		var i = Number(dt.getUTCMinutes());
		var s = Number(dt.getUTCSeconds());
		m = (m < 10) ? "0" + m : "" + m;
		d = (d < 10) ? "0" + d : "" + d;
		h = (h < 10) ? "0" + h : "" + h;
		i = (i < 10) ? "0" + i : "" + i;
		s = (s < 10) ? "0" + s : "" + s;
		return y + "-" + m + "-" + d + " " +
			h + ":" + i + ":" + s;
		
		#endswitch
		
		return "";
	}
	
}