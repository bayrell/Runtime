/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.BaseObject;
use Runtime.Dict;
use Runtime.Math;
use Runtime.StringInterface;


class DateTime extends BaseObject implements StringInterface
{
	public int y = 1970;
	public int m = 1;
	public int d = 1;
	public int h = 0;
	public int i = 0;
	public int s = 0;
	public int ms = 0;
	public int o = 0;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict data = null)
	{
		parent();
		if (data != null)
		{
			if (data.has("y")) this.y = data.get("y");
			if (data.has("m")) this.m = data.get("m");
			if (data.has("d")) this.d = data.get("d");
			if (data.has("h")) this.h = data.get("h");
			if (data.has("i")) this.i = data.get("i");
			if (data.has("s")) this.s = data.get("s");
			if (data.has("ms")) this.ms = data.get("ms");
			if (data.has("o")) this.o = data.get("o");
		}
	}
	
	
	/**
	 * toMap
	 */
	Dict toMap() => {
		"y": this.y,
		"m": this.m,
		"d": this.d,
		"h": this.h,
		"i": this.i,
		"s": this.s,
		"ms": this.ms,
		"o": this.o,
	};
	
	
	/**
	 * Create date time from timestamp
	 */
	pure DateTime create(int time = -1)
	{
		#switch
		#case ifcode PHP then
		if ($time == -1) $time = time();
		$dt = new \DateTime();
		$dt->setTimestamp($time);
		return static::fromObject($dt);
		
		#case ifcode JAVASCRIPT then
		var dt = null;
		if (time == -1) dt = new Date();
		else dt = new Date(time*1000);
		return this.fromObject(dt);
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Returns datetime
	 * @param string tz
	 * @return DateTime
	 */
	pure DateTime now() => static::create(-1);
	
	
	/**
	 * Returns timestamp
	 * @return int
	 */
	int getTimestamp()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject();
		return $dt->getTimestamp();
		
		#case ifcode JAVASCRIPT then
		var dt = this.toObject();
		return Math.round(dt.getTime() / 1000);
		
		#endswitch
		
		return null;
	}
	int timestamp() => this.getTimestamp();
	
	
	/**
	 * Returns day of week
	 * @return int
	 */
	int getDayOfWeek()
	{
		#switch
		
		#case ifcode PHP then
		$dt = $this->toObject();
		return $dt->format("w");
		
		#case ifcode JAVASCRIPT then
		var dt = this.toObject();
		return dt.getDay();
		
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Return db datetime
	 * @return string
	 */
	string toString()
	{
		string m = (this.m < 10) ? "0" ~ this.m : "" ~ this.m;
		string d = (this.d < 10) ? "0" ~ this.d : "" ~ this.d;
		string h = (this.h < 10) ? "0" ~ this.h : "" ~ this.h;
		string i = (this.i < 10) ? "0" ~ this.i : "" ~ this.i;
		string s = (this.s < 10) ? "0" ~ this.s : "" ~ this.s;
		
		/* Get offset */
		double offset = this.o * 60;
		int offset_h = Math::abs(Math::floor(offset / 60));
		int offset_m = offset % 60;
		offset_h = (offset_h < 10) ? "0" ~ offset_h : "" ~ offset_h;
		offset_m = (offset_m < 10) ? "0" ~ offset_m : "" ~ offset_m;
		string offset_str = offset_h ~ offset_m;
		offset_str = (offset < 0) ? "-" ~ offset_str : "+" ~ offset_str;
		
		/* Return string */
		return this.y ~ "-" ~ m ~ "-" ~ d ~ "T" ~ h ~ ":" ~ i ~ ":" ~ s ~ offset_str;
	}
	
	
	/**
	 * Create DateTime from string
	 */
	static DateTime fromString(string s)
	{
		DateTime dt = new DateTime();
		dt.y = (int)rs::substr(s, 0, 4);
		dt.m = (int)rs::substr(s, 5, 2);
		dt.d = (int)rs::substr(s, 8, 2);
		dt.h = (int)rs::substr(s, 11, 2);
		dt.i = (int)rs::substr(s, 14, 2);
		dt.s = (int)rs::substr(s, 17, 2);
		dt.o = 0;
		
		if (rs::strlen(s) > 19)
		{
			string sign = rs::substr(s, 19, 1);
			int tz_h = (int)rs::substr(s, 20, 2);
			int tz_m = (int)rs::substr(s, 23, 2);
			dt.o = (tz_h * 60 + tz_m) / 60;
			if (sign == "-") dt.o = 0 - dt.o;
		}
		
		return dt;
	}
	
	
	/**
	 * Returns date time string
	 */
	string getDateTimeString()
	{
		string m = (this.m < 10) ? "0" ~ this.m : "" ~ this.m;
		string d = (this.d < 10) ? "0" ~ this.d : "" ~ this.d;
		string h = (this.h < 10) ? "0" ~ this.h : "" ~ this.h;
		string i = (this.i < 10) ? "0" ~ this.i : "" ~ this.i;
		string s = (this.s < 10) ? "0" ~ this.s : "" ~ this.s;
		return this.y ~ "-" ~ m ~ "-" ~ d ~ " " ~ h ~ ":" ~ i ~ ":" ~ s;
	}
	
	
	/**
	 * Normalize
	 */
	DateTime normalize()
	{
		DateTime dt = this;
		double offset = @.env("TZ_OFFSET");
		if (offset) dt = dt.setOffset(offset);
		return dt;
	}
	
	
	/**
	 * Shift tz
	 */
	DateTime shift(int seconds)
	{
		int timestamp = this.getTimestamp();
		DateTime dt = static::create(timestamp + seconds);
		dt.setOffset(this.o);
		return dt;
	}
	
	
	/**
	 * Set offset
	 */
	DateTime setOffset(double offset)
	{
		var dt = this.toObject();
		double dt_offset;
		
		#switch
		#case ifcode PHP then
		$dt_offset = $dt->getOffset();
		#case ifcode JAVASCRIPT then
		dt_offset = -dt.getTimezoneOffset() * 60;
		#endswitch
		
		/* Modify offset */
		double delta = offset - dt_offset;
		dt = static::modify(dt, delta);
		
		DateTime obj = static::fromObject(dt);
		obj.o = offset;
		return obj;
	}
	
	
	/**
	 * Get tz offset
	 */
	static int getOffset(string tz)
	{
		#switch
		#case ifcode PHP then
		$utc = new \DateTimeZone("UTC");
		$current = new \DateTimeZone($tz);
		$offset = $current->getOffset(new \DateTime("now", $utc));
		return $offset;
		#endswitch
	}
	
	
	/**
	 * Add seconds
	 */
	protected static var modify(var dt, double seconds)
	{
		if (seconds == 0) return dt;
		
		#switch
		
		#case ifcode PHP then
		
		$dt->modify($seconds . ' seconds');
		return $dt;
		
		#case ifcode JAVASCRIPT then
		
		var offset = Math.floor(seconds / 60);
		var h = Math.floor(offset / 60);
		var m = offset % 60;
		dt.setMinutes(dt.getMinutes() + m);
		dt.setHours(dt.getHours() + h);
		return dt;
		
		#endswitch
	}
	
	
	/**
	 * Convert to native object
	 */
	protected var toObject()
	{
		#switch
		
		#case ifcode PHP then
		
		$dt = new \DateTime();
		$dt->setTimezone( new \DateTimeZone("UTC") );
		$dt->setDate($this->y, $this->m, $this->d);
		$dt->setTime($this->h, $this->i, $this->s);
		$dt = static::modify($dt, -1 * $this->o * 60 * 60);
		return $dt;
		
		#case ifcode JAVASCRIPT then
		
		var dt = new Date(this.y, this.m - 1, this.d, this.h, this.i, this.s);
		offset = dt.getTimezoneOffset() + this.o * 60;
		dt = this.constructor.modify(dt, -offset * 60);
		return dt;
		
		#endswitch
	}
	
	
	/**
	 * Create from native object
	 */
	protected static var fromObject(var dt)
	{
		#switch
		
		#case ifcode PHP then
		
		$y = (int)$dt->format("Y");
		$m = (int)$dt->format("m");
		$d = (int)$dt->format("d");
		$h = (int)$dt->format("H");
		$i = (int)$dt->format("i");
		$s = (int)$dt->format("s");
		$o = $dt->getOffset() / 3600;
		return new \Runtime\DateTime($ctx,
			Dict::from(["y"=>$y,"m"=>$m,"d"=>$d,"h"=>$h,"i"=>$i,"s"=>$s,"o"=>$o])
		);
		
		#case ifcode JAVASCRIPT then
		
		var Dict = use("Runtime.Dict");
		offset = -dt.getTimezoneOffset() / 60;
		var y = Number(dt.getFullYear());
		var m = Number(dt.getMonth()) + 1;
		var d = Number(dt.getDate());
		var h = Number(dt.getHours());
		var i = Number(dt.getMinutes());
		var s = Number(dt.getSeconds());
		var obj = new Runtime.DateTime(Dict.from({
			"y":y,"m":m,"d":d,"h":h,"i":i,"s":s,"o":offset
		}));
		return obj;
		
		#endswitch
	}
}
