/*!
 *  Bayrell Runtime Library.  
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;

use BayrellRtl.CoreObject;
use BayrellRtl.Lib.rtl;
use BayrellRtl.Interfaces.AssertInterface;
use BayrellRtl.Interfaces.ContextInterface;


class ContextObject extends CoreObject{
	
	
	protected static ContextInterface _global_context = null;
	protected ContextInterface _context = null;
	
	
	
	/**
	 * Returns context provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getContextProvider(string provider_name){
		return this._context.getContextProvider(provider_name);
	}
	
	
	
	/**
	 * Returns global provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getGlobalProvider(string provider_name){
		return this._context.getGlobalProvider(provider_name);
	}
	
	
	
	/**
	 * Returns temporary provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getTemporaryProvider(string provider_name){
		return this._context.getTemporaryProvider(provider_name);
	}
		
	
	
	/**
	 * Get assert provider
	 *
	 * @return AssertInterface 
	 */
	public AssertInterface assert(){
		return this._context.assert();
	}
	
	
	
	/**
	 * Assert if value is true
	 *
	 */
	public void assertTrue(bool value, string message = ""){
		return this._context.assert().checkTrue(value, message);
	}
	
	
	
	/**
	 * Assert if value is false
	 *
	 */
	public void assertFalse(bool value, string message = ""){
		return this._context.assert().checkFalse(value, message);
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, MapInterface params = null, string locale = ""){
		return this._context.translate(message, params, locale);
	}
	
	
	
	/**
	 * Get context
	 *
	 * @return ContextInterface 
	 */
	public ContextInterface context(){
		return this._context;
	}
	
	
	
	/**
	 * Set context
	 *
	 * @param ContextInterface 
	 */
	public ContextInterface setContext(ContextInterface context){
		if (this._context == null)
			this._context = context;
			
		if (this._context == null){
			throw new UnknownError('context is null')
		}			
	}
	
	
	
	/** 
	 * Constructor
	 */
	public void constructor(ContextInterface context){
		parent();
		if (context == null)
			this._context = self::globalContext();
		else
			this._context = context;
			
		if (this._context == null){
			throw new UnknownError('context is null')
		}
	}
	
	
	
	/**
	 * Clone current object
	 * @return CoreObject
	 */
	public CoreObject clone(ContextInterface context = null){
		CoreObject res = this.newInstance();
		
		if (context == null)
			res._context = this._context;
		else
			res._context = context;
		
		/* Assign all values */
		res.assign(this);
		
		return res;
	}
	
	
	
	/**
	 * Returns global context
	 * @return ContextInterface
	 */
	public static ContextInterface globalContext(){
		return self::_global_context;
	}
	
	
	
	/**
	 * Set global context
	 * @param ContextInterface context
	 */
	public static void setGlobalContext(ContextInterface context){
		self::_global_context = context;
	}
}