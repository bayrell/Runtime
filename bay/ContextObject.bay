/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;

use BayrellRtl.Lib.rtl;
use BayrellRtl.CoreObject;
use BayrellRtl.Interfaces.ContextInterface;


class ContextObject extends CoreObject{
	
	
	protected ContextInterface _context = null;
	
	
	
	/**
	 * Returns context provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getProvider(string provider_name){
		return this._context.createProvider(provider_name);
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, MapInterface params = null, string locale = ""){
		return this._context.translate(message, params, locale);
	}
	
	
	
	/**
	 * Get context
	 *
	 * @return ContextInterface 
	 */
	public ContextInterface context(){
		return this._context;
	}
	
	
	
	/** 
	 * Constructor
	 */
	public void constructor(ContextInterface context = null){
		parent();
		this._context = context;
		if (not rtl::exists(this._context)){
			this._context = rtl::globalContext();
		}
	}
	
}