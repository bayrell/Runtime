/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreObject;
use Runtime.Dict;
use Runtime.rtl;
use Runtime.Vector;
use Runtime.Interfaces.SerializeInterface;


class CoreStruct extends CoreObject implements SerializeInterface
{	
	
	/** 
	 * Constructor
	 */
	public void constructor(Map obj = null)
	{
		parent();
		if (obj != null)
		{
			this.assignDict(obj);
			this.initData(null, obj);
		}
		#switch
		#case ifcode JAVASCRIPT then
		if (this.__uq__ == undefined || this.__uq__ == null) this.__uq__ = Symbol();
		#endswitch
	}
	
	
	
	/**
	 * Init struct data
	 */
	protected void initData(CoreStruct old_model, Dict changed = null)
	{
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return CoreStruct
	 */
	public CoreStruct copy(Dict obj = null)
	{
		if (obj == null) return this;
		
		CoreStruct res = rtl::newInstance( this.getClassName(), [] );
		res.assignObject(this);
		res.setDict(obj);
		res.initData(this, obj);
		
		/* Return object */
		return res;
	}
	
	
	
	/**
	 * Create new struct with new value
	 * @param string field_name
	 * @param fun f
	 * @return CoreStruct
	 */
	public CoreStruct map(string field_name, fun f)
	{
		return this.copy( (new Map()).set(field_name, f(this.takeValue(field_name))) );
	}
	
	
	
}