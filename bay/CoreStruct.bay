/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreObject;
use Runtime.Map;
use Runtime.rtl;
use Runtime.Vector;
use Runtime.Interfaces.SerializeInterface;


class CoreStruct extends CoreObject implements SerializeInterface
{	
	
	/** 
	 * Constructor
	 */
	public void constructor(Map obj = null, bool can_call_created = true)
	{
		parent();
		this.assignMap(obj);
		if (can_call_created) this.onCreated();
	}
	
	
	
	/**
	 * Struct created 
	 */
	public void onCreated()
	{
	}	
	
	
	
	/**
	 * Clone this struct with new values
	 * @param Map obj = null
	 * @return CoreStruct
	 */
	public CoreStruct clone(Map obj = null)
	{
		CoreStruct instance = rtl::newInstance( this.getClassName(), [null, false] );
		
		/* Clone values */
		instance.assignObject( this );
		
		/* Assign new values */
		if (obj != null) instance.setMap(obj);
		
		/* Call created */
		instance.onCreated();
		
		/* Return object */
		return instance;
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return CoreStruct
	 */
	public CoreStruct copy(Map obj = null)
	{
		CoreStruct instance = rtl::newInstance( this.getClassName(), [null, false] );
		
		/* copy values without clone */
		Vector<string> names = new Vector();
		this.getVariablesNames(names, 2);
		for (int i=0; i<names.count(); i++)
		{
			string name = names.item(i);
			instance.assignValue(name, this.takeValue(name));
		}
		
		/* Assign new values */
		if (obj != null) instance.setMap(obj);
		
		/* Call created */
		instance.onCreated();
		
		/* Return object */
		return instance;
	}	
	
}