/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreObject;
use Runtime.Dict;
use Runtime.Map;
use Runtime.rtl;
use Runtime.RuntimeUtils;
use Runtime.Vector;
use Runtime.Interfaces.SerializeInterface;


class CoreStruct extends CoreObject implements ArrayInterface, SerializeInterface
{	
	
	/** 
	 * Constructor
	 */
	public void constructor(Map obj = null)
	{
		parent();
		if (obj != null)
		{
			if (not (obj instanceof Dict))
			{
				#switch
				#case ifcode PHP then
				$obj = \Runtime\Dict::from($obj);
				#case ifcode JAVASCRIPT then
				var _Dict = use("Runtime.Dict");
				if (typeof obj == "object") obj = _Dict.from(obj);
				#endswitch
			}
			#switch
			#case ifcode JAVASCRIPT then
			var rtl = use("Runtime.rtl");
			for (var key in obj._map)
			{
				this.assignValue(ctx, key.substring(1), obj._map[key]);
			}
			#case ifcode PHP then
			foreach ($obj->_map as $key => $value)
			{
				$this->assignValue($ctx, $key, $value);
			}
			#endswitch
			this.initData(null, obj);
		}
		#switch
		#case ifcode JAVASCRIPT then
		if (this.__uq__ == undefined || this.__uq__ == null) this.__uq__ = Symbol();
		#endswitch
	}
	
	
	
	/**
	 * Init struct data
	 */
	protected void initData(CoreStruct old, Dict changed = null)
	{
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return CoreStruct
	 */
	public CoreStruct copy(Dict obj = null)
	{
		if (obj == null) return this;
		
		#switch
		#case ifcode PHP then
		
		$item = clone $this;
		if ($obj instanceof \Runtime\Dict)
		{
			foreach ($obj->_map as $key => $value)
			{
				$k = "__".$key;
				if (property_exists($item, $k))
					$item->$k = $value;
			}
		}
		else if (gettype($obj) == "array")
		{
			foreach ($obj as $key => $value)
			{
				$k = "__".$key;
				if (property_exists($item, $k))
					$item->$k = $value;
			}
		}
		
		return $item;
		
		#case ifcode JAVASCRIPT then
		
		var proto = Object.getPrototypeOf(this);
		var item = Object.create(proto); item._init();
		item = Object.assign(item, this);
		
		var _Dict = use("Runtime.Dict");
		if (obj instanceof _Dict)
		{
			for (var key in obj._map) item["__" + key.substring(1)] = obj._map[key];
		}
		else
		{
			for (var key in obj) item["__" + key] = obj[key];
		}
		
		item.initData(this, obj);
		
		return item;
		
		#endswitch
		
		return this;
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return CoreStruct
	 */
	public CoreStruct clone(Collection fields)
	{
		Map obj = new Map();
		if (fields != null)
		{
			fields.each
			( 
				void (string field_name) use (obj)
				{
					obj.set(field_name, this.takeValue(field_name));
				}
			);
		}
		else
		{
			return this;
		}
		
		/* Return object */
		CoreStruct res = rtl::newInstance( this.getClassName(), [ obj.toDict() ] );
		return res;
	}
	
	
	
	/**
	 * Create new struct with new value
	 * @param string field_name
	 * @param fn f
	 * @return CoreStruct
	 */
	public CoreStruct map(string field_name, fn f)
	{
		return this.copy( (new Map()).set(field_name, f(this.takeValue(field_name))).toDict() );
	}
	
	
	
	/**
	 * Returns new instance
	 */
	lambda CoreStruct newInstance(Dict items)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return new (Function.prototype.bind.apply(this, [null, ctx, items]));
		#case ifcode PHP then
		$class_name = static::class;
		return new $class_name($ctx, $items);
		#endswitch
	}
	
	
	
	#switch
	#case ifcode PHP then
	function __get($k){$k="__".$k;return isset($this->$k)?$this->$k:null;}
	function __set($k,$v){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	function offsetExists($k){$k="__".$k;return isset($this->$k);}
	function offsetGet($k){$k="__".$k;return isset($this->$k)?$this->$k:null;}
	function offsetSet($k,$v){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	function offsetUnset($k){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	#endswitch
	
}