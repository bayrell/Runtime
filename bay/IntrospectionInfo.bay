/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreStruct;
use Runtime.Maybe;
use Runtime.rtl;
use Runtime.Collection;


struct IntrospectionInfo extends CoreStruct
{
	
	const string ITEM_CLASS = "class";
	const string ITEM_FIELD = "field";
	const string ITEM_METHOD = "method";
	
	public string class_name = "";
	public string kind = "";
	public string name = "";
	public Collection<CoreStruct> annotations = null;
	
	
	/* lambda isInstanceOf(string class_name) => bool (CoreStruct item) => rtl::is_instanceof(item, class_name); */
	
	
	
	/**
	 * Returns true if has annotations by class_name
	 * @string class_name
	 * @return bool
	 */
	pure Collection<CoreStruct> filterAnnotations(string class_name, IntrospectionInfo info)
	{
		if (info.annotations == null)
			return null;
		
		return info.annotations.filter(
			bool (CoreStruct item) use (class_name)
			{
				return rtl::is_instanceof(item, class_name);
			}
		).toCollection();
	}
	
	
	
	/**
	 * Returns true if has annotations by class_name
	 * @string class_name
	 * @return bool
	 */
	bool hasAnnotationOld(string class_name)
	{
		
		/*
		return Maybe::of(this.annotations)
			.map( 
				rtl::findFirst(
					bool (CoreStruct item) use (class_name)
					{
						return rtl::is_instanceof(item, class_name);
					}
				) 
			)
			.value() != null
		;
		
		*/
		/* return 
			( 
				pipe(this.annotations) >> 
				rtl::findFirst(self::isInstanceOf(class_name))
			).value() != null
		; 
		*/
		/* return Maybe.of(this.annotations).map( rtl::findFirst( self::isInstanceOf(class_name) ) ).value() != null; */
		
		/*
		if (this.annotations == null)
		{
			return false;
		}
		
		for (int i=0; i<this.annotations.count(); i++)
		{
			CoreStruct item = this.annotations.item(i);
			if (rtl::is_instanceof(item, class_name))
			{
				return true;
			}
		}
		
		return false;
		*/
	}
	
	
	
	/**
	 * Returns true if has annotations by class_name
	 * @string class_name
	 * @return bool
	 */
	Collection<CoreStruct> filterAnnotationsOld(string class_name)
	{
		/*
		return Maybe.of(this.annotations)
			.map( 
				rtl::filter(
					bool (CoreStruct item) use (class_name)
					{
						return rtl::is_instanceof(item, class_name);
					}
				) 
			)
			.value()
		;
		*/
		
		/* return Maybe.of(this.annotations).map( rtl::filter( self::isInstanceOf(class_name) ) ).value() != null; */
		
		/*
		if (this.annotations == null)
		{
			return null;
		}
		
		return this.annotations.filter(
			bool (CoreStruct item) use (class_name)
			{
				return rtl::is_instanceof(item, class_name);
			}
		);
		*/
	}
	
}

