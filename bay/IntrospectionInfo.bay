/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreObject;
use Runtime.CoreStruct;
use Runtime.rtl;
use Runtime.Vector;


class IntrospectionInfo extends CoreStruct{
	
	const string ITEM_CLASS = "class";
	const string ITEM_FIELD = "field";
	const string ITEM_METHOD = "method";
	
	public serializable string class_name = "";
	public serializable string kind = "";
	public serializable string name = "";
	public serializable Vector<CoreObject> annotations = null;
	
	
	
	/**
	 * Returns true if has annotations by class_name
	 * @string class_name
	 * @return bool
	 */
	bool hasAnnotation(string class_name)
	{
		if (this.annotations == null)
		{
			return false;
		}
		
		for (int i=0; i<this.annotations.count(); i++)
		{
			CoreObject item = this.annotations.item(i);
			if (rtl::is_instanceof(item, class_name))
			{
				return true;
			}
		}
		
		return false;
	}
	
	
	
	/**
	 * Returns true if has annotations by class_name
	 * @string class_name
	 * @return bool
	 */
	Vector<CoreObject> filterAnnotations(string class_name)
	{
		if (this.annotations == null)
		{
			return null;
		}
		
		return this.annotations.filter(
			bool (CoreObject item) use (class_name)
			{
				return rtl::is_instanceof(item, class_name);
			}
		);
	}
	
}

