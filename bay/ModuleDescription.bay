/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.Emitter;
use Runtime.Map;
use Runtime.rtl;
use Runtime.Vector;
use Runtime.Interfaces.AssetsInterface;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;


class ModuleDescription implements ModuleDescriptionInterface, AssetsInterface
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleName() => "Runtime";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleVersion() => "0.7.3";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */	
	lambda Map<string> requiredModules() => null;
	
	
	
	/**
	 * Compatibility with older versions
	 */
	lambda Map<string> getRequiredModules() => static::requiredModules();
	
	
	
	/**
	 * Returns module files load order
	 * @return Collection<string>
	 */
	lambda Collection<string> getModuleFiles() => 
	[
		"Runtime.rs",
		"Runtime.re",
		"Runtime.rtl",
		"Runtime.Collection",
		"Runtime.Container",
		"Runtime.CoreObject",
		"Runtime.Dict",
		"Runtime.Emitter",
		"Runtime.RuntimeConstant",
		"Runtime.RuntimeUtils",
		"Runtime.Exceptions.RuntimeException",
		"Runtime.Interfaces.CloneableInterface",
		"Runtime.Interfaces.ContextInterface",
		"Runtime.Interfaces.FactoryInterface",
		"Runtime.Interfaces.ModuleDescriptionInterface",
		"Runtime.Interfaces.SerializeInterface",
		"Runtime.Interfaces.StringInterface",
		"Runtime.Interfaces.SubscribeInterface",
		"Runtime.AsyncTask",
		"Runtime.AsyncThread",
		"Runtime.Context",
		"Runtime.ContextObject",
		"Runtime.CoreStruct",
		"Runtime.CoreProvider",
		"Runtime.CoreEvent",
		"Runtime.BusResult",
		"Runtime.Map",
		"Runtime.Maybe",
		"Runtime.PathInfo",
		"Runtime.ModuleDescription",
		"Runtime.Reference",
		"Runtime.Vector",
		"Runtime.Exceptions.ApiException",
		"Runtime.Exceptions.IndexOutOfRange",
		"Runtime.Exceptions.KeyNotFound",
		"Runtime.Exceptions.UnknownError",
		"Runtime.DateTime",
		"Runtime.Annotations.IntrospectionInfo",
		"Runtime.Annotations.LambdaChain",
		"Runtime.Annotations.Provider",
		"Runtime.Annotations.Manager",
		"Runtime.UIStruct",
	];
	
	
	
	/**
	 * Returns enities
	 */
	lambda Collection<Dict> entities() => null;
	
	
	
	/**
	 * Returns enities
	 */
	lambda Collection<Dict> resources() => null;
	
	
	
	/**
	 * Called then module registed in context
	 * @param ContextInterface context
	 */
	public static void onRegister(ContextInterface context)
	{
	}
	
	
	
	/**
	 * Called then context read config
	 * @param ContextInterface context
	 * @param Map<mixed> config
	 */
	public static void onReadConfig(ContextInterface context, Map<mixed> config)
	{
	}
	
	
	
	/**
	 * Init context
	 * @param ContextInterface context
	 */
	public static void onInitContext(ContextInterface context)
	{
	}
	
}