/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.SerializerNative;


class SerializerJson extends SerializerNative
{
	/**
	 * Export object to data
	 */
	string encode(var object)
	{
		this.setFlag(static::ENCODE);
		
		#switch
		#case ifcode PHP then
		$value = $this->encodeItem($object);
		$json_flags = JSON_UNESCAPED_UNICODE;
		if ($this->hasFlag(static::JSON_PRETTY))
		{
			$json_flags = $json_flags | JSON_PRETTY_PRINT;
		}
		return json_encode($value, $json_flags);
		
		#case ifcode JAVASCRIPT then
		
		value = this.encodeItem(ctx, object);
		return JSON.stringify(value, (key, value) => {
			return value;
		});
		#endswitch
	}
	
	
	/**
	 * Import from string
	 */
	var decode(string s)
	{
		this.setFlag(static::DECODE);
		
		#switch
		#case ifcode PHP then
		
		$res = @json_decode($s, false);
		if ($res === null || $res === false)
			return null;
		return $this->decodeItem($res);
		
		#case ifcode JAVASCRIPT then
		try{
			var res = null;
			try
			{
				res = JSON.parse(s, (key, value) => {
					if (value == null) return value;
					var object = this.decodeItem(ctx, value);
					return object;
				});
			}
			catch (e)
			{
				if (e instanceof SyntaxError)
				{
					res = null;
				}
				else
				{
					throw e;
				}
			}
			return res;
		}
		catch(e)
		{
			throw e;
		}
		return null;
		#endswitch
	}
}