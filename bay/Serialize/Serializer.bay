/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Callback;
use Runtime.Date;
use Runtime.DateTime;
use Runtime.SerializeInterface;


class Serializer extends BaseObject
{
	static const int ALLOW_OBJECTS = 1;
	static const int ENCODE = 2;
	static const int DECODE = 4;
	static const int JSON_PRETTY = 8;
	
	int flags = 0;
	string callback_name = null;
	
	bool allowObjects() => this.flags & static::ALLOW_OBJECTS == static::ALLOW_OBJECTS;
	bool isDecode() => this.flags & static::DECODE == static::DECODE;
	bool isEncode() => this.flags & static::ENCODE == static::ENCODE;
	
	
	/**
	 * Set flag
	 */
	void setFlag(int flag)
	{
		this.flags = this.flags | flag;
	}
	
	
	/**
	 * Remove flag
	 */
	void removeFlag(int flag)
	{
		#switch
		#case ifcode PHP then
		$this->flags = $this->flags & ~$flag;
		#case ifcode JAVASCRIPT then
		this.flags = this.flags & ~flag;
		#endswitch
	}
	
	
	/**
	 * Check flag
	 */
	bool hasFlag(int flag) => this.flags & flag == flag;
	
	
	/**
	 * Set callback
	 */
	void setCallback(string value)
	{
		this.callback_name = value;
	}
	
	
	/**
	 * Serialize item
	 */
	void process(BaseObject object, string field_name, Map data, fn create = null)
	{
		if (this.isDecode())
		{
			var value = data.get(field_name);
			var object_value = static::getAttr(object, field_name);
			var new_value = this.decodeItem(value, object_value, create);
			static::setAttr(object, field_name, new_value);
		}
		else if (this.isEncode())
		{
			var value = static::getAttr(object, field_name);
			var new_value = this.encodeItem(value);
			data.set(field_name, new_value);
		}
	}
	
	
	/**
	 * Process items
	 */
	void processItems(BaseObject object, string field_name, Map data, fn create = null)
	{
		if (this.isDecode())
		{
			var value = data.get(field_name);
			var object_value = static::getAttr(object, field_name);
			var new_value = this.decodeItems(value, object_value, create);
			static::setAttr(object, field_name, new_value);
		}
		if (this.isEncode())
		{
			var value = static::getAttr(object, field_name);
			var new_value = this.encodeItem(value);
			data.set(field_name, new_value);
		}
	}
	
	
	/**
	 * Get attr
	 */
	static var getAttr(BaseObject object, string field_name)
	{
		if (object == null) return null;
		
		#switch
		#case ifcode PHP then
		if (property_exists($object, $field_name))
		{
			return $object->$field_name;
		}
		#case ifcode JAVASCRIPT then
		return field_name in object ? object[field_name] : null;
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Set attr
	 */
	static var setAttr(BaseObject object, string field_name, var value)
	{
		#switch
		#case ifcode PHP then
		$object->$field_name = $value;
		#case ifcode JAVASCRIPT then
		object[field_name] = value;
		#endswitch
	}
	
	
	/**
	 * Decode collection
	 */
	Vector decodeCollection(Collection value, var object_value = null, fn create = null)
	{
		Vector new_value = [];
		for (int i=0; i<value.count(); i++)
		{
			var item = value.get(i);
			var old_item = (object_value instanceof Collection) ? object_value.get(i) : null;
			var new_item = this.decodeItem(item, old_item, create);
			new_value.push(new_item);
		}
		return new_value;
	}
	
	
	/**
	 * Decode dict
	 */
	Map decodeDict(Dict value, var object_value = null, fn create = null)
	{
		Map new_value = {};
		Collection keys = value.keys();
		for (int i=0; i<keys.count(); i++)
		{
			string key = keys.get(i);
			var item = value.get(key);
			var old_item = static::getAttr(object_value, key);
			var new_item = this.decodeItem(item, old_item, create);
			new_value.set(key, new_item);
		}
		return new_value;
	}
	
	
	/**
	 * Create object
	 */
	BaseObject createObject(Dict value, var object_value = null, fn create = null)
	{
		string class_name = value.get("__class_name__");
		
		/* Create instance */
		BaseObject instance = object_value;
		if (object_value != null)
		{
			instance = object_value;
		}
		else if (create != null)
		{
			instance = create(this, value);
		}
		else
		{
			instance = rtl::newInstance(class_name);
		}
		
		/* If instance is null */
		if (instance == null) return null;
		
		/* Get callback */
		Callback callback = null;
		if (this.callback_name != null)
		{
			Callback callback = new Callback(instance, this.callback_name);
			if (callback.exists()) callback = null;
		}
		
		/* Apply object serialize */
		if (callback)
		{
			rtl::apply(callback, [this, value]);
		}
		else if (instance implements SerializeInterface)
		{
			instance.serialize(this, value);
		}
		
		/* Return instance */
		return instance;
	}
	
	
	/**
	 * Decode object
	 */
	var decodeObject(Dict value, var object_value = null, fn create = null)
	{
		/* Convert to Dict if objects is not allowed */
		if (not this.allowObjects()) return this.decodeDict(value);
		
		/* Create object by create */
		if (create != null) return this.createObject(value, object_value, create);
		
		/* Convert Dict if does not has class name */
		if (not value.has("__class_name__")) return this.decodeDict(value);
		
		string class_name = value.get("__class_name__");
		
		/* Is date */
		if (class_name == "Runtime.Date")
		{
			return new Date(value);
		}
		
		/* Is datetime */
		else if (class_name == "Runtime.DateTime")
		{
			return new DateTime(value);
		}
		
		/* Struct */
		if (rtl::is_instanceof(class_name, "Runtime.BaseStruct"))
		{
			value.remove("__class_name__");
			value = this.decodeDict(value);
			var object = rtl::newInstance(class_name, [value]);
			return object;
		}
		
		/* Create object by class name */
		if (
			rtl::exists(rtl::find_class(class_name)) and
			rtl::is_instanceof(class_name, "Runtime.BaseObject")
		)
		{
			return this.createObject(value, object_value, create);
		}
		
		return this.decodeDict(value);
	}
	
	
	/**
	 * Decode item from primitive data
	 */
	void decodeItem(var value, var object_value = null, fn create = null)
	{
		if (value === null) return null;
		if (rtl::isScalarValue(value)) return value;
		if (value instanceof BaseObject) return value;
		
		/* Decode object */
		if (
			this.allowObjects() and
			value instanceof Dict and
			(value.has("__class_name__") or create)
		)
		{
			return this.decodeObject(value, object_value, create);
		}
		
		return this.decodeItems(value, object_value);
	}
	
	
	/**
	 * Decode items
	 */
	void decodeItems(var value, var object_value = null, fn create = null)
	{
		/* Decode Collection */
		if (value instanceof Collection) return this.decodeCollection(value, object_value, create);
		
		/* Decode Dict */
		else if (value instanceof Dict) return this.decodeDict(value, object_value, create);
		
		return null;
	}
	
	
	/**
	 * Encode object
	 */
	Map encodeObject(BaseObject value)
	{
		Map new_value = null;
		
		/* Get new value */
		if (value instanceof BaseStruct) new_value = value.toMap();
		else new_value = {};
		
		/* Add class_name */
		if (this.allowObjects())
		{
			new_value.set("__class_name__", value::getClassName());
		}
		
		/* Get callback */
		Callback callback = null;
		if (this.callback_name != null)
		{
			Callback callback = new Callback(value, this.callback_name);
			if (callback.exists()) callback = null;
		}
		
		/* Apply object serialize */
		if (callback)
		{
			rtl::apply(callback, [this, new_value]);
		}
		else if (value implements SerializeInterface)
		{
			value.serialize(this, new_value);
		}
		
		return new_value;
	}
	
	
	/**
	 * Encode date
	 */
	Map encodeDate(Date value)
	{
		value = value.toMap();
		if (this.allowObjects())
		{
			value.set("__class_name__", "Runtime.Date");
		}
		return value;
	}
	
	
	/**
	 * Encode date time
	 */
	Map encodeDateTime(DateTime value)
	{
		value = value.toMap();
		if (this.allowObjects())
		{
			value.set("__class_name__", "Runtime.DateTime");
		}
		return value;
	}
	
	
	/**
	 * Encode collection
	 */
	Vector encodeCollection(Collection value)
	{
		Vector new_value = [];
		for (int i=0; i<value.count(); i++)
		{
			var item = value.get(i);
			var new_item = this.encodeItem(item);
			new_value.push(new_item);
		}
		return new_value;
	}
	
	
	/**
	 * Encode dict
	 */
	Map encodeDict(Dict value)
	{
		Map new_value = {};
		value.each(
			void (var item, string key) use (new_value)
			{
				var new_item = this.encodeItem(item);
				new_value.set(key, new_item);
			}
		);
		return new_value;
	}
	
	
	/**
	 * Encode item to primitive data
	 */
	void encodeItem(var value)
	{
		if (value === null) return null;
		if (rtl::isScalarValue(value)) return value;
		
		/* Encode Collection or Dict */
		if (value instanceof Collection) return this.encodeCollection(value);
		if (value instanceof Dict) return this.encodeDict(value);
		
		/* Encode Object */
		if (value instanceof Date) return this.encodeDate(value);
		else if (value instanceof DateTime) return this.encodeDateTime(value);
		else if (value instanceof BaseObject) return this.encodeObject(value);
		
		return null;
	}
	
	
	/**
	 * Export object to data
	 */
	var encode(var object)
	{
		this.setFlag(static::ENCODE);
		var res = this.encodeItem(object);
		this.removeFlag(static::ENCODE);
		return res;
	}
	
	
	/**
	 * Import from object
	 */
	var decode(var object)
	{
		this.setFlag(static::DECODE);
		var res = this.decodeItem(object);
		this.removeFlag(static::DECODE);
		return res;
	}
	
	
	/**
	 * Copy object
	 */
	static var copy(var obj)
	{
		Serializer serializer = rtl::newInstance( static::getClassName() );
		serializer.setFlag(static::ALLOW_OBJECTS);
		var encoded = serializer.encode(obj);
		return serializer.decode(encoded);
	}
}