/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.Entity.Hook;
use Runtime.Providers.HookProvider;


class BaseHook extends BaseObject
{
	Hook hook = null;
	HookProvider provider = null;
	
	
	/**
	 * Create hook
	 */
	void constructor(Dict params = null)
	{
		parent();
		
		/* Setup hook params */
		this.setup(params);
	}
	
	
	/**
	 * Setup hook params
	 */
	void setup(Dict params)
	{
		if (params == null) return;
	}
	
	
	/**
	 * Returns method name by hook name
	 */
	string getMethodName(string hook_name) => "";
	
	
	/**
	 * Register hook
	 */
	void register(string hook_name, var method_name = "", int priority = 100)
	{
		if (rtl::isInt(method_name))
		{
			priority = method_name;
			method_name = "";
		}
		if (method_name == "") method_name = this.getMethodName(hook_name);
		if (method_name == "") return;
		this.provider.register(hook_name, this, method_name, priority);
	}
	
	
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
	}
}