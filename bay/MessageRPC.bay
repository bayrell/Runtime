/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.CoreStruct;
use Runtime.Collection;
use Runtime.Map;
use Runtime.Message;
use Runtime.Monad;
use Runtime.rtl;
use Runtime.RuntimeConstant;
use Runtime.Session;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;


struct MessageRPC<primitive> extends Message
{
	/* Data */
	string uri = "";
	string api_name = "";
	string space_name = "";
	string method_name = "";
	Dict data = null;
	
	/* Result */
	int code = 0;
	string success_message = "";
	string error = "";
	string error_name = "";
	string error_trace = "";
	primitive response = null;
	Collection<string> logs = null;	
	bool have_answer = false;
	
		
	/**
	 * Returns true if success
	 * @return bool
	 */
	pure bool isSuccess(Message msg) => msg.have_answer and msg.code >= RuntimeConstant::ERROR_OK;
	
	
	
	/**
	 * Set success result
	 * @param primitive res
	 * @return Message
	 */
	pure fn success(primitive response, string message = "", int code = 1) =>
		Message (Message msg) use (response, message, code) =>
			msg.copy
			{
				"code": code,
				"error": "",
				"success_message": message,
				"response": response,
			}
	;
	
	
	
	/**
	 * Set fail result
	 * @param primitive res
	 * @return Message
	 */
	pure fn fail(primitive response, string error = "", int code = -1, string error_name = "") =>
		Message (Message msg) use (response, error, error_name, code) =>
			msg.copy
			{
				"code": code,
				"error": error,
				"error_name": error_name,
				"response": response,
			}
	;
	
	
	
	/**
	 * Set exception
	 * @param primitive res
	 * @return Message
	 */
	pure fn exception(RuntimeException e) =>
		Message (Message msg) use (e)
		{
			msg = msg.copy
			{
				"code": e.getErrorCode(),
				"error": e.getErrorMessage(),
				"error_name": e.getClassName(),
				"response": null,
			};
			
			if (e instanceof ApiException)
			{
				msg <= response <= e.response;
			}
			
			return msg;
		}
	;
	
	
	
	/**
	 * End pipe
	 */
	pure MessageRPC end(Monad m)
	{
		if (m.err == null) return m;
		return new Monad
		(
			new MessageRPC
			{
				"error": m.err.getErrorMessage(),
				"error_name": m.err.getClassName(),
				"code": m.err.getErrorCode(),
				"response": m.err,
			}
		);
	}
	
}
