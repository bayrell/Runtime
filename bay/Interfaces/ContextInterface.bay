/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Interfaces;


interface ContextInterface
{
	
	
	/**
	 * Returns base path
	 * @return string
	 */
	string getBasePath();
	
	
	
	/**
	 * Returns registed modules
	 * @return Vector<string>
	 */
	Collection<string> getModules();
	
	
	
	/**
	 * Get manager
	 *
	 * @params string manager_name
	 * @return CoreManager
	 */
	public CoreManager getManager(string manager_name);
	
	
	
	
	/**
	 * Returns provider
	 *
	 * @params string provider_name
	 * @return CoreProvider
	 */
	public CoreProvider getProvider(string provider_name, Dict params = null);
	
	
	
	/**
	 * Apply Lambda Chain
	 */
	CoreStruct chain(string chain_name, Dict args);
	
	
	
	/**
	 * Apply Lambda Chain Await
	 */
	async CoreStruct chainAwait(string chain_name, Dict args);
	
	
	
	/**
	 * Returns config item
	 */
	Dict<mixed> getConfigItem(Collection<scalar> path, mixed default_value, 
		string type_value = "mixed", string type_template = "");
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params Map params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, Map params = null, string locale = "");
	
	
	
	/**
	 * Local bus call
	 * @param string class_name
	 * @param string method_name
	 * @param ApiRequest request
	 * @return mixed The result of the api
	 */ 
	async ApiResult busCall(
		string class_name, string interface_name, string method_name, 
		Collection<primitive> data
	);
	
	
	
	/**
	 * Remote bus call
	 * @param string remote_name
	 * @param string method_name
	 * @param ApiRequest request
	 * @return mixed The result of the api
	 */ 
	async ApiResult remoteBusCall
	(
		string remote_gate,
		string class_name, string interface_name, string method_name, 
		Collection<primitive> data
	);
	
	
	
}

