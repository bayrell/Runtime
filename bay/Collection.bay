/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Exceptions.IndexOutOfRange;
use Runtime.Exceptions.RuntimeException;


abstract class _Collection{}

#switch
#case ifcode JAVASCRIPT then
if (typeof Runtime == 'undefined') Runtime = {};
Runtime._Collection = function()
{
	Array.call(this);
	for (var i=1; i<arguments.length; i++) Array.prototype.push.call(this, arguments[i]);
	this.__uq__ = Symbol();
}
Runtime._Collection.prototype = Object.create(Array.prototype);
Runtime._Collection.prototype.constructor = Runtime._Collection;
Object.assign(Runtime._Collection.prototype,
{
	toArray: function()
	{
		return Array.prototype.slice.call(this);
	},
	toStr: function(value)
	{
		return use("Runtime.rtl").toStr(value);
	}
});
Object.assign(Runtime._Collection,
{
	from: function(arr)
	{
		var res = this.Instance();
		if (arr == undefined && arr == null) return this.Instance();
		
		if (arr instanceof Array)
		{
			var new_arr = arr.slice();
			Object.setPrototypeOf(new_arr, this.prototype);
			return new_arr;
		}
		
		var res = this.Instance();
		if (
			arr instanceof Int8Array ||
			arr instanceof Uint8Array ||
			arr instanceof Int16Array ||
			arr instanceof Uint16Array ||
			arr instanceof Int32Array ||
			arr instanceof Uint32Array ||
			arr instanceof Float32Array ||
			arr instanceof Float64Array
		)
		{
			for (var i=0; i<arr.length; i++)
			{
				Array.prototype.push.call(res, arr[i]);
			}
		}
		
		return res;	
	},
	getNamespace: function(){ return "Runtime"; },
	getClassName: function(){ return "Runtime._Collection"; },
	getParentClassName: function(){ return ""; },
});
#case ifcode NODEJS then
use.add(Runtime._Collection);
#case ifcode PHP then
class _Collection implements \ArrayAccess, \JsonSerializable
{
	$_arr = [];
	
	
	/**
	 * From
	 */
	static function from($arr)
	{
		$class_name = static::class;
		$res = new $class_name();
		if ($arr != null)
		{
			if ($arr instanceof \Runtime\Collection)
			{
				$res->_arr = $arr->_arr;
			}
			else if (gettype($arr) == 'array') $res->_arr = $arr;
		}
		return $res;	
	}
	
	
	/**
	 * JsonSerializable
	 */
	function jsonSerialize()
	{
		return $this->_arr;
	}
	
	
	/**
	 * Constructor
	 */
	function __construct()
	{
		$this->_arr = array_slice(func_get_args(), 1);
	}
	
	
	/**
	 * Destructor
	 */
	function __destruct()
	{
		unset($this->_arr);
	}
	
	
	/**
	 * Get array
	 */
	function _getArr()
	{
		return $this->_arr;
	}
	
	
	/**
	 * Get and set methods
	 */
	function __isset($k){return isset($this->_arr[$k]);}
	function __get($k){return $this->item(\Runtime\rtl::getContext(), $k);}
	function __set($k,$v){
		throw new \Runtime\Exceptions\AssignStructValueError(\Runtime\rtl::getContext(), $k);
	}
	function __unset($k){
		throw new \Runtime\Exceptions\AssignStructValueError(\Runtime\rtl::getContext(), $k);
	}
	function offsetExists($k){return isset($this->_arr[$k]);}
	function offsetGet($k){return $this->item(\Runtime\rtl::getContext(), $k);}
	function offsetSet($k,$v){
		throw new \Runtime\Exceptions\AssignStructValueError(\Runtime\rtl::getContext(), $k);
	}
	function offsetUnset($k){
		throw new \Runtime\Exceptions\AssignStructValueError(\Runtime\rtl::getContext(), $k);
	}
	
	
	/* Class name */
	static function getClassName(){return "Runtime._Collection";}
	static function getParentClassName(){return "";}
	
}

#endswitch


class Collection<T> extends _Collection
{
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Collection<T> Instance()
	{
		return new Collection();
	}
	
	
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Collection<T> create(var arr)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return this.from(arr);
		#case ifcode PHP then
		return static::from($arr);
		#endswitch
	}
	
	
	
	/**
	 * Returns copy of Collectiom
	 * @param int pos - position
	 */
	Collection<T> cp()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = Array.prototype.slice.call(this);
		Object.setPrototypeOf(arr, this.constructor.prototype);
		return arr;
		#case ifcode PHP then
		$class_name = static::class;
		$arr2 = new $class_name();
		if ($this->_arr == null) $arr2->_arr = [];
		else $arr2->_arr = array_slice($this->_arr, 0);
		return $arr2;
		#endswitch
	}
	
	
	
	/**
	 * Convert to collection
	 */
	Collection<T> toCollection()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var obj = Array.prototype.slice.call(this);
		Object.setPrototypeOf(obj, Runtime.Collection.prototype);
		return obj;
		#case ifcode PHP then
		return \Runtime\Collection::from($this);
		#endswitch
	}
	
	
	
	/**
	 * Convert to vector
	 */
	Vector<T> toVector()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var obj = Array.prototype.slice.call(this);
		Object.setPrototypeOf(obj, use("Runtime.Vector").prototype);
		return obj;
		#case ifcode PHP then
		return \Runtime\Vector::from($this);
		#endswitch
	}
	
	
	
	/**
	 * Returns value from position
	 * @param int pos - position
	 */
	T get(int pos, T default_value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (pos < 0 || pos >= this.length) return default_value;
		var val = this[pos];
		return val;
		#case ifcode PHP then
		$val = isset($this->_arr[$pos]) ? $this->_arr[$pos] : $default_value;
		return $val;
		#endswitch
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param int pos - position
	 */
	T item(int pos)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (pos < 0 || pos >= this.length)
		{
			var _IndexOutOfRange = use("Runtime.Exceptions.IndexOutOfRange");
			throw new _IndexOutOfRange(ctx, pos);
		}
		return this[pos];
		#case ifcode PHP then
		if (!array_key_exists($pos, $this->_arr))
		{
			throw new \Runtime\Exceptions\IndexOutOfRange($ctx, $pos);
		}
		return $this->_arr[$pos];
		#endswitch
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	int count()
	{
		#switch
		#case ifcode JAVASCRIPT then
		return this.length;
		#case ifcode PHP then
		return count($this->_arr);
		#endswitch
	}
	
	
	
	/**
	 * Find value in array. Returns -1 if value not found.
	 * @param T value
	 * @return  int
	 */
	int indexOf(T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var i=0; i<this.count(ctx); i++)
		{
			if (this[i] == value)
				return i;
		}
		return -1;
		#case ifcode PHP then
		$pos = array_search($value, $this->_arr, true);
		if ($pos === false) return -1;
		return $pos;
		#endswitch
	}
	
	
	
	/**
	 * Find value in array, and returns position. Returns -1 if value not found.
	 * @param T value
	 * @param int pos_begin - begin position
	 * @param int pos_end - end position
	 * @return  int
	 */
	int indexOfRange(T value, int pos_begin, int pos_end)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var pos = Array.prototype.indexOf.call(this, value, pos_begin);
		if (pos == -1 || pos > pos_end)
			return -1;
		return pos;
		#case ifcode PHP then
		$pos = $this->indexOf($ctx, $value);
		if ($pos == -1 or $pos > $pos_end or $pos < $pos_begin)
			return -1;
		return $pos;
		#endswitch
	}
	
	
	
	/**
	 * Get first item
	 */
	T first(T default_value = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (this.length == 0) return default_value;
		return this[0];
		#case ifcode PHP then
		$c = count($this->_arr);
		if ($c == 0) return $default_value;	
		return $this->_arr[0];
		#endswitch
	}
	
	
	
	/**
	 * Get last item
	 */
	T last(T default_value = null, int pos = -1)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (pos == undefined) pos = -1;
		if (this.length == 0) return default_value;
		if (this.length + pos + 1 == 0) return default_value;
		return this[this.length + pos];
		#case ifcode PHP then
		$c = count($this->_arr);
		if ($c == 0) return $default_value;
		if ($c + $pos + 1 == 0) return $default_value;
		return isset( $this->_arr[$c+$pos] ) ? $this->_arr[$c+$pos] : $default_value;
		#endswitch
	}
	
	
	
	/**
	 * Get last item
	 */
	T getLastItem(T default_value = null, int pos = -1)
	{
		return this.last(default_value, pos);
	}
	
	
	
	/**
	 * Append value to the end of the Collection and return new Collection
	 * @param T value
	 */
	Collection<T> pushIm(T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp();
		Array.prototype.push.call(arr, value);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		$res->_arr[] = $value;
		return $res;
		#endswitch
	}
	Collection<T> push(T value)
	{
		throw new RuntimeException("Deprecated Collection push");
	}
	Collection<T> push1(T value) => this.pushIm(value);
	Collection<T> append1( T value) => this.push(value);
	Collection<T> appendIm(T value) => this.pushIm(value);
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	Collection<T> unshiftIm(T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp();
		Array.prototype.unshift.call(arr, value);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		array_unshift($res->_arr, $value);
		return $res;
		#endswitch
	}
	Collection<T> unshift(T value)
	{
		throw new RuntimeException("Deprecated Collection unshift");
	}
	Collection<T> unshift1(T value) => this.unshiftIm(value);
	Collection<T> prepend1(T value) => this.unshift(value);
	Collection<T> prependIm(T value) => this.unshiftIm(value);
	Collection<T> prepend(T value) => this.unshiftIm(value);
	
	
	
	/**
	 * Extract last value from array
	 * @return T value
	 */
	Collection<T> removeLastIm()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = Array.prototype.slice.call(this, 0, -1);
		Object.setPrototypeOf(arr, this.constructor.prototype);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		array_pop($res->_arr);
		return $res;
		#endswitch
	}
	Collection<T> removeLast(T value) => this.removeLastIm(value);
	
	
	
	/**
	 * Extract first value from array
	 * @return T value
	 */
	Collection<T> removeFirstIm()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = Array.prototype.slice.call(this, 1);
		Object.setPrototypeOf(arr, this.constructor.prototype);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		array_shift($res->_arr);
		return $res;
		#endswitch
	}
	Collection<T> removeFirst(T value) => this.removeFirstIm(value);
	
	
	
	/**
	 * Insert value to position
	 * @param T value
	 * @param int pos - position
	 */
	Collection<T> insertIm(int pos, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp(ctx);
		arr.splice(pos, 0, value);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		array_splice($res->_arr, $pos, 0, [$value]);
		return $res;
		#endswitch
	}
	Collection<T> insert(T value) => this.insertIm(value);
	
	
	
	/**
	 * Remove value from position
	 * @param int pos - position
	 * @param int count - count remove items
	 */
	Collection<T> removeIm(int pos, int count = 1)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (count == undefined) count = 1;
		var arr = this.cp(ctx);
		arr.splice(pos, count);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		array_splice($res->_arr, $pos, $count);
		return $res;
		#endswitch
	}
	Collection<T> remove1(T value) => this.removeIm(value);
	
	
	
	/**
	 * Remove range
	 * @param int pos_begin - start position
	 * @param int pos_end - end position
	 */
	Collection<T> removeRangeIm(int pos_begin, int pos_end)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp(ctx);
		arr.splice(pos_begin, pos_end - pos_begin + 1);
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		$res->removeIm($pos_begin, $pos_end - $pos_begin + 1);
		return $res;
		#endswitch
	}
	Collection<T> removeRange(T value) => this.removeRangeIm(value);
	
	
	
	/**
	 * Set value size_to position
	 * @param int pos - position
	 * @param T value 
	 */
	Collection<T> setIm(int pos, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (pos < 0 || pos >= this.length)
		{
			var _IndexOutOfRange = use("Runtime.Exceptions.IndexOutOfRange");
			throw new _IndexOutOfRange(ctx, pos);
		}
		var arr = this.cp(ctx);
		arr[pos] = value;
		return arr;
		#case ifcode PHP then
		if (!array_key_exists($pos, $this->_arr))
			throw new \Runtime\Exceptions\IndexOutOfRange($ctx, $pos);
		$res = $this->cp($ctx);
		$res->_arr[$pos] = $value;
		return $res;
		#endswitch
	}
	Collection<T> set(T value)
	{
		throw new RuntimeException("Deprecated Collection set");
	}
	Collection<T> set1(T value) => this.setIm(value);
	
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Collection<T> arr
	 */
	Collection<T> concatIm(Collection<T> arr)
	{
		if (arr == null) return this;
		if (not (rtl::isArray(arr))) arr = [ arr ];
		#switch
		#case ifcode JAVASCRIPT then
		if (arr.length == 0) return this;
		var res = this.cp(ctx);
		for (var i=0; i<arr.length; i++)
		{
			Array.prototype.push.call(res, arr[i]);
		}
		return res;
		#case ifcode PHP then
		if (!$arr) return $this;
		if (count($arr->_arr) == 0) return $this;
		$res = $this->cp($ctx);
		foreach ($arr->_arr as $item)
		{
			$res->_arr[] = $item;
		}
		return $res;
		#endswitch
	}
	Collection<T> appendCollection1(Collection<T> arr) => this.concatIm(arr);
	Collection<T> concat(Collection<T> arr) => this.concatIm(arr);
	
	
	
	/**
	 * Prepend vector to the begin of the vector
	 * @param Collection<T> arr
	 */
	Collection<T> prependCollectionIm(Collection<T> arr)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (arr == null) return this;
		if (arr.length == 0) return this;
		var res = this.cp(ctx);
		for (var i=arr.length-1; i>=0; i--)
		{
			Array.prototype.unshift.call(res, arr[i]);
		}
		return res;
		#case ifcode PHP then
		if (!$arr) return $this;
		$res = $this->cp($ctx);
		$sz = count($arr->_arr);
		for ($i=$sz-1; $i>=0; $i--)
		{
			array_unshift($res->_arr, $arr->_arr[$i]);
		}
		return $res;
		#endswitch
	}
	Collection<T> prependCollection1(Collection<T> arr) =>
		this.prependCollectionIm(arr)
	;
	
	
	
	/**
	 * Remove value
	 */
	Collection<T> removeItemIm(T value)
	{
		var index = this.indexOf(value);
		if (index != -1) return this.remove(index);
		return this;
	}
	Collection<T> removeItem(T value) => this.removeItemIm(value);
	
	
	
	/**
	 * Remove value
	 */
	Collection<T> removeItemsIm(Collection<T> values)
	{
		var res = this;
		for (var i=0; i<values.count(); i++)
		{
			res = res.removeItem( values.item(i) );
		}
		return res;
	}
	Collection<T> removeItems(Collection<T> values) => this.removeItemsIm(values);
	
	
	
	/**
	 * Map
	 * @param fn f
	 * @return Collection
	 */
	Collection<T> map(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp(ctx);
		for (var i=0; i<arr.length; i++)
		{
			arr[i] = f(ctx, arr[i], i);
		}
		return arr;
		#case ifcode PHP then
		$arr2 = $this->cp($ctx);
		foreach ($this->_arr as $key => $value)
		{
			$arr2->_arr[$key] = $f($ctx, $value, $key);
		}
		return $arr2;
		#endswitch
	}
	
	
	
	/**
	 * Filter items
	 * @param fn f
	 * @return Collection
	 */
	Collection<T> filter(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var res = this.constructor.Instance(ctx);
		for (var i=0; i<this.length; i++)
		{
			var item = this[i];
			var flag = f(ctx, item, i);
			if (flag)
			{
				Array.prototype.push.call(res, item);
			}
		}
		return res;
		#case ifcode PHP then
		$arr2 = static::Instance($ctx);
		foreach ($this->_arr as $key => $value)
		{
			if ( $f($ctx, $value, $key) )
			{
				$arr2->_arr[] = $value;
			}
		}
		return $arr2;
		#endswitch
	}
	
	
	
	/**
	 * Transition Collection to Dict
	 * @param fn f
	 * @return Dict
	 */
	Collection<T> transition(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var Dict = use("Runtime.Dict");
		var d = new Dict(ctx);
		for (var i=0; i<this.length; i++)
		{
			var value = this[i];
			var p = f(ctx, value, i);
			d[p[1]] = p[0];
		}
		return d;
		#case ifcode PHP then
		$d = new \Runtime\Dict($ctx);
		foreach ($this->_arr as $key => $value)
		{
			$p = $f($ctx, $value, $key);
			$d->_map[$p[1]] = $p[0];
		}
		return $d;
		#endswitch
	}
	
	
	
	/**
	 * Reduce
	 * @param fn f
	 * @param var init_value
	 * @return init_value
	 */
	var reduce(fn f, var init_value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var i=0; i<this.length; i++)
		{
			var item = this[i];
			init_value = f(ctx, init_value, item, i);
		}
		return init_value;
		#case ifcode PHP then
		foreach ($this->_arr as $key => $value)
		{
			$init_value = $f($ctx, $init_value, $value, $key);
		}
		return $init_value;
		#endswitch
	}
	
	
	
	/**
	 * Call function for each item
	 * @param fn f
	 */
	Collection<T> each(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var i=0; i<this.length; i++)
		{
			var item = this[i];
			f(ctx, item, i);
		}
		#case ifcode PHP then
		foreach ($this->_arr as $key => $value)
		{
			$f($ctx, $value, $key);
		}
		#endswitch
	}
	
	
	
	/**
	 * Returns Collection
	 * @param Collection<T> arr
	 * @return Collection<T>
	 */
	Collection<T> intersect(Collection<T> arr)
	{
		return this.filter( bool (var item) use (arr) => arr.indexOf(item) >= 0 );
	}
	
	
	
	/**
	 * Returns new Collection
	 * @param int offset
	 * @param int lenght
	 * @return Collection<T>
	 */
	Collection<T> slice(int offset, int length = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (offset == undefined) offset = 0;
		if (length == undefined)
		{
			if (offset == 0) return this;
			var arr = Array.prototype.slice.call(this, offset);
			Object.setPrototypeOf(arr, this.constructor.prototype);
			return arr;
		}
		if (offset == 0 && length == this.length) return this;
		if (length >= 0)
		{
			length = offset + length;
		}
		var arr = Array.prototype.slice.call(this, offset, length);
		Object.setPrototypeOf(arr, this.constructor.prototype);
		return arr;
		#case ifcode PHP then
		$arr2 = static::Instance($ctx);
		$arr2->_arr = array_slice($this->_arr, $offset, $length);
		return $arr2;
		#endswitch
	}
	
	
	
	/**
	 * Reverse array
	 */
	Collection<T> reverseIm()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp(ctx);
		Array.prototype.reverse.call(arr);
		return arr;
		#case ifcode PHP then
		$arr2 = $this->cp($ctx);
		$arr2->_arr = array_reverse($arr2->_arr);
		return $arr2;
		#endswitch
	}
	Collection<T> reverse() => this.reverseIm();
	
	
	
	/**
	 * Sort vector
	 * @param fn f - Sort user function
	 */
	Collection<T> sortIm(fn f = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		var arr = this.cp(ctx);
		if (f == undefined) Array.prototype.sort.call(arr);
		else
		{
			var f1 = (a, b) => { return f(ctx, a, b); };
			Array.prototype.sort.call(arr, f1);
		}
		return arr;
		#case ifcode PHP then
		$res = $this->cp($ctx);
		if ($f == null)
		{
			asort($res->_arr);
		}
		else
		{
			$f1 = function($a, $b) use ($ctx, $f){ return $f($ctx, $a, $b); };
			usort($res->_arr, $f1);
		}
		return $res;
		#endswitch
	}
	Collection<T> sort(fn f = null) => this.sortIm(f);
	
	
	
	/**
	 * Remove dublicate values
	 */
	Collection<T> removeDuplicatesIm()
	{
		#switch
		#case ifcode JAVASCRIPT then
		var res = this.constructor.Instance(ctx);
		for (var i=0; i<this.length; i++)
		{
			var p = res.indexOf(ctx, this[i]);
			if (p == -1)
			{
				Array.prototype.push.call(res, this[i]);
			}
		}
		return res;
		#case ifcode PHP then
		$arr = []; $sz = count($this->_arr);
		for ($i=0; $i<$sz; $i++)
		{			
			$value = $this->_arr[$i];
			$pos = array_search($value, $arr, true);
			if ($pos === false)
			{
				$arr[] = $value;
			}
		}
		$res = static::Instance($ctx);
		$res->_arr = $arr;
		return $res;
		#endswitch
	}
	Collection<T> removeDuplicates() => this.removeDuplicatesIm();
	
	
	
	/**
	 * Find item pos
	 * @param fn f - Find function
	 * @return int - position
	 */
	int find(fn f)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var i=0; i<this.length; i++)
		{
			var flag = f(ctx, this[i]);
			if (flag) return i;
		}
		return -1;
		#case ifcode PHP then
		$sz = count($this->_arr);
		for ($i=0; $i<$sz; $i++)
		{
			$elem = $this->_arr[$i];
			if ( $f($ctx, $elem) )
			{
				return $i;
			}
		}
		return -1;
		#endswitch
	}
	
	
	
	/**
	 * Find item
	 * @param var item - Find function
	 * @param fn f - Find function
	 * @param T def_value - Find function
	 * @return item
	 */
	T findItem(fn f, T def_value = null)
	{
		int pos = this.find(f);
		return this.get(pos, def_value);
	}
	
	
	
	/**
	 * Join collection to string
	 */
	string join(string ch)
	{
		return rs::join(ch, this);
	}
}
