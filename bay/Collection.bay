/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Exceptions.IndexOutOfRange;
use Runtime.Exceptions.RuntimeException;


interface Collection<T>
{
	/**
	 * Returns value from position
	 * @param int pos - position
	 */
	T get(int pos, T default_value = null);
	
	
	/**
	 * Set value to position
	 * @param int pos - position
	 * @param T value
	 */
	public T set(int pos, T value);
	
	
	/**
	 * Insert first value to array
	 * @return T value
	 */
	public Vector<T> insert(int pos, T value);
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	public Vector<T> push(T value);
	
	
	/**
	 * Flatten Collection
	 */
	Collection flatten();
	
	
	/**
	 * Find value in array. Returns -1 if value not found.
	 * @param T value
	 * @return  int
	 */
	int indexOf(T value);
	
	
	/**
	 * Find item
	 * @param fn f - Find function
	 * @return int - position
	 */
	int find(fn f);
	
	
	/**
	 * Find item pos
	 * @param fn f - Find function
	 * @return int - position
	 */
	int findIndex(fn f);
	
	
	/**
	 * Get first item
	 */
	T first(T default_value = null);
	
	
	/**
	 * Get last item
	 */
	T last(T default_value = null, int pos = -1);
	
	
	/**
	 * Map
	 * @param fn f
	 * @return Collection
	 */
	Collection<T> map(fn f);
	
	
	/**
	 * Reduce
	 * @param fn f
	 * @param var init_value
	 * @return init_value
	 */
	var reduce(fn f, var init_value);
	
	
	/**
	 * Filter items
	 * @param fn f
	 * @return Collection
	 */
	Collection<T> filter(fn f);
	
	
	/**
	 * Call function for each item
	 * @param fn f
	 */
	Collection<T> each(fn f);
	
	
	/**
	 * Transition Collection to Dict
	 * @param fn f
	 * @return Dict
	 */
	Collection<T> transition(fn f);
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Collection<T> arr
	 */
	Collection<T> concat(Collection<T> arr);
	
	
	/**
	 * Returns count items in vector
	 */
	int count();
	
	
	/**
	 * Returns new Collection
	 * @param int offset
	 * @param int lenght
	 * @return Collection<T>
	 */
	Collection<T> slice(int offset = 0, int length = null);
	
	
	/**
	 * Sort Collection
	 * @param fn f - Sort user function
	 */
	var sort(fn f = null);
	
	
	/**
	 * Reverse Collection
	 */
	var reverse();
}
