/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.Map;
use Runtime.Vector;


class BaseObject
{
	
	/** 
	 * Constructor
	 */
	public void constructor()
	{		
		/* Init object */
		this._init();
	}
	
	
	/**
	 * Init function
	 */
	protected void _init()
	{
	}
	
	
	
	/**
	 * Returns new instance
	 */
	pure BaseObject newInstance(Dict items) => null;
	
	
	
	/**
	 * Init struct data
	 */
	static protected Dict _init_data(BaseObject old_item, BaseObject new_item) => null;
	
	
	
	/**
	 * Assign new values
	 */
	static protected void _assign_values(BaseObject old_item, BaseObject new_item, Dict obj = null)
	{
		/* Assign values */
		obj = rtl::convert(obj, classof Dict);
		static::_assign_dict(new_item, obj);
		
		/* Assign new values */
		obj = new_item::_init_data(old_item, new_item);
		static::_assign_dict(new_item, obj);
	}
	
	
	/**
	 * Assign dict
	 */
	static protected void _assign_dict(BaseObject item, Dict obj = null)
	{
		if (obj == null) return;
		if (obj.keys().count() == 0) return;
		
		bool check_types = false;
		string class_name = item::getClassName();
		
		
		#ifdef ENABLE_CHECK_TYPES then
		
		/* Enable check types */
		check_types = true;
		if (class_name == "Runtime.IntrospectionClass") check_types = false;
		if (class_name == "Runtime.IntrospectionInfo") check_types = false;
		
		#endif
		
		
		#switch
		#case ifcode PHP then
		
		if ($obj instanceof \Runtime\Dict) $obj = $obj->_map;
		if (gettype($obj) == "array")
		{
			foreach ($obj as $key => $value)
			{
				$k = $item->__getKey($key);
				if (property_exists($item, $k))
				{
					if ($check_types)
					{
						$info = \Runtime\rtl::getFieldInfoWithParents($ctx, $class_name, $key);
						if ($info)
						{
							$value = \Runtime\rtl::convert($ctx, $value, $info->t, null);
						}
					}
					$item->$k = $value;
				}
			}
		}
		
		#case ifcode JAVASCRIPT then
		
		var _Dict = use("Runtime.Dict");
		var rtl = use("Runtime.rtl");
		if (obj instanceof _Dict)
		{
			for (var key in obj._map)
			{
				var real_key = key.substring(1);
				var value = obj._map[key];
				if (check_types)
				{
					info = rtl.getFieldInfoWithParents(ctx, class_name, real_key);
					if (info)
					{
						value = rtl.convert(ctx, value, info.get(ctx, "t"), null);
					}
				}
				item[real_key] = value;
			}
		}
		else
		{
			for (var key in obj)
			{
				var value = obj[key];
				if (check_types)
				{
					info = rtl.getFieldInfoWithParents(ctx, item.getClassName(), key);
					if (info)
					{
						value = rtl.convert(ctx, value, info.get(ctx, "t"), null);
					}
				}
				item[key] = value;
			}
		}
		
		#endswitch
	}
	
	
	#switch
	#case ifcode PHP then
	function __getKey($k){return $k;}
	#endswitch
}