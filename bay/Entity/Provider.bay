/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Entity;

use Runtime.BaseObject;
use Runtime.BaseProvider;
use Runtime.Entity.Entity;


struct Provider extends Entity
{
	/* Provider class name */
	string value = null;
	
	/* Factory params */
	Dict params = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(string name, string value = null, Dict params = null)
	{
		if (value instanceof Dict)
		{
			params = value;
			value = null;
		}
		if (value == null) value = name;
		parent({
			"name": name,
			"value": value,
			"params": params,
		});
	}
	
	
	/**
	 * Create provider
	 */
	BaseProvider createProvider()
	{
		BaseProvider provider = null;
		var class_name = this.value;
		
		if (class_name == null) class_name = this.name;
		if (class_name instanceof BaseProvider)
		{
			provider = class_name;
		}
		else if (rtl::isString(class_name))
		{
			provider = rtl::newInstance(class_name, [this.params]);
		}
		
		return provider;
	}
}