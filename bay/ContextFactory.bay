/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;


use BayrellRtl.Context;
use BayrellRtl.CoreObject;
use BayrellRtl.Types.Vector;
use BayrellRtl.Interfaces.ContextInterface;
use BayrellRtl.Interfaces.FactoryInterface;


class ContextFactory extends CoreObject implements FactoryInterface{
	
	
	protected Vector<string> _modules = null;
	
	
	/**
	 * Assign all data from other object
	 * @param CoreObject obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof ContextFactory){
			delete this._modules;			
			this._modules = clone obj._modules;
		}
		
		parent::assign(obj);
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor(){
		parent();
		this._modules = new Vector<string>();
	}
	
	
	
	/**
	 * Destructor
	 */
	public void destructor(){
		delete this._modules;
		parent();
	}
	
	
	
	/**
	 * Returns new Instance
	 */
	public ContextInterface newInstance(){
		ContextInterface context = new Context();
		
		/* Register modules */
		for (int i=0; i<this._modules.count(); i++){
			context.registerModule( this._modules.item(i) );
		}
		
		/* Init context */
		context.init();
		
		return context;
	}
	
	
	
	/**
	 * Register module
	 */
	void registerModule(string module_name){
		this._modules.push(module_name);
	}

}
