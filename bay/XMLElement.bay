/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;


class XMLElement
{
	var xml = null;
	Collection errors = null;
	
	
	/**
	 * Load xml
	 */
	static XMLElement loadXml(string xml_str)
	{
		XMLElement res = static::newInstance();
		
		#ifcode PHP then
		
		$old_value = libxml_use_internal_errors(true);
		libxml_clear_errors();
		$xml = simplexml_load_string(
			$xml_str, \SimpleXMLElement::class, LIBXML_NOCDATA | LIBXML_NONET
		);
		$errors = new \Runtime\Vector();
		foreach (libxml_get_errors() as $error)
		{
			$errors->pushValue( trim($error->message) );
		}
		libxml_use_internal_errors($old_value);
		
		$res->xml = $xml;
		$res->errors = $errors->toCollection();
		
		#endif
		
		return res;
	}
	
	
	/**
	 * Returns new instance
	 */
	static XMLElement newInstance() => rtl::newInstance(static::getClassName());
	
	
	/**
	 * Returns true if XML is exists
	 */
	bool exists()
	{
		if (this.xml == null) return false;
		if (this.errors == null) return true;
		if (this.errors.count() == 0) return true;
		return false;
	}
	
	
	/**
	 * Return current name
	 */
	XMLElement getName()
	{
		string res = "";
		
		#ifcode PHP then
		if ($this->xml)
		{
			$res = $this->xml->getName();
		}
		#endif
		
		return res;
	}
	
	
	/**
	 * Return items by name
	 */
	Collection<XMLElement> get(string name)
	{
		#ifcode PHP then
		$res = [];
		
		if ($this->xml)
		{
			$xml = $this->xml->$name;
			for ($i=0; $i<$xml->count(); $i++)
			{
				$item = static::newInstance();
				$item->xml = $xml[$i];
				$res[] = $item;
			}
		}
		
		return \Runtime\Collection::from($res);
		#endif
		
		return new Collection();
	}
	
	
	/**
	 * Get value
	 */
	string value()
	{
		string res = "";
		
		#ifcode PHP then
		if ($this->xml)
			$res = (string)$this->xml;
		#endif
		
		return res;
	}
	
	
	/**
	 * Returns childs count
	 */
	int count()
	{
		#ifcode PHP then
		if ($this->xml)
			return $this->xml->children()->count();
		#endif
		
		return 0;
	}
	
	
	/**
	 * Return items
	 */
	Collection<XMLElement> childs()
	{
		#ifcode PHP then
		$arr = [];
		$pos = 0;
		
		foreach ($this->xml as $child)
		{
			$item = static::newInstance();
			$item->xml = $child;
			$arr[] = $item;
			$pos++;
		}
		
		return \Runtime\Collection::from($arr);
		#endif
		
		return new Collection();
	}
	
	
	/**
	 * Get attribute
	 */
	string getAttribute(string name)
	{
		#ifcode PHP then
		$attrs = $this->attributes();
		if (isset($attrs[$name]))
		{
			return $attrs[$name];
		}
		#endif
		
		return null;
	}
	
	
	/**
	 * Get attribute
	 */
	Dict getAttributes()
	{
		Map items = new Map();
		
		#ifcode PHP then
		$attrs = $this->attributes();
		foreach ($attrs as $key => $value)
		{
			$items->setValue($key, $value);
		}
		#endif
		
		return items.toDict();
	}
	
	
	/**
	 * Remove Attribute
	 */
	void removeAttribute(string name)
	{
		#ifcode PHP then
		$dom = dom_import_simplexml($this->xml);
		$dom->removeAttribute($name);
		#endif
	}
	
	
	/**
	 * Remove current element
	 */
	void remove()
	{
		#ifcode PHP then
		$item = dom_import_simplexml($this->xml);
		$item->xml->parentNode->removeChild($item);
		#endif
	}
	
	
	/**
	 * Append XML
	 */
	XMLElement append(XMLElement append)
	{
		string name = append.getName();
		string content = append.value();
		XMLElement child = static::newInstance();
		
		#ifcode PHP then
		$item = $this->xml->addChild($name, $content);
		$child->xml = $item;
		#endif
		
		/* Append childs */
		child.appendItems(append.childs());
		
		return child;
	}
	
	
	/**
	 * Append childs from XML
	 */
	void appendItems(Collection<XMLElement> items)
	{
		for (int i=0; i<items.count(); i++)
		{
			XMLElement item = items.get(i);
			this.append(item);
		}
	}
	
	
	/**
	 * To string
	 */
	string toString(Dict params = null)
	{
		bool indent = params['indent'] |> default bool true;
		bool wrap = params['wrap'] |> default bool false;
		string xml_str = '';
		
		#ifcode PHP then
		if ($params != null) $params = $params->_map;
		if ($params == null) $params = [];
		if (!isset($params['indent'])) $params['indent'] = true;
		if (!isset($params['wrap'])) $params['wrap'] = false;
		if (!isset($params['input-xml'])) $params['input-xml'] = true;
		$xml_str = $this->xml->asXml();
		$xml_str = tidy_repair_string($xml_str, $params);
		#endif
		
		return xml_str;
	}
	
}
