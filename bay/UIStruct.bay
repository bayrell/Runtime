/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.CoreStruct;
use Runtime.Dict;
use Runtime.Map;
use Runtime.rs;
use Runtime.rtl;
use Runtime.Collection;
use Runtime.Vector;


struct UIStruct extends CoreStruct
{
	const string TYPE_ELEMENT = "element";
	const string TYPE_COMPONENT = "component";
	const string TYPE_STRING = "string";
	const string TYPE_RAW = "raw";
	
	
	public string class_name = "";
	public string key = "";
	public string name = "";
	public string space = "";
	public string bind = "";
	public string kind = "element";
	public string content = "";
	public string controller = "";
	public string reference = "";
	public CoreStruct model = null;
	public Dict<primitive> props = null;
	public Collection<CoreStruct> annotations = null;
	public Collection<UIStruct> children = null;
	
	
	
	/**
	 * Returns true if component
	 * @return bool
	 */
	primitive getTag()
	{
		if (this.props == null) return null;
		return this.props.get("@tag", null);
	}
	
	

	/**
	 * Returns true if component
	 * @return bool
	 */
	bool isComponent()
	{
		return this.kind == self::TYPE_COMPONENT;
	}
	
	
	
	/**
	 * Returns true if element
	 * @return bool
	 */
	bool isElement()
	{
		return this.kind == self::TYPE_ELEMENT;
	}
	
	
	
	/**
	 * Returns true if string
	 * @return bool
	 */
	bool isString()
	{
		return this.kind == self::TYPE_STRING or this.kind == self::TYPE_RAW;
	}
	
	
	
	/**
	 * Returns model
	 * @return CoreStruct
	 */
	CoreStruct getModel()
	{
		return this.model;
		
		if (ui.model != null) 
			return ui.model;
			
		if (ui.kind == self::TYPE_COMPONENT)
		{
			string model_name = (method (ui.name, "modelName"))();
			if (model_name == "") return null;
			CoreStruct model = rtl::newInstance(model_name, [ui.props]);
			return model;
		}
		
		return null;
	}
	
	
	
	/**
	 * Returns key path
	 * @return string
	 */
	string getKey(string index)
	{
		return (this.key !== "") ? this.key : index;
	}
	
	
	
	/**
	 * Returns key path
	 * @return string
	 */
	string getKeyPath(string key_path, string index)
	{
		return (key_path !== "") ? (key_path ~ "." ~ this.getKey(index)) : this.getKey(index);
	}
	
	
	
	/**
	 * Returns attrs
	 */
	Dict<string> getAttrs()
	{
		if (this.props != null)
		{
			return this.props.filter(
				bool (string key, string value)
				{
					return rs::strpos(key, "@") != 0 or key == "@class" or key == "@style";
				}
			);
		}
		return new Dict<string>();
	}
	
	
	
	/**
	 * Returns props
	 */
	Dict<string> getProps()
	{
		if (this.props != null)
		{
			return this.props.filter(
				bool (string key, string value)
				{
					return rs::strpos(key, "@") == 0 and rs::strpos(key, "@on") != 0 and key != "@class";
				}
			);
		}
		return new Dict<string>();
	}
	
	
	
	/**
	 * Returns events
	 */
	Dict<string> getEvents()
	{
		if (this.props != null)
		{
			return this.props.filter(
				bool (string key, string value)
				{
					return rs::strpos(key, "@on") == 0;
				}
			);
		}
		return new Dict<string>();
	}
}
