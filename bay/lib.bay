/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.Collection;
use Runtime.Context;
use Runtime.CoreStruct;
use Runtime.Dict;
use Runtime.Map;
use Runtime.rs;
use Runtime.rtl;
use Runtime.UIStruct;
use Runtime.Vector;


/* Lambda Functions */
class lib
{
	
	/**
	 * Check object is istance
	 */
	lambda fn isInstance(string class_name) =>
		bool (var item) use (class_name) => rtl::is_instanceof(item, class_name)
	;
	
	
	
	/**
	 * Check object is implements interface
	 */	
	lambda fn isImplements(string class_name) =>
		bool (var item) use (class_name) => rtl::is_implements(item, class_name)
	;
	
	
	
	/**
	 * Check class is implements interface
	 */	
	lambda fn classImplements(string class_name) =>
		bool (string item) use (class_name) => rtl::class_implements(item, class_name)
	;
	
	
	
	/**
	 * Create struct
	 */
	lambda fn createStruct(string class_name) =>
		CoreStruct(Dict data) use (class_name) => rtl::newInstance(class_name, [data])
	;
	
	
	
	/**
	 * Equal two struct by key
	 */
	lambda fn equal(var value)
		=> bool (var item) use (value)
			=> item == value
	;
	
	
	
	/**
	 * Equal two struct by key
	 */
	lambda fn equalNot(var value)
		=> bool (var item) use (value)
			=> item != value
	;
	
	
	
	/**
	 * Returns attr of item
	 */
	lambda fn attr(string key, var def_value)
		=> var (CoreStruct item1) use (key, def_value)
			=> (item1 != null) ? item1.takeValue(key, def_value) : def_value
	;
	
	
	
	/**
	 * Equal two struct by key
	 */
	lambda fn equalAttr(string key, var value)
		=> bool (CoreStruct item1) use (key, value)
			=> (item1 != null) ? item1.takeValue(key) == value : false
	;
	
	
	
	/**
	 * Equal two struct by key
	 */
	lambda fn equalNotAttr(string key, var value)
		=> bool (CoreStruct item1) use (key, value)
			=> (item1 != null) ? item1.takeValue(key) != value : false
	;
	
	
	
	/**
	 * Equal two struct by key
	 */
	lambda fn equalMethod(string method_name, var value)
		=> bool (CoreStruct item1) use (method_name, value)
		{
			if (item1 == null) return false;
			fn f = rtl::@method(item1, method_name);
			return f() == value;
		}
	;
	
	
	
	/**
	 * Returns max id from items
	 */
	lambda int getMaxIdFromItems(Collection<CoreStruct> items, int start = 0) =>
		items.reduce
		(
			int (int value, CoreStruct item) => item.id > value ? item.id : value,
			start
		)
	;
	
	
	
	/**
	 * Take dict
	 */
	lambda fn takeDict(Collection<string> fields) =>
		bool (var item) use (fields) => item.takeDict(fields)
	;
	
}