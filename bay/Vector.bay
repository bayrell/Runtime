/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Collection;
use Runtime.Exceptions.IndexOutOfRange;


class Vector<T> extends Collection
{
	
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Collection<T> Instance()
	{
		return new Vector();
	}
	
	
	
	/**
	 * Returns new Vector
	 * @param int offset
	 * @param int lenght
	 * @return Collection<T>
	 */
	Collection<T> vectorSlice(int offset, int length = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (offset == undefined) offset = 0;
		if (length == undefined)
		{
			var arr = Array.prototype.slice.call(_this, offset);
			Object.setPrototypeOf(arr, _this.constructor.prototype);
			return arr;
		}
		if (length >= 0)
		{
			length = offset + length;
		}
		var arr = Array.prototype.slice.call(_this, offset, length);
		Object.setPrototypeOf(arr, _this.constructor.prototype);
		return arr;
		#case ifcode PHP then
		$arr2 = static::Instance($ctx);
		$arr2->_arr = array_slice($_this->_arr, $offset, $length);
		return $arr2;
		#endswitch
	}
	
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	public Vector<T> appendValue(T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.push.call(_this, value);
		return _this;
		#case ifcode PHP then
		$_this->_arr[] = $value;
		return $_this;
		#endswitch
	}
	public Collection<T> pushValue(T value) => this.appendValue(value);
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	public Vector<T> prependValue(T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.unshift.call(_this, value);
		return _this;
		#case ifcode PHP then
		array_unshift($_this->_arr, $value);
		return $_this;
		#endswitch
	}
	public Collection<T> unshiftValue(T value) => this.prependValue(value);
	
	
	
	/**
	 * Extract last value from array
	 * @return T value
	 */
	public T popValue()
	{
		#switch
		#case ifcode JAVASCRIPT then
		return Array.prototype.pop.call(_this);
		#case ifcode PHP then
		return array_pop($_this->_arr);
		#endswitch
	}
	
	
	
	/**
	 * Extract first value from array
	 * @return T value
	 */
	public T shiftValue()
	{
		#switch
		#case ifcode JAVASCRIPT then
		return Array.prototype.shift.call(_this);
		#case ifcode PHP then
		array_shift($_this->_arr);
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Insert value to position
	 * @param T value
	 * @param int pos - position
	 */
	public Vector<T> insertValue(int pos, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.splice.call(_this, pos, 0, value);
		return _this;
		#case ifcode PHP then
		array_splice($_this->_arr, $pos, 0, [$value]);
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Remove value from position
	 * @param int pos - position
	 * @param int count - count remove items
	 */
	public Vector<T> removePosition(int pos, int count = 1)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.splice.call(_this, pos, count);
		return _this;
		#case ifcode PHP then
		array_splice($_this->_arr, $pos, $count);
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Remove value
	 */
	public Vector<T> removeValue(T value)
	{
		var index = this.indexOf(value);
		if (index != -1) this.removePosition(index, 1);
		return this;
	}
	
	
	
	/**
	 * Remove value
	 */
	public Vector<T> removeValues(Vector<T> values)
	{
		for (var i=0; i<values.count(); i++)
		{
			this.removeValue( values.item(i) );
		}
		return this;
	}
	
	
	
	/**
	 * Remove range
	 * @param int pos_begin - start position
	 * @param int pos_end - end position
	 */
	public Vector<T> removeRangeValues(int pos_begin, int pos_end)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.splice.call(_this, pos_begin, pos_end - pos_begin + 1);
		return _this;
		#case ifcode PHP then
		$_this->remove($pos_begin, $pos_end - $pos_begin + 1);
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param int pos - position
	 * @param T value 
	 */
	public T setValue(int pos, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (pos < 0 || pos >= _this.length)
		{
			var IndexOutOfRange = use ("Runtime.Exceptions.IndexOutOfRange");
			throw new IndexOutOfRange();
		}
		_this[pos] = value;
		return _this;
		#case ifcode PHP then
		if (!array_key_exists($pos, $_this->_arr))
		{
			throw new IndexOutOfRange();
		}
		$_this->_arr[$pos] = $value;
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Clear all values from vector
	 */
	public Vector<T> clear()
	{
		#switch
		#case ifcode JAVASCRIPT then
		Array.prototype.splice.call(_this, 0, _this.length);
		return _this;
		#case ifcode PHP then
		$_this->_arr = [];
		return $_this;
		#endswitch
	}
	
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Vector<T> arr
	 */
	public Vector<T> appendVector(Vector<T> arr)
	{
		#switch
		#case ifcode JAVASCRIPT then
		if (!arr) return this;
		for (var i=0; i<arr.length; i++) Array.prototype.push.call(this, arr[i]);
		return this;
		#case ifcode PHP then
		if (!$arr) return $this;
		foreach ($arr->_arr as $key => $value)
		{
			$this->_arr[] = $value;
		}
		return $this;
		#endswitch
	}
	
	
	
	/**
	 * Prepend vector to the begin of the vector
	 * @param Vector<T> arr
	 */
	public Vector<T> prependVector(Vector<T> arr)
	{
		#switch
		#case ifcode JAVASCRIPT then
		for (var i=0; i<arr.length; i++) Array.prototype.unshift.call(this, arr[i]);
		return this;
		#case ifcode PHP then
		if (!$arr) return $this;
		foreach ($arr->_arr as $key => $value)
		{
			array_unshift($this->_arr, $value);
		}
		return $this;
		#endswitch
	}
}