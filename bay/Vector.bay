/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Exceptions.IndexOutOfRange;


#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


declare class Vector<T>{
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	declare public Vector<T> push(T value);
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	declare public Vector<T> unshift(T value);
	
	
	
	/**
	 * Extract last value from array
	 * @return T value
	 */
	declare public T pop();
	
	
	
	/**
	 * Extract first value from array
	 * @return T value
	 */
	declare public T shift();
	
	
	
	/**
	 * Find value in array. Returns -1 if value not found.
	 * @param T value
	 * @return  int
	 */
	declare public int indexOf(T value);
	
	
	
	/**
	 * Find value in array, and returns position. Returns -1 if value not found.
	 * @param T value
	 * @param int pos_begin - begin position
	 * @param int pos_end - end position
	 * @return  int
	 */
	declare public int indexOfRange(T value, int pos_begin, int pos_end);
	
	
	
	/**
	 * Insert value to position
	 * @param T value
	 * @param int pos - position
	 */
	declare public Vector<T> insert(int pos, T value);
	
	
	
	/**
	 * Remove value from position
	 * @param int pos - position
	 * @param int count - count remove items
	 */
	declare public Vector<T> remove(int pos, int count = 1);
	
	
	
	/**
	 * Remove range
	 * @param int pos_begin - start position
	 * @param int pos_end - end position
	 */
	declare public Vector<T> removeRange(int pos_begin, int pos_end);
	
	
	
	/**
	 * Returns value from position
	 * @param int pos - position
	 */
	declare public T get(int pos, T default_value);
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param int pos - position
	 */
	declare public T item(int pos);
	
	
	
	/**
	 * Set value size_to position
	 * @param int pos - position
	 * @param T value 
	 */
	declare public T set(int pos, T value);
	
	
	
	/**
	 * Clear all values from vector
	 */
	declare public Vector<T> clear();
	
	
	
	/**
	 * Returns count items in vector
	 */
	declare public int count();
	
	
	
	/**
	 * Append value to the end of the vector
	 * @param T value
	 */
	declare public Vector<T> append(T value);
	
	
	
	/**
	 * Insert first value to begin of the vector
	 * @return T value
	 */
	declare public Vector<T> prepend(T value);
	
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Vector<T> arr
	 */
	declare public Vector<T> appendVector(Vector<T> arr);
	
	
	
	/**
	 * Prepend vector to the begin of the vector
	 * @param Vector<T> arr
	 */
	declare public Vector<T> prependVector(Vector<T> arr);
	
	
	
	/**
	 * Returns count items in vector
	 */
	declare public void length();
	
	
	
	/**
	 * Get last item
	 */
	declare public T getLastItem(T default_value);
	declare public T last(T default_value);
	
	
	
	/**
	 * Remove value
	 */
	declare public void removeValue(T value);
	
	
	
	/**
	 * Remove value
	 */
	declare public void removeItem(T value);
	
	
	
	/**
	 * Map
	 * @param func f
	 * @return Vector
	 */
	declare Vector map(func f);
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Vector
	 */
	declare Vector filter(func f);
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	declare mixed reduce(func f, mixed init_value);
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	declare void each(func f);
	
	
	
	/**
	 * Returns Vector
	 * @param Vector<T> arr
	 * @return Vector<T>
	 */
	declare Vector<T> concat(Vector<T> arr);
	
	
	
	/**
	 * Returns Vector
	 * @param int offset
	 * @param int lenght
	 * @return Vector<T>
	 */
	declare Vector<T> slice(int offset, int lenght = null);
	
	
	
	/**
	 * Copy Vector
	 * @return Vector<T>
	 */
	declare Vector<T> copy();
	
	
	
	/**
	 * Reverse array
	 * @return Vector<T>
	 */
	declare public Vector<T> reverse();
}



#switch
#case ifcode JAVASCRIPT then
if (typeof Runtime == "undefined") Runtime = {};

Runtime.Vector = class extends Array{
	
	
	/**
	 * Returns new Instance
	 */
	createNewInstance(){
		if (isBrowser()) return new Runtime.Vector();
		return new Vector();
	}
	
	
	
	/**
	 * Correct items
	 */
	_correctItemsByType(type){
		return this.map((value) =>{
			if (isBrowser()) return Runtime.rtl.correct(item, type, null);
			return rtl.correct(item, type, null);
		});
	}
	
	
	
	/**
	 * Assign all data from other object
	 * @param Vector obj
	 */
	assign(obj){
		this.clear();
		obj.each((item)=>{
			if (isBrowser()) this.push( Runtime.rtl._clone(item) );
			else this.push( rtl._clone(item) );
		});
	}
	
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	push(value){
		/*Array.prototype.push.call(this, value);*/
		super.push(value);
		return this;
	}
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	unshift(value){
		super.unshift(value);
		return this;
	}
	
	
	
	/**
	 * Extract last value from array
	 * @return T value
	 */
	pop(){
		return super.pop();
	}
	
	
	
	/**
	 * Extract first value from array
	 * @return T value
	 */
	shift(){
		return super.shift();
	}
	
	
	
	/**
	 * Find value in array
	 * @param T value
	 * @return  int
	 */
	indexOf(value){
		for (var i=0; i<this.count(); i++){
			if (this[i] == value)
				return i;
		}
		return -1;
	}
	
	
	
	/**
	 * Find value in array in range pos_begin <= pos <= pos_end, and returns position. 
	 * @param T value
	 * @param int pos_begin - begin position
	 * @param int pos_end - end position
	 * @return int - position
	 */
	indexOfRange(value, pos_begin, pos_end){
		var pos = super.indexOf(value, pos_begin);
		if (pos == -1 || pos > pos_end)
			return -1;
		return pos;
	}
	
	
	
	/**
	 * Insert value size_to position
	 * @param T value
	 * @param int pos - position
	 */
	insert(pos, value){
		super.splice(pos, 0, value);
		return this;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param int pos - position
	 */
	remove(pos, count){
		if (count == undefined) count = 1;
		super.splice(pos, count);
		return this;
	}
	
	
	
	/**
	 * Remove range
	 * @param int pos_begin - start position
	 * @param int pos_end - end position
	 */
	removeRange(pos_begin, pos_end){
		super.splice(pos_begin, pos_end - pos_begin + 1);
		return this;
	}
	
	
	
	/**
	 * Returns value from position
	 * @param int pos - position
	 */
	get(pos, default_value){
		if (pos < 0 || pos >= this.length)
			return default_value;
		return this[pos];
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param int pos - position
	 */
	item(pos){
		if (pos < 0 || pos >= this.length){
			if (isBrowser()) throw new Runtime.Exceptions.IndexOutOfRange();
			throw new IndexOutOfRange();
		}
		return this[pos];
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param int pos - position
	 * @param T value 
	 */
	set(pos, value){
		if (pos < 0 || pos >= this.length){
			if (isBrowser()) throw new Runtime.Exceptions.IndexOutOfRange();
			throw new IndexOutOfRange();
		}
		this[pos] = value;
		return this;
	}
	
	
	
	/**
	 * Clear all values from vector
	 */
	clear(){
		super.splice(0, this.length);
		return this;
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	count(){
		return this.length;
	}
	
	
	
	/**
	 * Append value to the end of the vector
	 * @param T value
	 */
	append(value){
		this.push(value);
		return this;
	}
	
	
	
	/**
	 * Insert first value to the begin of the vector
	 * @return T value
	 */
	prepend(value){
		this.unshift(value);
		return this;
	}
	
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Vector<T> arr
	 */
	appendVector(arr){
		function f(item){ this.push(item); };
		arr.forEach(f.bind(this));
	}
	
	
	
	/**
	 * Prepend vector to the begin of the vector
	 * @param Vector<T> arr
	 */
	prependVector(arr){
		function f(item){ this.prepend(item); };
		arr.forEach(f.bind(this));
	}
	
	
	
	/**
	 * Get last item
	 */
	getLastItem(default_value){
		if (this.length == 0)
			return default_value;
		return this[this.length - 1];
	}
	last(default_value){ return this.getLastItem(default_value); }
	
	
	
	/**
	 * Remove value
	 */
	removeValue(value){
		var index = this.indexOf(value);
		if (index != -1)
			this.remove(index, 1);
	}
	
	
	
	/**
	 * Remove value
	 */
	removeItem(value){
		var index = this.indexOf(value);
		if (index != -1)
			this.remove(index, 1);
	}
	
	
	
	/**
	 * Map
	 * @param func f
	 * @return Vector
	 */
	map(f){
		return super.map(f);
	}
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Vector
	 */
	filter(f){
		return super.filter(f);
	}
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	reduce(f, init_value){
		return super.reduce(f, init_value);
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	each(f){
		super.forEach(f);
	}
	
	
	
	/**
	 * Returns Vector
	 * @param Vector<T> arr
	 * @return Vector<T>
	 */
	concat(arr){
		if (arr == null && arr == undefined){
			return super.slice();
		}
		return super.concat(arr);
	}
	
	
	
	/**
	 * Returns Vector
	 * @param int offset begin
	 * @param int length end
	 * @return Vector<T>
	 */
	slice(offset, length){
		if (length == undefined){
			return super.slice(offset);
		}
		if (length >= 0){
			length = this.count() - offset + length - 1;
		}
		return super.slice(offset, length);
	}
	
	
	
	/**
	 * Copy Vector
	 * @return Vector<T>
	 */
	copy(){
		return super.slice();
	}
	
	
	
	/**
	 * Reverse array
	 * @return Vector
	 */
	reverse(){
		return super.reverse();
	}
}

#case ifcode NODEJS then
module.exports = Runtime.Vector;


#case ifcode PHP then

class Vector implements \JsonSerializable{
	
	protected $_arr = null;
	
	
	/**
	 * Constructor
	 */
	public function __construct(){
		$this->_arr = [];
		$arr = func_get_args();
		foreach ($arr as $data){
			if (is_array($data)){
				foreach ($data as $item){
					if (!is_array($item)){
						$this->_arr[] = $item;
					}
				}
			}
			else{
				$this->_arr[] = $data;
			}
		}
	}
	
	
	
	/**
	 * Correct items
	 */
	public function _correctItemsByType($type){
		return $this->map(function($item) use ($type){
			return rtl::correct($item, $type, null);
		});
	}
	
	
	
	/**
	 * Destructor
	 */
	public function __destruct(){
		unset($this->_arr);
	}
	
	
	
	/**
	 * Assign arr
	 */
	public function _assignArr(&$arr){
		$this->_arr = $arr;
		return $this;
	}
	
	
	
	/**
	 * Get array
	 */
	public function _getArr(){
		return $this->_arr;
	}
	
	
	
	/**
	 * Returns new Instance
	 */
	public function createNewInstance(){
		return new Vector();
	}
	
	
	
	/**
	 * Assign all data from other object
	 * @param Vector obj
	 */
	public function assign($obj){
		$this->_arr = $obj->_arr;
	}
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	public function push($value){
		$this->_arr[] = $value;
		return $this;
	}
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	public function unshift($value){
		array_unshift($this->_arr, $value);
		return $this;
	}
	
	
	
	/**
	 * Extract last value from array
	 * @return T value
	 */
	public function pop(){
		return array_pop($this->_arr);
	}
	
	
	
	/**
	 * Extract first value from array
	 * @return T value
	 */
	public function shift(){
		return array_shift($this->_arr);
	}
	
	
	
	/**
	 * Find value in array. Returns -1 if value not found.
	 * @param T value
	 * @return  int
	 */
	public function indexOf($value){
		$pos = array_search($value, $this->_arr, true);
		if ($pos === false)
			return -1;
		return $pos;
	}
	
	
	
	/**
	 * Find value in array, and returns position. Returns -1 if value not found.
	 * @param T value
	 * @param int pos_begin - begin position
	 * @param int pos_end - end position
	 * @return  int
	 */
	public function indexOfRange($value, $pos_begin, $pos_end){
		$pos = $this->indexOf($value);
		if ($pos == -1 or $pos > $pos_end or $pos < $pos_begin)
			return -1;
		return $pos;
	}
	
	
	
	/**
	 * Insert value size_to position
	 * @param T value
	 * @param int pos - position
	 */
	public function insert($pos, $value){
		array_splice($this->_arr, $pos, 0, [$value]);
		return $this;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param int pos - position
	 * @param int count - count remove items
	 */
	public function remove($pos, $count = 1){
		array_splice($this->_arr, $pos, $count);
		return $this;
	}
	
	
	
	/**
	 * Remove range
	 * @param int pos_begin - start position
	 * @param int pos_end - end position
	 */
	public function removeRange($pos_begin, $pos_end){
		$this->remove($pos_begin, $pos_end - $pos_begin + 1);
		return $this;
	}
	
	
	
	/**
	 * Returns value from position
	 * @param int pos - position
	 */
	public function get($pos, $default_value){
		return isset($this->_arr[$pos]) ? $this->_arr[$pos] : $default_value;
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param int pos - position
	 */
	public function item($pos){
		if (!array_key_exists($pos, $this->_arr))
			throw new IndexOutOfRange();
		return $this->_arr[$pos];
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param int pos - position
	 * @param T value 
	 */
	public function set($pos, $value){
		if (!array_key_exists($pos, $this->_arr))
			throw new IndexOutOfRange();
		$this->_arr[$pos] = $value;
		return this;
	}
	
	
	
	/**
	 * Clear all values from vector
	 */
	public function clear(){
		$this->_arr = [];
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	public function count(){
		return count($this->_arr);
	}
	
	
	
	/**
	 * Append value to the end of array
	 * @param T value
	 */
	public function append($value){
		$this->push($value);
		return $this;
	}
	
	
	
	/**
	 * Insert first value size_to array
	 * @return T value
	 */
	public function prepend($value){
		$this->unshift($value);
		return $this;
	}
	
	
	
	/**
	 * Append vector to the end of the vector
	 * @param Vector<T> arr
	 */
	public function appendVector($arr){
		$arr->each(function($item){
			$this->append($item);
		});
	}
	
	
	
	/**
	 * Prepend vector to the begin of the vector
	 * @param Vector<T> arr
	 */
	public function prependVector($arr){
		$arr->each(function($item){
			$this->prepend($item);
		});
	}
	
	
	
	/**
	 * Returns count items in vector
	 */
	public function length(){
		return count($this->_arr);
	}
	
	
	
	/**
	 * Get last item
	 */
	public function getLastItem($default_value = null){
		$c = count($this->_arr);
		return isset($this->_arr[$c-1]) ? $this->_arr[$c-1] : $default_value;
	}
	public function last($default_value = null){ return this.getLastItem($default_value); }
	
	
	
	/**
	 * Remove value
	 * @param mixed value
	 */
	public function removeValue($value){
		$index = $this->indexOf($value);
		if ($index != -1)
			$this->remove($index, 1);
	}
	
	
	
	/**
	 * Remove value
	 * @param mixed value
	 */
	public function removeItem($value){
		$index = $this->indexOf($value);
		if ($index != -1)
			$this->remove($index, 1);
	}
	
	
	
	/**
	 * Map
	 * @param func f
	 * @return Vector
	 */
	function map($f){
		$keys = array_keys($this->_arr);
		$arr2 = new Vector();
		$arr2->_arr = array_map($f, $this->_arr, $keys);
		return $arr2;
	}
	
	
	
	/**
	 * Filter items
	 * @param func f
	 * @return Vector
	 */
	function filter($f){
		$arr2 = new Vector();
		$arr2->_arr = array_filter($this->_arr, $f);
		return $arr2;
	}
	
	
	
	/**
	 * Reduce
	 * @param func f
	 * @param mixed init_value
	 * @return init_value
	 */
	function reduce($f, $init_value){
		return array_reduce($this->_arr, $f, $init_value);
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	function each($f){
		array_walk($this->_arr, $f);
	}
	
	
	
	/**
	 * Returns new concated Vector
	 * @param Vector v
	 * @return Vector
	 */
	function concat($v){
		$arr2 = new Vector();
		$arr2->_arr = array_merge($this->_arr, $v->_arr);
		return $arr2;
	}
	
	
	
	/**
	 * Returns Vector
	 * @param int offset begin
	 * @param int length count
	 * @return Vector<T>
	 */
	function slice($offset = 0, $length = null){
		$arr2 = new Vector();
		$arr2->_arr = array_slice($this->_arr, $offset, $length);
		return $arr2;
	}
	
	
	
	/**
	 * Returns copy of the Vector
	 * @return Vector<T>
	 */
	function copy(){
		$arr2 = new Vector();
		$arr2->_arr = array_slice($this->_arr);
		return $arr2;
	}
	
	
	
	/**
	 * JsonSerializable
	 */
	public function jsonSerialize(){
		return $this->_arr;
	}
	
	
	
	/**
	 * Reverse array
	 * @return Vector
	 */
	public function reverse(){
		$arr2 = new Vector();
		$arr2->_arr = array_reverse($this->_arr);
		return $arr2;
	}
}

#endswitch
