/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Test.XML;

use Runtime.io;
use Runtime.XMLElement;
use Runtime.Unit.Test;


class XmlTest
{
	@Test{}
	static void testLoadXml()
	{
		XMLElement xml = XMLElement::loadXml('<?xml version="1.0" encoding="UTF-8" ?>
<template>
	<uid>test</uid>
	<name>Test 123</name>
	<version>1.0.0</version>
	<yaml>
		<services>
			<_var_app_name_>
				<image>test_image</image>
				<environment>
				</environment>
				<volumes type="array">_var_app_name_:/data</volumes>
			</_var_app_name_>
		</services>
		<volumes type="map">
			<_var_app_name_ type="map" />
		</volumes>
	</yaml>
</template>');
		
		/* Check load xml */
		rtl::assert(xml != null, "XML is null");
		rtl::assert(xml instanceof XMLElement, "XML load error");
		rtl::assert(xml.exists(), "XML does not exists");
		
		/* Check uid */
		rtl::assert(xml.get("uid").count() == 1, "UID count is not correct");
		rtl::assert(xml.get("uid").get(0).value() == "test", "UID value is not correct");
		
		/* Check name */
		rtl::assert(xml.get("name").count() == 1, "Name count is not correct");
		rtl::assert(xml.get("name").get(0).value() == "Test 123", "Name value is not correct");
		
		/* Check name */
		rtl::assert(xml.getName() == "template", "Root is not correct");
	}
	
	
	@Test{}
	static void testChilds()
	{
		XMLElement xml = XMLElement::loadXml('<root>
			<item>1</item>
			<item>2</item>
			<item><aa>3</aa></item>
			<test>123</test>
		</root>');
		
		rtl::assert(xml.get("item").count() == 3, "Wrong count items");
		rtl::assert(xml.get("item").get(2).get("aa").get(0).value() == "3", "Wrong item content");
		rtl::assert(xml.get("test").get(0).value() == "123", "Wrong test value");
	}
	
	
	@Test{}
	static void testIncorrect()
	{
		XMLElement xml = XMLElement::loadXml('<root></root2>');
		rtl::assert(not xml.exists(), "Incorrect XML test failed");
	}
	
	
	@Test{}
	static void testVersion_1_1()
	{
		XMLElement xml = XMLElement::loadXml('<?xml version="1.1" encoding="UTF-8" ?><root></root>');
		rtl::assert(not xml.exists(), "Incorrect XML test failed");
	}
	
	
	/**
	 * Assert xml
	 */
	static void assertEqualXml(string message, XMLElement xml1, string xml2, bool log_xml = false)
	{
		string s1 = xml1.toString({ 'indent': false, 'output-xml': true });
		s1 = rs::replace("\n", "", s1);
		s1 = rs::replace("\t", "", s1);
		s1 = rs::lower(s1);
		
		string s2 = rs::replace("\n", "", xml2);
		s2 = rs::replace("\t", "", s2);
		s2 = rs::lower(s2);
		
		if (s1 != s2 and log_xml)
		{
			io::print(s1);
		}
		
		rtl::assert(s1 == s2, message);
	}
	
	
	@Test{}
	static void testCountZero()
	{
		XMLElement xml = XMLElement::loadXml('<root>
			<item></item>
		</root>');
		rtl::assert(xml.get('item').get(0).count() == 0, "Count must be zero");
	}
	
	
	@Test{}
	static void testCountOne()
	{
		XMLElement xml = XMLElement::loadXml('<root>
			<item>
				<subitem>1</subitem>
			</item>
		</root>');
		rtl::assert(xml.get('item').get(0).count() == 1, "Count must be one");
	}
	
	
	@Test{}
	static void testCountTwo()
	{
		XMLElement xml = XMLElement::loadXml('<root>
			<item>
				<subitem1>1</subitem1>
				<subitem2>2</subitem2>
			</item>
		</root>');
		rtl::assert(xml.get('item').get(0).count() == 2, "Count must be two");
	}
	
}