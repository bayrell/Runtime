/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Providers;

use Runtime.BaseProvider;
use Runtime.Serializer;
use Runtime.VirtualDom;


class RenderProvider extends BaseProvider
{
	bool enable_ssr = false;
	
	
	/**
	 * Create layout
	 */
	var createLayout(Dict app_data)
	{
		var layout_data = app_data.get("layout");
		var class_name = layout_data.get("__class_name__");
		var layout = rtl::newInstance(class_name);
		Serializer serializer = new Serializer();
		serializer.assign(layout, layout_data);
		return window["Vue"].reactive(layout);
	}
	
	
	/**
	 * Create App
	 */
	var createApp(var layout)
	{
		var app = null;
		fn registerLayout = null;
		#ifcode JAVASCRIPT then
		registerLayout = (layout) =>
		{
			return {
				install: () => {
					app.config.globalProperties.$layout = layout;
				},
			};
		};
		#endif
		
		var component = rtl::findClass(layout.component);
		Dict props = {};
		
		var Vue = window["Vue"];
		if (this.enable_ssr)
		{
			app = Vue.createSSRApp(component, props);
		}
		else
		{
			app = Vue.createApp(component, props);
		}
		app.use(registerLayout(layout));
		return app;
	}
	
	
	/**
	 * Mount
	 */
	void mount(Dict app_data, var element)
	{
		var layout = this.createLayout(app_data);
		var app = this.createApp(layout);
		app.mount(element, true);
		return {
			"app": app,
			"layout": layout,
		};
	}
	
	
	/**
	 * Render
	 */
	void render(var vdom)
	{
		if (not(vdom instanceof VirtualDom)) return vdom;
		Vector content = [];
		for (int i=0; i<vdom.items.count(); i++)
		{
			VirtualDom item = vdom.items.get(i);
			content.push(this.render(item));
		}
		fn h = window["Vue"].h;
		if (vdom.name == "")
		{
			if (content.count() == 1) return content.get(0);
			return content;
		}
		return h(vdom.name,
			rtl::isMap(vdom.attrs) ? vdom.attrs.toObject() : vdom.attrs,
			rtl::isString(vdom.name) ? content : var () use (content) => content,
		);
	}
}