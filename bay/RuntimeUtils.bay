/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseStruct;
use Runtime.Collection;
use Runtime.Context;
use Runtime.Date;
use Runtime.DateTime;
use Runtime.Dict;
use Runtime.Entity;
use Runtime.lib;
use Runtime.Map;
use Runtime.rs;
use Runtime.rtl;
use Runtime.Vector;
use Runtime.IntrospectionClass;
use Runtime.IntrospectionInfo;
use Runtime.SerializeInterface;


static class RuntimeUtils
{
	protected static Map _variables_names = null;
	
	
	/* ========================== Class Introspection Functions ========================== */
	
	
	/**
	 * Returns parents class names
	 * @return Vector<string>
	 */
	pure memorize Collection<string> getParentsOld(string class_name)
	{
		Vector<string> res = new Vector();
		res.pushValue(class_name);
		
		while (class_name != "")
		{
			var f = rtl::method(class_name, "getParentClassName");
			class_name = f();
			if (class_name != "")
			{
				res.pushValue(class_name);
			}
		}
		
		return res.toCollection();
	}
	
	
	
	/**
	 * Returns Introspection of the class name
	 * @param string class_name
	 * @return Vector<IntrospectionInfo>
	 */
	pure memorize Collection<string> getVariablesNamesOld(string class_name, int flag = 2)
	{
		/* Get parents names */
		Collection<string> class_names = self::getParents(class_name);
		
		Vector<string> names = class_names.reduce
		(
			Vector<string> (Vector<string> names, string item_class_name) use (flag)
			{
				Collection<string> item_fields = null;
				fn f = rtl::method(item_class_name, "getFieldsList");
				try { item_fields = f(flag); } catch (var e) {}
				if (item_fields != null)
				{
					names.appendVector(item_fields);
				}
				return names;
			},
			new Vector()
		);
		
		return names.toCollection();
	}
	
	
	
	/**
	 * Returns Introspection of the class name
	 * @param string class_name
	 * @return Vector<IntrospectionInfo>
	 */
	pure memorize IntrospectionClass getClassIntrospectionOld(string class_name, bool include_parents = false)
	{
		Collection<BaseStruct> class_info = null;
		Map<Collection> fields = new Map();
		Map<Collection> methods = new Map();
		IntrospectionInfo info = null;
		
		if (not rtl::class_exists(class_name)) return null;
		
		/* Append annotations */
		fn appendAnnotations = void (Map<Collection> arr, string name, IntrospectionInfo info)
		{
			if (info == null) return;
			if (not arr.has(name)) arr.setValue(name, new Vector());
			Vector v = arr.item(name);
			v.appendVector(info.annotations);
		};
		
		/* Get Class Info */
		try
		{ 
			info = rtl::method(class_name, "getClassInfo")();
			if (info != null) class_info = info.annotations;
		}
		catch (var e){}
		
		/* Get parents names */
		Collection<string> class_names = [];
		if (include_parents) class_names = self::getParents(class_name);
		else class_names = [ class_name ];
		for (int i=0; i<class_names.count(); i++)
		{
			string item_class_name = class_names.item(i);
			
			/* Get fields introspection */
			Collection<string> item_fields = null;
			try { item_fields = rtl::method(item_class_name, "getFieldsList")(3); } catch (var e) {}
			for (int j=0; j<item_fields.count(); j++)
			{
				string field_name = item_fields.item(j);
				info = rtl::method(item_class_name, "getFieldInfoByName")(field_name);
				appendAnnotations(fields, field_name, info);
			}
			
			/* Get methods introspection */
			Collection<string> item_methods = null;
			try { item_methods = rtl::method(item_class_name, "getMethodsList")(); } catch (var e) {}
			for (int j=0; j<item_methods.count(); j++)
			{
				string method_name = item_methods.item(j);
				info = rtl::method(item_class_name, "getMethodInfoByName")(method_name);
				appendAnnotations(methods, method_name, info);
			}
		}
		
		/* To Collection */
		methods = methods.map(Collection (Vector item, string name) => item.toCollection());
		fields = fields.map(Collection (Vector item, string name) => item.toCollection());
		
		return new IntrospectionClass
		{
			"class_name": class_name,
			"class_info": (class_info != null) ? class_info.toCollection() : null,
			"fields": fields.toDict(),
			"methods": methods.toDict(),
			"interfaces": rtl::getInterfaces(class_name),
		};
	}
	
	
	
	/**
	 * Returns Introspection of the class name
	 * @param string class_name
	 * @return Vector<IntrospectionInfo>
	 */
	pure memorize IntrospectionClass getClassIntrospectionWithParentsOld(string class_name)
	{
		return static::getClassIntrospection(class_name, true);
	}
	
	
	
	/**
	 * Returns methods in class by annotation name
	 */
	pure Collection<string> getMethodsIntrospectionOld(string class_name, Collection<string> annotations)
	{
		IntrospectionClass class_info = RuntimeUtils::getClassIntrospection( class_name );
		Dict d = class_info.methods.filter
		(
			void (Collection<var> arr, string method_name) use (annotations, class_name)
			{
				arr = arr.filter
				(
					bool (var item) use (annotations)
					{
						for (int i=0; i<annotations.count(); i++)
						{
							string annotation_name = annotations.item(i);
							if (rtl::is_instanceof(item, annotation_name))
							{
								return true;
							}
						}
						return false;
					}
				);
				
				return arr.count() > 0;
			}
		);
		return d.keys();
	}
	
	
	
	/**
	 * Returns IntrospectionInfo of field
	 */
	pure memorize IntrospectionInfo getFieldInfoOld(string class_name, string field_name)
	{
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			fn getFieldInfoByName = rtl::method(parent_class_name, "getFieldInfoByName");
			IntrospectionInfo res = getFieldInfoByName(field_name);
			if (res != null) return res;
		}
		return null;
	}
	
	
	
	/* ============================= Serialization Functions ============================= */
	
	
	static var ObjectToNative(var value, bool force_class_name = true)
	{
		var value1 = self::ObjectToPrimitive(value, force_class_name);
		var value2 = self::PrimitiveToNative(value1);
		return value2;
	}
	static var NativeToObject(var value)
	{
		var value1 = self::NativeToPrimitive(value);
		var value2 = self::PrimitiveToObject(value1);
		return value2;
	}
	
	
	
	/**
	 * Returns object to primitive value
	 * @param var obj
	 * @return var
	 */
	public static var ObjectToPrimitive(var obj, bool force_class_name = true)
	{
	
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		
		if (obj instanceof Collection)
		{
			return obj.map(
				var (var value) use (force_class_name)
				{
					return static::ObjectToPrimitive( value, force_class_name );
				}
			);
		}
		
		if (obj instanceof Dict)
		{
			
			obj = obj.map(
				var (var value, string key) use (force_class_name)
				{
					return static::ObjectToPrimitive( value, force_class_name );
				}
			);
			
			return obj.toDict();
		}
		
		if (obj instanceof Date)
		{
			return obj;
		}
		if (obj instanceof DateTime)
		{
			return obj;
		}
		
		if (obj instanceof BaseStruct)
		{
			Map<var> values = new Map();
			Collection<string> names = rtl::getFields(obj.getClassName());
			
			for (int i=0; i<names.count(); i++)
			{
				string variable_name = names.item(i);
				var value = obj.get(variable_name, null);
				var value = self::ObjectToPrimitive( value, force_class_name );
				values.setValue(variable_name, value);
			}
			
			if (force_class_name)
			{
				values.setValue("__class_name__", obj.getClassName());
			}
			delete names;
			
			return values.toDict();
		}
		
		return null;
	}
	
	
	
	/**
	 * Returns object to primitive value
	 * @param SerializeContainer container
	 * @return var
	 */
	public static var PrimitiveToObject(var obj)
	{
		
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		
		if (obj instanceof Collection)
		{
			Vector<var> res = new Vector();
			for (int i=0; i<obj.count(); i++)
			{
				var value = obj.item(i);
				value = self::PrimitiveToObject(value);
				res.pushValue(value);
			}
			return res.toCollection();
		}
		
		if (obj instanceof Dict)
		{
			Map<var> res = new Map();
			Vector<string> keys = obj.keys();
		
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys.item(i);
				var value = obj.item(key);
				value = self::PrimitiveToObject(value);
				res.setValue(key, value);
			}
			
			delete keys;
			
			if ( !res.has("__class_name__") ) return res.toDict();
			if ( res.item("__class_name__") == "Runtime.Map" or res.item("__class_name__") == "Runtime.Dict" )
			{
				res.remove("__class_name__");
				return res.toDict();
			}
			
			string class_name = res.item("__class_name__");
			if (not rtl::class_exists(class_name))
			{
				return null;
			}
			if (not rtl::class_implements(class_name, "Runtime.SerializeInterface"))
			{
				return null;
			}
			
			/* Assign values */
			Map<var> obj = new Map();
			Collection<string> names = rtl::getFields(class_name);
			for (int i=0; i<names.count(); i++)
			{
				string variable_name = names.item(i);
				if (variable_name != "__class_name__") 
				{
					var value = res.get(variable_name, null);
					obj.setValue(variable_name, value);
				}
			}
			
			/* New instance */
			var instance = rtl::newInstance(class_name, [obj]);
			
			delete res;
			delete obj;
			
			return instance;
		}
		
		return null;
	}
	
	
	static var NativeToPrimitive(var value)
	{
		#switch
		#case ifcode PHP then
		
		if ($value === null)
			return null;
			
		if (is_object($value))
		{
			if (isset($value->__class_name__) && $value['__class_name__'] == "Runtime.Date")
			{
				$res = \Runtime\Date::from($value);
				return $res;
			}
			else if (isset($value->__class_name__) && $value['__class_name__'] == "Runtime.DateTime")
			{
				$res = \Runtime\DateTime::from($value);
				return $res;
			}
			else
			{
				$res = \Runtime\Dict::from($value);
				$res = $res->map($ctx, function ($ctx, $val, $key){
					return self::NativeToPrimitive($ctx, $val);
				});
				return $res;
			}
		}
		
		if (is_array($value))
		{
			if ( isset($value['__class_name__']) )
			{
				if ($value['__class_name__'] == "Runtime.Date")
				{
					$res = \Runtime\Date::from($value);
					return $res;
				}
				else if ($value['__class_name__'] == "Runtime.DateTime")
				{
					$res = \Runtime\DateTime::from($value);
					return $res;
				}
				else
				{
					$res = \Runtime\Dict::from($value);
					$res = $res->map($ctx, function ($ctx, $val, $key){
						return self::NativeToPrimitive($ctx, $val);
					});
					return $res;
				}
			}
			$arr = array_values($value);
			$res = \Runtime\Collection::from($arr);
			$res = $res->map($ctx, function ($ctx, $item){
				return self::NativeToPrimitive($ctx, $item);
			});
			return $res;
		}
		
		return $value;
	
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Dict = use("Runtime.Dict");
		
		if (value === null)
			return null;
		
		if (Array.isArray(value))
		{
			var new_value = _Collection.from(value);
			new_value = new_value.map(ctx, (ctx, val)=>{
				return _Utils.NativeToPrimitive(ctx, val);
			});
			return new_value;
		}
		if (typeof value == 'object')
		{
			if (value["__class_name__"] == "Runtime.Date")
			{
				var new_value = _Date.from(value);
				return new_value;
			}
			if (value["__class_name__"] == "Runtime.DateTime")
			{
				var new_value = _DateTime.from(value);
				return new_value;
			}
			var new_value = _Dict.from(value);
			new_value = new_value.map(ctx, (ctx, val, key)=>{
				return _Utils.NativeToPrimitive(ctx, val);
			});
			return new_value;
		}
		
		return value;
		#endswitch
	}
	
	static var PrimitiveToNative(var value)
	{
		#switch
		
		#case ifcode PHP then
		
		if ($value === null)
			return null;
		
		if ($value instanceof \Runtime\Date)
		{
			$value = $value->toDict($ctx)->setIm($ctx, "__class_name__", "Runtime.Date");
		}
		else if ($value instanceof \Runtime\DateTime)
		{
			$value = $value->toDict($ctx)->setIm($ctx, "__class_name__", "Runtime.DateTime");
		}
		
		if ($value instanceof \Runtime\Collection)
		{
			$arr = [];
			$value->each
			(
				$ctx,
				function ($ctx, $v) use (&$arr)
				{
					$arr[] = static::PrimitiveToNative($ctx, $v);
				}
			);
			return $arr;
		}
		
		if ($value instanceof \Runtime\Dict)
		{
			$arr = [];
			$value->each
			(
				$ctx,
				function ($ctx, $v, $k) use (&$arr)
				{
					$arr[$k] = static::PrimitiveToNative($ctx, $v);
				}
			);
			return $arr;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _DateTime = use("Runtime.DateTime");
		var _Date = use("Runtime.Date");
		var _Dict = use("Runtime.Dict");
		
		if (value === null)
			return null;
		
		if (value instanceof _Date)
		{
			value = value.toDict(ctx).setIm(ctx, "__class_name__", "Runtime.Date");
		}
		else if (value instanceof _DateTime)
		{
			value = value.toDict(ctx).setIm(ctx, "__class_name__", "Runtime.DateTime");
		}
		
		if (value instanceof _Collection)
		{
			var arr = [];
			value.each(ctx, (ctx, v)=>{
				arr.push( _Utils.PrimitiveToNative(ctx, v) );
			});
			return arr;
		}
		if (value instanceof _Dict)
		{
			var obj = {};
			value.each(ctx, (ctx, v, k)=>{
				obj[k] = _Utils.PrimitiveToNative(ctx, v);
			});
			return obj;
		}
		
		#endswitch
		
		return value;
	}
	
	
	
	static const int JSON_PRETTY = 1;
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	static string json_encode(var value, int flags = 0, bool convert = true)
	{
		#switch
		#case ifcode PHP then
		if ($convert){
			$value = self::ObjectToNative($ctx, $value);
		}
		$json_flags = JSON_UNESCAPED_UNICODE;
		if ( ($flags & 1) == 1 ) $json_flags = $json_flags | JSON_PRETTY_PRINT;
		return json_encode($value, $json_flags);
		
		#case ifcode JAVASCRIPT then
		if (flags == undefined) flags = 0;
		if (convert == undefined) convert = true;
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Dict = use("Runtime.Dict");
		
		if (convert) value = _Utils.ObjectToPrimitive(ctx, value);
		return JSON.stringify(value, (key, value) => {
			if (value instanceof _Collection) return value;
			if (value instanceof _Dict) return value.toObject();
			if (_rtl.isScalarValue(value)) return value;
			return null;
		});
		#endswitch
	}
	
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return var 
	 */
	static var json_decode(var obj)
	{
		#switch
		#case ifcode PHP then
	
		$res = @json_decode($obj, false);
		if ($res === null || $res === false)
			return null;
		return self::NativeToObject($ctx, $res);
	
		#case ifcode JAVASCRIPT then
		try{
			
			var _rtl = use("Runtime.rtl");
			var _Utils = use("Runtime.RuntimeUtils");
			var _Collection = use("Runtime.Collection");
			var _Dict = use("Runtime.Dict");
			
			var obj = JSON.parse(obj, function (key, value){
				if (value == null) return value;
				if (Array.isArray(value)){
					return _Collection.from(value);
				}
				if (typeof value == 'object'){
					return _Dict.from(value);
				}
				return value;
			});
			return _Utils.PrimitiveToObject(ctx, obj);
		}
		catch(e){
			throw e;
		}
		return null;
		#endswitch
	}
	
}