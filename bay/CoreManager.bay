/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.CoreObject;
use Runtime.RuntimeUtils;
use Runtime.Interfaces.ContextInterface;


class CoreManager extends CoreObject
{
	protected ContextInterface _context = null;
	protected CoreStruct _old_model = null;
	protected CoreStruct _current_model = null;
	protected bool _model_updated_by_self = false;
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof CoreStruct;
	
	
	
	/**
	 * Returns context
	 *
	 * @return ContextInterface 
	 */
	public ContextInterface context()
	{
		return this._context;
	}
	
	
	
	/**
	 * Constructor
	 */
	public void constructor(ContextInterface context = null, CoreStruct model = null)
	{
		parent();
		this._context = context;
		this._current_model = model;
		if (this._current_model == null) { this.initModel(); }
	}
	
	
	
	/**
	 * Init manager model
	 */
	protected void initModel()
	{
	}
	
	
	
	/**
	 * Start manager
	 */
	public async void startManager()
	{
	}
	
	
	
	/* ---------------------------------- Model ---------------------------------- */
	
	
	/**
	 * Model changed
	 */
	public void onModelChange(CoreStruct old_model, CoreStruct new_model, string kind)
	{
	}
	
	
	
	/**
	 * Returns model
	 */
	public CoreStruct model() => this._current_model;
	
	
	
	/**
	 * Update current model
	 * @param Dict map
	 */
	public void updateModel(Dict map)
	{
		this.setModel( this.model.copy(map) );
	}
	
	
	
	/**
	 * Set new model and dispatch ModelChange
	 * @param CoreStruct model
	 */
	public void setModel(CoreStruct new_model)
	{
		if ( !rtl::is_instanceof(new_model, static::modelName()) )
		{
			return;
		}
		if (this.model != new_model)
		{
			this._old_model = this.model;
			this._current_model = new_model;
			this._model_updated_by_self = true;
			this.onModelChange(this._old_model, new_model, "self");
		}
	}
	
	
	
	/**
	 * Returns true if model is updated
	 * @return bool
	 */
	public bool isModelUpdated()
	{
		return this._model_updated_by_self;
	}
	
	
	
	/**
	 * Returns true if model is update by self component
	 * @return bool
	 */
	public bool isModelUpdatedBySelf()
	{
		return this._model_updated_by_self;
	}
	
	
	
	/**
	 * Flush model
	 */
	public void flushModel()
	{
		this._old_model = this._current_model;
		this._model_updated_by_self = false;
	}
	
}