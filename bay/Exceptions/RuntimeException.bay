/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Exceptions;

use Runtime.rtl;
use Runtime.Interfaces.ContextInterface;


declare class ClassException{}

#switch
#case ifcode ES6 then
if (typeof Runtime == 'undefined') Runtime = {};
if (typeof Runtime.Exceptions == 'undefined') Runtime.Exceptions = {};
Runtime.Exceptions.ClassException = class extends Error { _init(){} }
#case ifcode NODEJS then
class ClassException extends Error { _init(){} }
#case ifcode PHP then
class ClassException extends \Exception {}
#endswitch


class RuntimeException extends ClassException
{
	
	
	protected ContextInterface context = null;
	protected Object prev = null;
	protected string error_str = "";
	protected string message = "";
	protected int code = 0;
	protected string file = "";
	protected int line = -1;
	protected int pos = -1;
	
	
	void constructor(string message = "", int code = 0, ContextInterface context = null, Object prev = null){
		parent(message, code, prev);
		
		this.error_str = message;
		this.context = context;
		this.message = message;
		this.code = code;
		this.prev = prev;
		
	}
	
	public Exception getPreviousException(){
		return this.prev;
	}
	
	public string getErrorMessage(){
		return this.message;
	}
	
	public int getErrorCode(){
		return this.code;
	}
	
	public string getFileName(){
		return this.file;
	}
	
	public void setFileName(string file){
		this.file = file;
	}
	
	public string getErrorLine(){
		return this.line;
	}
	
	public void setErrorLine(int line){
		this.line = line;
	}
	
	public string getErrorPos(){
		return this.pos;
	}
	
	public void setErrorPos(int pos){
		this.pos = pos;
	}
	
	public string toString(){
		return this.message;
	}

	public string buildMessage(){
		this.message = this.error_str;
		
		if (this.line != -1 and this.pos != -1){
			this.message ~= " at Ln:" ~ this.line ~ ", Pos:" ~ this.pos;
		}
		if (this.file != ""){
			this.message ~= " in file:'" ~ this.file ~ "'";
		}
	}
	
	#switch
	#case ifcode PHP then
	public function __toString (){
		return $this->toString();
	}
	#endswitch
	
	
	
	/**
	 * Apply function and return new container
	 * @param fun f
	 * @return RuntimeException
	 */
	public RuntimeException map(fun f)
	{
		return this;
	}

	
	
	/**
	 * Return values of the container
	 * @return mixed
	 */
	public mixed value()
	{
		return null;
	}
	
	
	
	/**
	 * Returns true if value is empty
	 */
	public bool isEmpty()
	{
		return true;
	}
	
	
	
	/**
	 * Returns true if is error
	 */
	public bool isError()
	{
		return true;
	}
}
