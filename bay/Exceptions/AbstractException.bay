/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Exceptions;

use Runtime.rtl;


abstract class ClassException{}

#switch
#case ifcode JAVASCRIPT then
if (typeof Runtime == 'undefined') Runtime = {};
if (typeof Runtime.Exceptions == 'undefined') Runtime.Exceptions = {};
Runtime.Exceptions.ClassException = function(message, code, prev)
{
	Error.call(this);
	Error.captureStackTrace(this, this.constructor);
	this.message = message;
	this.code = code;
	this.prev = prev;
}
Runtime.Exceptions.ClassException.prototype = Object.create(Error.prototype);
Runtime.Exceptions.ClassException.prototype.constructor = Runtime.Exceptions.ClassException;
Object.assign(Runtime.Exceptions.ClassException.prototype,
{
	_init: function(ctx){},
});
Object.assign(Runtime.Exceptions.ClassException,
{
	getNamespace: function(){ return "Runtime.Exceptions"; },
	getClassName: function(){ return "Runtime.Exceptions.ClassException"; },
	getParentClassName: function(){ return ""; },
});
#case ifcode NODEJS then
use.add(Runtime.Exceptions.ClassException);
#case ifcode PHP then
class ClassException extends \Exception
{
	function __construct($ctx, $message="", $code=-1, $prev=null)
	{
		parent::__construct($message, (int)$code, $prev);
	}
	function _init($ctx){}
}
#endswitch


class AbstractException extends ClassException
{
	protected Object prev = null;
	public string error_message = "";
	public int error_code = 0;
	public string error_file = "";
	public string error_line = "";
	public string error_pos = "";
	
	
	/**
	 * Constructor
	 */
	void constructor(string message = "", int code = -1, Object prev = null)
	{
		#switch
		#case ifcode JAVASCRIPT then
		Runtime.Exceptions.ClassException.call(this, message, code, prev);
		#case ifcode PHP then
		parent::__construct($ctx, $message, $code, $prev);
		#endswitch
		this._init();
		this.error_message = message;
		this.error_code = code;
		this.prev = prev;
	}
	
	
	/**
	 * Returns previous exception
	 */
	public Object getPreviousException()
	{
		return this.prev;
	}
	
	
	/**
	 * Build error message
	 */
	public string buildErrorMessage()
	{
		return this.error_message;
	}
	
	
	/**
	 * Returns error message
	 */
	public string getErrorMessage()
	{
		return this.error_message;
	}
	
	
	/**
	 * Returns error code
	 */
	public int getErrorCode()
	{
		return this.error_code;
	}
	
	
	/**
	 * Returns error file name
	 */
	public string getFileName()
	{
		#switch
		#case ifcode PHP then
		if ($this->error_file == "")
		{
			return $this->getFile();
		}
		#endswitch
		return this.error_file;
	}
	
	
	/**
	 * Returns error line
	 */
	public string getErrorLine()
	{
		#switch
		#case ifcode PHP then
		if ($this->error_line == "")
		{
			return $this->getLine();
		}
		#endswitch
		return this.error_line;
	}
	
	
	/**
	 * Returns error position
	 */
	public string getErrorPos()
	{
		return this.error_pos;
	}
	
	
	/**
	 * Convert exception to string
	 */
	public string toString()
	{
		return this.buildErrorMessage();
	}
	
	
	/**
	 * Returns trace
	 */
	string getTraceStr()
	{
		#switch
		#case ifcode PHP then
		return $this->getTraceAsString();
		#endswitch
	}
	
	
	/**
	 * Returns trace
	 */
	Collection<string> getTraceCollection()
	{
		#switch
		#case ifcode PHP then
		$error_trace = $this->getTrace();
		$error_trace = array_map(
			function ($item){
				$prefix = "internal";
				if (isset($item["file"]))
					$prefix = $item["file"] . "(" . $item["line"] . ")";
				else if (isset($item["class"]))
					$prefix = $item["class"];
				return $prefix . ": " . $item["function"];
			},
			$error_trace
		);
		return \Runtime\Collection::from($error_trace);
		#endswitch
	}
	
}
