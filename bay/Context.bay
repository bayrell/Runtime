/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;

use BayrellRtl.Lib.rtl;
use BayrellRtl.CoreObject;
use BayrellRtl.Types.Map;
use BayrellRtl.Types.Vector;
use BayrellRtl.Interfaces.MapInterface;
use BayrellRtl.Interfaces.ContextInterface;
use BayrellRtl.Interfaces.FactoryInterface;
use BayrellRtl.Interfaces.ModuleDescriptionInterface;
use BayrellRtl.ContextObject;
use BayrellRtl.ProviderDescription;


class Context extends CoreObject implements ContextInterface{
	
	
	protected string _locale = "";
	protected Vector<string> _modules = null;
	protected Map<string, ProviderDescription> _providers_names = null;
	protected Map<string, CoreObject> _current_providers = null;
	protected Map<string, var> _values = null;
	
	
	
	/**
	 * Assign all data from other object
	 * @param CoreObject obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof Context){
		
			delete this._modules;
			delete this._providers_classes_names;
			delete this._providers_factory_classes_names;
			delete this._current_providers;
			
			this._modules = clone obj._modules;
			this._providers_classes_names = clone obj._providers_classes_names;
			this._providers_factory_classes_names = clone obj._providers_factory_classes_names;
			this._current_providers = clone obj._current_providers;
			
			this._locale = obj._locale;
		}
		
		parent::assign(obj);
	}
	
	
	/**
	 * Constructor
	 */
	void constructor(){
		parent();
		this._modules = new Vector<string>();
		this._providers_names = new Map<string, ProviderDescription>();
		this._current_providers = new Map<string, CoreObject>();
		this._values = new Map<string, var>();
	}
	
	
	
	/**
	 * Destructor
	 */
	public void destructor(){
		delete this._current_providers;
		delete this._providers_classes_names;
		delete this._modules;
		parent::destructor();
	}
	
	
	
	/**
	 * Returns registed modules
	 * @return Vector<string>
	 */
	Vector<string> getModules(){
		return clone this._modules;
	}
	
	
	
	/**
	 * Register module
	 */
	void registerModule(string module_name){
		
		string module_description_class_name = module_name ~ ".ModuleDescription";
		if (this._modules.indexOf(module_description_class_name) != -1)
			return;
		
		/* Add module */
		this._modules.push(module_description_class_name);
		
		
		/* Call onRegister */
		Vector<var> args = (new Vector()).push(this);
		rtl.callStaticMethod(
			module_description_class_name, 
			"onRegister",
			args
		);
		delete args;
		
		
		/* Register required Modules*/
		Map<string, string> modules = rtl.callStaticMethod(
			module_description_class_name, 
			"getRequiredModules"
		);
		if (modules != null){
			Vector<string> keys = modules.keys();
			int sz = keys.count();
			for (int i=0; i<sz; i++){				
				string module_name = keys.item(i);
				this.registerModule(module_name);
			}
			delete keys;
			delete modules;
		}
	}
	
	
	
	/**
	 * Register module
	 * @param string provider_name
	 * @param string factory_name
	 * @param int type
	 */
	void registerProvider(string provider_name, string factory_name, int type){
		if (not this._providers_names.has(provider_name)){
			ProviderDescription description = new ProviderDescription(provider_name, factory_name, type);
			this._providers_names.set(provider_name, description);
		}
	}
	
	
	
	/**
	 * Init context
	 */
	void init(){
		Vector<var> args = new Vector();
		args.push(this);	
	
		int sz = this._modules.count();
		for (int i=0; i<sz; i++){
			string module_description_class_name = this._modules.item(i);
			rtl.callStaticMethod(
				module_description_class_name, 
				"initContext",
				args
			);
		}
		
		delete args;
	}
	
	
	
	/**
	 * Returns provider description by name. If provider does not exists returns null.
	 * @param string provider_name
	 * @return ProviderDescription 
	 */
	public ProviderDescription getProviderDescription(string provider_name){
		if (not this._providers_names.has(provider_name))
			return null;
		
		return this._providers_names.item(provider_name);
	}
	
	
	
	/**
	 * Returns standart provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getProvider(string provider_name){
	
		if (this._providers_names.has(provider_name)){
			ProviderDescription description = this._providers_names.item(provider_name);
			
			if (description.getType() == RuntimeConstant::PROVIDER_REGULAR){
				if (this._current_providers.has(provider_name))
					return this._current_providers.item(provider_name);
			}
			
			ContextObject obj = this.createProvider(provider_name);
			if (obj == null)
				return null;
			
			if (description.getType == RuntimeConstant::PROVIDER_REGULAR){
				this._current_providers.set(provider_name, obj);
			}
			
			return obj;
		}
		
		return null;
	}
	
	
	
	/**
	 * Returns temporary provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject createProvider(string provider_name){
		
		if (this._providers_names.has(provider_name)){
			ProviderDescription description = this._providers_names.item(provider_name);
			
			ContextObject obj = null;
			Vector<var> args = new Vector();
			args.push(this);
			
			CoreObject factory_obj = rtl::newInstance(description.getFactoryName(), args);
			delete args;
			
			if (factory_obj implements FactoryInterface){
				obj = factory_obj.newInstance();
			}
			delete factory_obj;
			
			return obj;
		}
		
		return null;
	}

	
	
	/**
	 * Set application locale
	 * @params string locale
	 */
	void setLocale(string locale){
		this._locale = locale;
	}
	
	
	
	/**
	 * Get application locale
	 * @params string locale
	 */
	string getLocale(){
		return this._locale;
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, MapInterface params = null, string locale = ""){
		return message;
	}
	
	
	
	/**
	 * Set attribute value
	 * @params string attr_name - Attribute name
	 * @params var value - value
	 */
	void setValue(string attr_name, var value){
		this._values.set(attr_name, value);
	}
	
	
	
	/**
	 * Get attribute value
	 * @params string attr_name - Attribute name
	 * @params var default_value - Default value if not exists
	 * @return var value
	 */
	var getValue(string attr_name, var default_value){
		return this._values.get(attr_name, default_value);
	}
	
	
	
	/**
	 * Return true if attr is exists
	 * @params string attr_name - Attribute name
	 * @return boolean
	 */
	boolean hasValue(string attr_name){
		return this._values.contains(attr_name);
	}
	
}