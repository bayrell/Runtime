/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.BaseStruct;

struct Context extends BaseStruct
{
	/* Struct data */
	string base_path = "";
	Collection<string> cli_args = [];
	Collection<string> modules = [];
	Dict<string> enviroments = {};
	Collection<BaseObject> providers = [];
	Collection<BaseStruct> entities = [];
	Dict<var> settings = {};
	int start_time = 0;
	string tz = "UTC";
	
	
	/**
	 * Init
	 */
	static async Context init(Context c)
	{
		@ = c;
		if (c.initialized) return c;
		
		/* Base path */
		string base_path = (c.base_path != "") ?
			c.base_path : rtl::attr(c.env, ["BASE_PATH"], "", "string")
		;
		
		/* Get modules entities */
		Collection<BaseStruct> entities = static::getEntitiesFromModules(c.modules);
		c <= entities <= entities;
		
		return c;
	}
	
	
	
	/**
	 * Returns modules entities
	 */
	pure Collection<BaseStruct> getEntitiesFromModules(Collection<string> modules)
	{
		Vector<BaseStruct> entities = new Vector();
		for (int i=0; i<modules.count(); i++)
		{
			string module_class_name = modules.item(i) ~ ".ModuleDescription";
			if (rtl::method_exists(module_class_name, "entities"))
			{
				fn f = rtl::method(module_class_name, "entities");
				Collection<BaseStruct> arr = f();
				entities.appendVector(arr);
			}
		}
		return entities.removeDuplicates().toCollection();
	}
}
