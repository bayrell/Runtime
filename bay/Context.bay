/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rs;
use Runtime.rtl;
use Runtime.CoreObject;
use Runtime.Map;
use Runtime.Vector;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.FactoryInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;


class Context extends CoreObject implements ContextInterface
{
	
	
	protected Vector<string> _modules = null;
	protected Map<mixed> _values = null;
	protected Map<mixed> _drivers = null;
	protected Map<FactoryInterface> _providers_names = null;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
		this._modules = new Vector<string>();
		this._providers_names = new Map<FactoryInterface>();
		this._drivers = new Map<mixed>();
		this._values = new Map<mixed>();
	}
	
	
	
	/**
	 * Destructor
	 */
	public void destructor()
	{
		delete this._providers_classes_names;
		delete this._modules;
		delete this._values;
		parent();
	}
	
	
	
	/**
	 * Returns registed modules
	 * @return Vector<string>
	 */
	Vector<string> getModules()
	{
		return this._modules.slice();
	}
	
	
	
	/**
	 * Register module
	 */
	ContextInterface registerModule(string module_name)
	{
		if (this._modules.indexOf(module_name) != -1)
			return;
		
		Vector<var> args = [this];
		string module_description_class_name = module_name ~ ".ModuleDescription";
		
		/* Add module */
		this._modules.push(module_name);
		
		/* Register required Modules*/
		Map<string, string> modules = rtl::callStaticMethod(
			module_description_class_name, 
			"getRequiredModules",
			args
		);
		if (modules != null)
		{
			Vector<string> keys = modules.keys();
			int sz = keys.count();
			for (int i=0; i<sz; i++)
			{
				string module_name = keys.item(i);
				this.registerModule(module_name);
			}
			delete keys;
			delete modules;
		}
		delete args;
		
		/* Call onRegister */
		rtl::callStaticMethod(
			module_description_class_name, 
			"onRegister",
			args
		);
		
		return this;
	}
	
	
	
	/**
	 * Register module
	 * @param string provider_name
	 * @param FactoryInterface factory
	 */
	ContextInterface registerProviderFactory(string provider_name, FactoryInterface factory)
	{
		if (not this._providers_names.has(provider_name))
		{
			this._providers_names.set(provider_name, factory);
		}
		return this;
	}
	
	
	
	/**
	 * Register driver
	 * @param string driver_name
	 * @param FactoryInterface factory
	 */
	ContextInterface registerDriver(string driver_name, CoreObject obj)
	{
		if (not this._drivers.has(driver_name))
		{
			this._drivers.set(driver_name, obj);
		}
		return this;
	}
	
	
	
	/**
	 * Read config
	 */
	ContextInterface readConfig(Map<mixed> config)
	{
		Vector<var> args = new Vector();
		args.push(this);	
		args.push(config);	
		
		int sz = this._modules.count();
		for (int i=0; i<sz; i++)
		{
			string module_name = this._modules.item(i);
			string module_description_class_name = module_name ~ ".ModuleDescription";
			rtl::callStaticMethod(
				module_description_class_name, 
				"onReadConfig",
				args
			);
		}
		
		delete args;
		
		return this;
	}
	
	
	
	/**
	 * Init context
	 */
	ContextInterface init()
	{
		Vector<var> args = new Vector();
		args.push(this);	
	
		int sz = this._modules.count();
		for (int i=0; i<sz; i++)
		{
			string module_name = this._modules.item(i);
			string module_description_class_name = module_name ~ ".ModuleDescription";
			rtl::callStaticMethod(
				module_description_class_name, 
				"initContext",
				args
			);
		}
		
		delete args;
		
		return this;
	}
	
	
	
	/**
	 * Returns provider or driver
	 *
	 * @params string name
	 * @return CoreObject
	 */
	public CoreObject get(string name, Map<mixed> params = null)
	{
		bool is_provider = rs::strpos(name, "provider.") === 0;
		bool is_driver = rs::strpos(name, "driver.") === 0;
		if (is_provider) return this.createProvider(name, params);
		if (is_driver) return this.getDriver(name);
		return null;
	}
	
	
	
	/**
	 * Returns provider
	 *
	 * @params string provider_name
	 * @return CoreObject
	 */
	public CoreObject createProvider(string provider_name, Map<mixed> params = null)
	{
		if (not this._providers_names.has(provider_name))
			return null;
			
		FactoryInterface factory_obj = this._providers_names.item(provider_name);
		if (factory_obj == null)
			return null;
		
		CoreObject obj = factory_obj.newInstance(this, params);
		return obj;
	}

	
	
	/**
	 * Returns driver
	 *
	 * @params string driver_name
	 * @return CoreObject
	 */
	public CoreObject getDriver(string driver_name)
	{
		if (this._drivers.has(driver_name))
			return this._drivers.item(driver_name);
			
		return null;
	}
	
	
	
	/**
	 * Set application locale
	 * @params string locale
	 */
	void setLocale(string locale)
	{
		this._values.set("default.locale", locale);
	}
	
	
	
	/**
	 * Get application locale
	 * @params string locale
	 */
	string getLocale()
	{
		return this._values.get("default.locale", "en", "string");
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params Map params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, Map params = null, string locale = ""){
		return message;
	}
	
	
	
	/**
	 * Fork current context
	 * @return ContextInterface
	 */
	ContextInterface fork()
	{
		string class_name = this.getClassName();
		ContextInterface obj = rtl::newInstance(class_name);
		
		/* Add modules */
		this._modules.each( 
			void (string item) use (obj)
			{
				obj._modules.push(item);
			}
		);
		
		/* Add services */
		this._drivers.each( 
			void (string key, mixed value) use (obj)
			{
				obj._drivers.set(key, value);
			}
		);
		
		/* Add provider names */
		this._providers_names.each( 
			void (string key, FactoryInterface value) use (obj)
			{
				obj._providers_names.set(key, value);
			}
		);
		
		return obj;
	}
	
	
	
	/**
	 * Realease context resources
	 */
	void release(){}
	
	
	
	/**
	 * Returns context value
	 * @param string name
	 * @return mixed
	 */
	mixed getValue(string name, mixed default_value = null, string type_value = "mixed", string type_template = "")
	{
		return this._values.get(name, default_value, type_value, type_template);
	}
	
	
	
	/**
	 * Set context value
	 * @param string name
	 * @param mixed value
	 */
	void setValue(string name, mixed value)
	{
		this._values.set(name, value);
	}
}