/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rs;
use Runtime.rtl;
use Runtime.BusResult;
use Runtime.Collection;
use Runtime.CoreDriver;
use Runtime.CoreObject;
use Runtime.CoreStruct;
use Runtime.CoreProvider;
use Runtime.Dict;
use Runtime.Map;
use Runtime.Message;
use Runtime.Vector;
use Runtime.RuntimeConstant;
use Runtime.RuntimeUtils;
use Runtime.Annotations.Driver;
use Runtime.Annotations.Entity;
use Runtime.Annotations.IntrospectionClass;
use Runtime.Annotations.IntrospectionInfo;
use Runtime.Annotations.LambdaChain;
use Runtime.Annotations.Provider;
use Runtime.Exceptions.RuntimeException;
use Runtime.Interfaces.BusInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;


struct Context extends CoreStruct
{
	/* Struct data */
	string base_path = null;
	Dict<var> env = null;
	Dict<var> settings = null;
	Collection<string> modules = null;
	Collection<CoreStruct> entities = null;
	Dict<CoreDriver> drivers = null;
	Dict<CoreStruct> providers = null;
	Dict<var> tags = null;
	
	/* Variable data */
	bool initialized = false;
	bool started = false;
	
	
	/**
	 * Returns app name
	 * @return string
	 */
	lambda string @appName() => "";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	lambda Dict<string> @getModules(Dict env) => null;
	
	
	
	/**
	 * Extend entities
	 */
	lambda Collection<CoreStruct> @getEntities(Dict env) => null;
	
	
	
	/**
	 * Returns settings
	 * @return Dict<string>
	 */
	lambda Dict<primitive> @getSettings(Dict env) => null;
	
	
	
	/**
	 * Returns settings
	 * @return Dict<string>
	 */
	var @config(Collection items, primitive d = null) =>
		(this.settings != null) ? rtl::attr(this, this.settings, items, d) : null
	;
	
	
	
	/**
	 * Create context
	 *
	 * @params Dict env
	 * @params Collection<string> modules
	 * @params Dict settings
	 * @return Context
	 */
	public static Context @create(Dict env, Collection<string> modules = null, Dict settings = null)
	{
		/* Get modules */
		if (modules == null)
		{
			Dict<string> m = static::getModules(env);
			modules = (m != null) ? m.keys(null) : [];
		}
		
		/* Get settings */
		if (settings == null)
		{
			settings = static::getSettings(env);
		}
		
		/* Extends modules */
		modules = static::getRequiredModules(modules);
		
		/* Get modules entities */
		Collection<CoreStruct> entities = static::getModulesEntities(modules);
		entities = entities.prependCollectionIm( null, static::getEntities(env) );
		
		/* Base path */
		string base_path = rtl::attr(null, settings, ["base_path"], "", "string");
		if (base_path == "") base_path = rtl::attr(null, env, ["BASE_PATH"], "", "string");
		
		/* Context data */
		Dict obj = {
			"env": env,
			"settings": settings,
			"modules": modules,
			"entities": entities,
			"base_path": base_path,
		};
		
		/* Create context */
		Context ctx = static::newInstance(null, obj);
		
		return ctx;
	}
	
	
	
	/**
	 * Returns required modules
	 * @param string class_name
	 * @return Collection<string>
	 */
	static void @_getRequiredModules
	(
		Vector<string> res,
		Map<string> cache,
		Collection<string> modules,
		fn filter = null
	)
	{
		if (modules == null) return;
		if (filter) modules = modules.filter(null, filter);
		for (int i=0; i<modules.count(null); i++)
		{
			string module_name = modules.item(null, i);
			if (cache.get(null, module_name, false) == false)
			{
				cache.set(null, module_name, true);
				fn f = rtl::method(null, module_name ~ ".ModuleDescription", "requiredModules");
				Dict<string> sub_modules = f(null);
				if (sub_modules != null)
				{
					Collection<string> sub_modules = sub_modules.keys(null);
					static::_getRequiredModules(res, cache, sub_modules);
				}
				res.push(null, module_name);
			}
		}
	}
	
	
	
	/**
	 * Returns all modules
	 * @param Collection<string> modules
	 * @return Collection<string>
	 */
	lambda Collection<string> @getRequiredModules(Collection<string> modules)
	{
		Vector<string> res = new Vector(null);
		Map<string> cache = new Map(null);
		static::_getRequiredModules(res, cache, modules);
		res = res.removeDublicatesIm(null);
		return res.toCollection(null);
	}
	
	
	
	/**
	 * Returns modules entities
	 */
	lambda Collection<CoreStruct> @getModulesEntities(Collection<string> modules)
	{
		Vector<CoreStruct> entities = new Vector(null);
		for (int i=0; i<modules.count(null); i++)
		{
			string module_class_name = modules.item(null, i) ~ ".ModuleDescription";
			fn f = rtl::method(null, module_class_name, "entities");
			Collection<CoreStruct> arr = f(null);
			entities.appendVector(null, arr);
		}
		return entities.toCollection(null);
	}
	
	
	
	/**
	 * Extend entities
	 */
	lambda Collection<CoreStruct> @extendEntities(Collection<CoreStruct> entities, Context ctx)
	{
		Vector<CoreStruct> e = entities.toVector(ctx);
		for (int i=0; i<entities.count(ctx); i++)
		{
			CoreStruct item1 = entities.item(ctx, i);
			string item1_class_name = item1.getClassName();
			if (item1_class_name == "Runtime.Annotations.Entity")
			{
				string class_name = (item1.value != "") ? item1.value : item1.name;
				IntrospectionClass info = RuntimeUtils::getClassIntrospection(ctx, class_name);
				if (info != null and info.class_info)
				{
					for (int j=0; j<info.class_info.count(ctx); j++)
					{
						CoreStruct item2 = info.class_info.item(ctx, j);
						string item2_class_name = item2.getClassName();
						if (item2 instanceof Entity and item2_class_name != "Runtime.Annotations.Entity")
						{
							item2 = item2.copy(ctx, { "name": class_name });
							e.push(ctx, item2);
						}
					}
				}
			}	
		}
		return e.toCollection(ctx);
	}
	
	
	
	/**
	 * Init context
	 */
	lambda void @init(Context ctx)
	{
		if (ctx.initialized) return ctx;
		
		Collection<CoreStruct> entities = ctx.entities;
		
		/* Extend entities */
		entities = static::extendEntities(entities, ctx);
		entities = static::chain("Runtime.Entities", [ ctx, entities ], ctx);
		
		/* Get providers */
		Dict<CoreStruct> providers = static::getProvidersFromEntities(ctx);
		
		/* Register drivers */
		Dict<CoreDriver> drivers = static::getDriversFromEntities(ctx);
		
		return ctx.copy(ctx, {
			"entities": entities,
			"providers": providers,
			"drivers": drivers,
			"initialized": true,
		});
	}
	
	
	
	/**
	 * Start context
	 */
	static async Context @start(Context ctx)
	{
		if (ctx.started) return ctx;
		Collection<string> drivers = ctx.drivers.keys(ctx);
		for (int i=0; i<drivers.count(ctx); i++)
		{
			string driver_name = drivers.item(ctx, i);
			CoreDriver driver = ctx.drivers.item(ctx, driver_name);
			await driver.startDriver(ctx);
		}
		
		return ctx.copy(ctx, {"started": true});
	}	
	
	
	
	
	/**
	 * Returns providers from entities
	 */
	lambda Dict<CoreStruct> @getProvidersFromEntities(Context ctx)
	{
		Collection<CoreStruct> arr = ctx.entities.filter
		(
			ctx,
			bool (CoreStruct item) => item instanceof Provider
		);
		Map<CoreStruct> providers = new Map(ctx);
		for (int i=0; i<arr.count(ctx); i++)
		{
			Provider item = arr.item(ctx, i);
			providers.set(ctx, item.name, item);
		}
		return providers.toDict(ctx);
	}
	
	
	
	/**
	 * Register drivers
	 */
	lambda Dict<Driver> @getDriversFromEntities(Context ctx)
	{
		Collection<CoreStruct> arr = ctx.entities.filter
		(
			ctx,
			bool (CoreStruct item) => item instanceof Driver
		);
		Map<CoreStruct> drivers = new Map(ctx);
		for (int i=0; i<arr.count(ctx); i++)
		{
			Driver item = arr.item(ctx, i);
			
			string driver_name = item.name;
			string class_name = item.value;
			if (class_name == "") class_name = item.name;
			
			CoreDriver driver = rtl::newInstance(ctx, class_name, []);
			driver = static::chain(class_name, [driver], ctx);
			if (class_name != driver_name)
			{
				driver = static::chain(driver_name, [driver], ctx);
			}
			
			drivers.set(ctx, item.name, driver);
		}
		
		return drivers.toDict(ctx);
	}
	
	
	
	/* ---------------------- Driver -------------------- */
	
	/**
	 * Get driver
	 *
	 * @params string driver_name
	 * @return Runtime.anager
	 */
	lambda CoreDriver @getDriver(string driver_name, Context ctx)
	{
		if (ctx.drivers.has(ctx, driver_name))
		{
			return ctx.drivers.item(ctx, driver_name);
		}
		
		return null;
	}
	
	
	
	/* --------------------- Provider ------------------- */
	
	/**
	 * Create provider
	 *
	 * @params string provider_name
	 * @return CoreProvider
	 */
	lambda CoreStruct @createProvider(string provider_name, Dict params, string settings_name, Context ctx)
	{
		CoreProvider provider = null;
		if (ctx.providers.has(ctx, provider_name))
		{
			Provider info = ctx.providers.item(ctx, provider_name);
			if (info.kind == "interface")
			{
				throw new RuntimeException(ctx, "Provider " ~ provider_name ~ " does not declared");
			}
			string class_name = info.value;
			if (class_name == "") class_name = info.name;
			
			/* Set default params */
			if (params == null)
			{
				params = rtl::attr(ctx, ctx.settings, ["providers", class_name, settings_name]);
			}
			if (params == null) params = {};
			
			provider = rtl::newInstance(ctx, class_name, [params]);
			provider = static::chain(class_name, [provider], ctx);
			if (provider_name != class_name)
			{
				provider = static::chain(provider_name, [provider], ctx);
			}
		}
		else
		{
			throw new RuntimeException(ctx, "Provider " ~ provider_name ~ " not found");
		}
		
		return provider;
	}
	
	
	
	/**
	 * Returns provider
	 *
	 * @params string provider_name
	 * @return CoreProvider
	 */
	lambda memorize CoreProvider @getProvider(string provider_name, string settings_name, Context ctx)
	{
		CoreProvider provider = static::createProvider(provider_name, null, settings_name, ctx);
		return provider;
	}
	
	
	
	/* ---------------------- Chain --------------------- */
	
	/**
	 * Apply Lambda Chain
	 */
	lambda CoreStruct @chain(string chain_name, Dict args, Context ctx)
	{
		Collection<CoreStruct> entities = ctx.entities.filter
		(
			ctx,
			bool (CoreStruct item) use (chain_name) => 
				item instanceof LambdaChain and 
				item.name == chain_name and 
				item.is_async == false
		);
		entities = entities.sortIm
		(
			ctx,
			int @(LambdaChain a, LambdaChain b) => a.pos > b.pos
		);
		
		for (int i=0; i<entities.count(ctx); i++)
		{
			LambdaChain item = entities.item(ctx, i);
			string item_chain_name = item.chain;
			if (item_chain_name != "")
			{
				var res = static::chain(item_chain_name, args, ctx);
				args = args.setIm(ctx, args.count(ctx) - 1, res);
			}
			else
			{
				Collection arr = rs::split(ctx, "::", item.value);
				string class_name = arr.get(ctx, 0, "");
				string method_name = arr.get(ctx, 1, "");
				fn f = rtl::method(ctx, class_name, method_name);
				var res = rtl::apply(ctx, f, args);
				args = args.setIm(ctx, args.count(ctx) - 1, res);
			}
		}
		var res = args.last(ctx);
		return res;
	}
	
	
	
	/**
	 * Apply Lambda Chain Await
	 */
	static async CoreStruct @chainAwait(string chain_name, Dict args, Context ctx)
	{
		Collection<CoreStruct> entities = ctx.entities.filter
		(
			ctx,
			bool (CoreStruct item) use (chain_name) => 
				item instanceof LambdaChain and 
				item.name == chain_name
		);
		entities = entities.sortIm
		(
			ctx,
			int @(LambdaChain a, LambdaChain b) => a.pos > b.pos
		);
		
		for (int i=0; i<entities.count(ctx); i++)
		{
			LambdaChain item = entities.item(ctx, i);
			string item_chain_name = item.chain;
			if (item_chain_name != "")
			{
				var res = await static::chainAwait(item_chain_name, args, ctx);
				args = args.setIm(ctx, args.count(ctx) - 1, res);
			}
			else
			{
				Collection arr = rs::split(ctx, "::", item.value);
				string class_name = arr.get(ctx, 0, "");
				string method_name = arr.get(ctx, 1, "");
				fn f = rtl::method(ctx, class_name, method_name);
				
				if (item.is_async)
				{
					var res = await rtl::apply(ctx, f, args);
					args = args.setIm(ctx, args.count(ctx) - 1, res);
				}
				else
				{
					var res = rtl::apply(ctx, f, args);
					args = args.setIm(ctx, args.count(ctx) - 1, res);
				}
			}
		}
		var res = args.last(ctx);
		return res;
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params string space - message space
	 * @params Map params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string @translate(string message, string space, Map params = null, string locale = "")
	{
		return message;
	}
	
	
	
	/* ----------------------- Bus ---------------------- */
	
	/**
	 * Send message
	 * @param Message msg
	 * @param Context ctx
	 * @return Message
	 */ 
	static async Message @sendMessage(Message msg, Context ctx)
	{
		BusInterface provider = static::getProvider(RuntimeConstant::BUS_INTERFACE, "default", ctx);
		msg = await provider->sendMessage(ctx, msg);
		return msg;
	}
	
	
	
	/* ---------------------- Logs ---------------------- */
	
	/**
	 * Log message
	 * @param string message
	 * @param int loglevel
	 */
	void @log(string message, int loglevel = 0)
	{
		/*this.logs.push(message ~ "\n");*/
	}
	
	
	
	/**
	 * Dump var to log
	 * @param var v
	 * @param int loglevel
	 */
	void @dump(var v, int loglevel = 0)
	{
		#switch
		#case ifcode PHP then
		ob_start();
		var_dump($v);
		$content = ob_get_contents();
		ob_end_clean();
		/*$this->logs->push($content);*/
		#endswitch
	}
	
	
	
	/**
	 * Append logs message
	 * @param Collection<string> logs
	 */
	void @logAppend(Collection<string> logs)
	{
		/*this.logs.appendVector(logs);*/
	}
	
	
	
	/**
	 * Return logs
	 */
	Collection<string> @getLogs()
	{
		/*return this.logs.toCollection();*/
		return [];
	}
	
	
	
	/* ---------------------- Tags ---------------------- */
	
	/**
	 * Set tag
	 */
	Context @setTagIm(string tag_name, var value)
	{
		return this.copy({ "tags": this._tags.setIm(this, tag_name, value) });
	}
	
	
	
	/**
	 * Returns tag
	 */
	var @getTag(string tag_name)
	{
		return this._tags.get(this, tag_name, null);
	}
	
	
	
	/* ---------------------- Other --------------------- */
	
	/**
	 * Returns unix timestamp
	 */
	int @time()
	{
		#switch
		#case ifcode PHP then
		return time();
		#endswitch
	}
	
}