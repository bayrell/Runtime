/*!
 *  Bayrell Context
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;

use BayrellRtl.CoreObject;
use BayrellRtl.Interfaces.AssertInterface;
use BayrellRtl.Interfaces.ContextInterface;
use BayrellRtl.Interfaces.MapInterface;
use BayrellRtl.Providers.AssertProvider;


class Context implements ContextInterface{
	
	
	protected AssertInterface _assert = null;
	protected string _locale = "";
	
	
	void constructor(){
		#switch
		#case ifcode JAVASCRIPT then
		this._init();
		#endswitch
	}
	
	
	/**
	 * Set application locale
	 * @params string locale
	 */
	void setLocale(string locale){
		this._locale = locale;
	}
	
	
	
	/**
	 * Get application locale
	 * @params string locale
	 */
	string getLocale(){
		return this._locale;
	}
	
	
	
	/**
	 * Returns standart provider
	 *
	 * @params string provider_name
	 * @return CoreObject
	 */
	public CoreObject getProvider(string provider_name){
		return null;
	}
	
	
	
	/**
	 * Returns global provider
	 *
	 * @params string provider_name
	 * @return CoreObject
	 */
	public CoreObject getGlobalProvider(string provider_name){
		return null;
	}
	
	
	
	/**
	 * Returns temporary provider
	 *
	 * @params string provider_name
	 * @return CoreObject
	 */
	public CoreObject getTemporaryProvider(string provider_name){
		return null;
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, MapInterface params = null, string locale = ""){
		return message;
	}
	
	
	
	/**
	 * Returns assert provider
	 */
	public AssertInterface assert(){
		if (this._assert == null)
			this._assert = new AssertProvider(this);
		return this._assert;
	}

}