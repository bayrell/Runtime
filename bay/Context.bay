/*!
 *  Bayrell Runtime Library.
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellRtl;

use BayrellRtl.Lib.rtl;
use BayrellRtl.CoreObject;
use BayrellRtl.ContextObject;
use BayrellRtl.Types.Map;
use BayrellRtl.Types.Vector;
use BayrellRtl.Interfaces.AssertInterface;
use BayrellRtl.Interfaces.ContextInterface;
use BayrellRtl.Interfaces.FactoryInterface;
use BayrellRtl.Interfaces.MapInterface;
use BayrellRtl.Interfaces.ModuleDescriptionInterface;
use BayrellRtl.Descriptions.ModuleRequireDescription;
use BayrellRtl.Descriptions.ProviderDescription;
use BayrellRtl.Descriptions.ProviderFactoryDescription;
use BayrellRtl.Providers.AssertProvider;


class Context extends CoreObject implements ContextInterface{
	
	
	protected AssertInterface _assert = null;
	protected string _locale = "";
	protected Vector<string> _modules = null;
	protected Map<string, string> _providers_classes_names = null;
	protected Map<string, string> _providers_factory_classes_names = null;
	protected Map<string, ContextObject> _current_providers = null;
	
	
	
	/**
	 * Constructor
	 */
	void constructor(){
		parent();
		this._modules = new Vector<string>();
		this._providers_classes_names = new Map<string, string>();
		this._providers_factory_classes_names = new Map<string, string>();
		this._current_providers = new Map<string, ContextObject>();
	}
	
	
	
	/**
	 * Destructor
	 */
	public void destructor(){
		delete this._current_providers;
		delete this._providers_classes_names;
		delete this._modules;
		parent::destructor();
	}
	
	
	
	/**
	 * Returns registed modules
	 * @return Vector<string>
	 */
	Vector<string> getModules(){
		return clone this._modules;
	}
	
	
	
	/**
	 * Register module
	 */
	void registerModule(string module_name){
		
		string module_description_class_name = module_name ~ ".ModuleDescription";
		
		if (this._modules.indexOf(module_description_class_name) != -1)
			return;
	
		this._modules.push(module_description_class_name);
		
		Vector<ProviderDescription> providers = rtl.callStaticMethod(
			module_description_class_name, 
			"getProviders"
		);
		
		if (providers != null){
			int sz = providers.count();
			for (int i=0; i<sz; i++){
				ProviderDescription provider = providers.item(i);
				string provider_name = provider.getProviderName();
				string class_name = provider.getClassName();
				
				if (provider instanceof ProviderFactoryDescription){
					if (!this._providers_factory_classes_names.has(provider_name)){
						this._providers_factory_classes_names.set(provider_name, class_name);
					}
				}
				else{
					if (!this._providers_classes_names.has(provider_name)){
						this._providers_classes_names.set(provider_name, class_name);
					}
				}
			}
			
			delete providers;
		}
		
		
		Vector<ModuleRequireDescription> modules = rtl.callStaticMethod(
			module_description_class_name, 
			"getRequiredModules"
		);
		
		if (modules != null){
			int sz = modules.count();
			for (int i=0; i<sz; i++){
				ModuleRequireDescription m = modules[i];
				string module_name_required = m.getModuleName();
				this.registerModule(module_name_required);
			}
			delete modules;
		}
	}
	
	
	
	/**
	 * Init context
	 */
	void init(){
		Vector<var> args = new Vector();
		args.push(this);	
	
		int sz = this._modules.count();
		for (int i=0; i<sz; i++){
			string module_description_class_name = this._modules.item(i);
			rtl.callStaticMethod(
				module_description_class_name, 
				"initContext",
				args
			);
		}
		
		delete args;
	}
	
	
	
	/**
	 * Returns class name of the provider. If provider does not exists returns empty string.
	 * @param string provider_name
	 * @return string 
	 */
	public string getProviderClassName(string provider_name){
		if (!this._providers_classes_names.has(provider_name))
			return "";
		
		return this._providers_classes_names.item(provider_name);
	}
	
	
	
	/**
	 * Returns class name of the provider factory. If provider factory does not exists returns empty string.
	 * @param string provider_name
	 * @return string 
	 */
	public string getProviderFactoryClassName(string provider_name){
		if (!this._providers_factory_classes_names.has(provider_name))
			return "";
		
		return this._providers_factory_classes_names.item(provider_name);
	}
	
	
	
	/**
	 * Returns global provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getGlobalProvider(string provider_name){
		Context context = ContextObject::globalContext();
		if (context == null)
			throw new UnknownError('Global context is null');
		return context.getContextProvider(provider_name);
	}
	
	
	
	/**
	 * Returns standart provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getContextProvider(string provider_name){
		if (this._current_providers.has(provider_name))
			return this._current_providers.item(provider_name);
		
		ContextObject obj = this.getTemporaryProvider(provider_name);
		if (obj == null)
			return null;
			
		this._current_providers.push(provider_name, obj);
		return obj;
	}
	
	
	
	/**
	 * Returns temporary provider
	 *
	 * @params string provider_name
	 * @return ContextObject
	 */
	public ContextObject getTemporaryProvider(string provider_name){
		
		if (this._providers_classes_names.has(provider_name)){
			string class_name = this._providers_classes_names.item(provider_name);
			Vector<var> args = new Vector();
			args.push(this);
			
			ContextObject obj = rtl::Instance(class_name, args);
			delete args;
			
			return obj;
		}
		
		if (this._providers_factory_classes_names.has(provider_name)){
			string class_name = this._providers_factory_classes_names.item(provider_name);
			
			ContextObject obj = null;
			Vector<var> args = new Vector();
			args.push(this);
			
			ContextObject factory_obj = rtl::Instance(class_name, args);
			delete args;
			
			if (factory_obj implements FactoryInterface){
				obj = factory_obj.newInstance();
			}
			delete factory_obj;
			
			return obj;
		}
		
		return null;
	}

	
	
	/**
	 * Set application locale
	 * @params string locale
	 */
	void setLocale(string locale){
		this._locale = locale;
	}
	
	
	
	/**
	 * Get application locale
	 * @params string locale
	 */
	string getLocale(){
		return this._locale;
	}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	string translate(string message, MapInterface params = null, string locale = ""){
		return message;
	}
	
	
	
	/**
	 * Returns assert provider
	 */
	public AssertInterface assert(){
		return this.getContextProvider('default.assert');
	}

}