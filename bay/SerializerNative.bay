/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.Serializer;


class SerializerNative extends Serializer
{
	/**
	 * Decode item
	 */
	void decodeItem(var value, var object_value = null, fn create = null)
	{
		if (value === null) return null;
		if (value instanceof BaseObject) return value;
		
		#switch
		#case ifcode PHP then
		
		if (is_object($value) || is_array($value))
		{
			$class_name = null;
			if (is_object($value))
				if (property_exists($value, "__class_name__"))
					$class_name = $value->__class_name__;
			if (is_array($value))
				if (isset($value["__class_name__"]))
					$class_name = $value["__class_name__"];
			
			if (is_array($value) && $class_name == null)
			{
				$value = array_values($value);
				$value = \Runtime\Vector::from($value);
			}
			else
			{
				$value = \Runtime\Map::from($value);
			}
		}
		
		#case ifcode JAVASCRIPT then
		
		/* Is native array */
		if (Array.isArray(value))
		{
			var _Vector = use("Runtime.Vector");
			value = _Vector.from(value);
		}
		
		else if (typeof value == 'object')
		{
			var _Map = use("Runtime.Map");
			value = _Map.from(value);
		}
		
		#endswitch
		
		value = parent(value, object_value, create);
		
		return value;
	}
	
	
	/**
	 * Encode item
	 */
	var encodeItem(var encode_value)
	{
		if (encode_value === null) return null;
		
		var value = parent(encode_value);
		
		if (value instanceof Collection)
		{
			#switch
			#case ifcode PHP then
			return $value->jsonSerialize();
			#case ifcode JAVASCRIPT then
			return value.toArray();
			#endswitch
		}
		
		if (value instanceof Dict)
		{
			#switch
			#case ifcode PHP then
			$map = $value->jsonSerialize();
			return (object)$map;
			#case ifcode JAVASCRIPT then
			return value.toObject();
			#endswitch
		}
		
		return value;
	}
}