/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.Dict;
use Runtime.Map;
use Runtime.rtl;
use Runtime.RuntimeUtils;
use Runtime.Vector;
use Runtime.SerializeInterface;


class BaseStruct extends BaseObject implements SerializeInterface
{	
	
	/** 
	 * Constructor
	 */
	public void constructor(Dict obj = null)
	{
		parent();
		
		static::_assign(this, null, obj);
		
		#switch
		#case ifcode JAVASCRIPT then
		if (this.__uq__ == undefined || this.__uq__ == null) this.__uq__ = Symbol();
		Object.freeze(this);
		#endswitch
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return BaseStruct
	 */
	public BaseStruct copy(Dict obj = null)
	{
		if (obj == null) return this;
		
		#switch
		#case ifcode PHP then
		
		$item = clone $this;		
		static::_assign($ctx, $item, $this, $obj);
		return $item;
		
		#case ifcode JAVASCRIPT then
		
		var proto = Object.getPrototypeOf(this);
		var item = Object.create(proto); /* item._init(); */
		item = Object.assign(item, this);
		
		this.constructor._assign(ctx, item, this, obj);
		
		Object.freeze(item);
		
		return item;
		
		#endswitch
		
		return this;
	}
	
	
	
	/**
	 * Copy this struct with new values
	 * @param Map obj = null
	 * @return BaseStruct
	 */
	public BaseStruct clone(Dict obj = null)
	{
		return this.copy(obj);
	}
	
	
	
	/**
	 * Clone this struct with fields
	 * @param Collection fields = null
	 * @return BaseStruct
	 */
	public BaseStruct intersect(Collection fields = null)
	{
		if (fields == null) return {};
		
		Map obj = new Map();
		for (int i=0; i<fields.count(); i++)
		{
			string field_name = fields[i];
			obj.setValue(field_name, this.get(field_name));
		}
		
		/* Return object */
		BaseStruct res = rtl::newInstance( this.getClassName(), [ obj.toDict() ] );
		return res;
	}
	
	
	
	/**
	 * Returns new instance
	 */
	pure BaseStruct newInstance(Dict items)
	{
		#switch
		#case ifcode JAVASCRIPT then
		return new (
			Function.prototype.bind.apply(
				this,
				(typeof ctx != "undefined") ? [null, ctx, items] : [null, items]
			)
		);
		#case ifcode PHP then
		$class_name = static::class;
		return new $class_name($ctx, $items);
		#endswitch
	}
	
	
	
	/**
	 * Update struct
	 * @param Collection<string> path
	 * @param var value
	 * @return BaseStruct
	 */
	pure BaseStruct set(BaseStruct item, Collection<string> path, var value) =>
		rtl::setAttr(item, path, value)
	;
	
	
	
	/**
	 * Returns struct as Dict
	 * @return Dict
	 */
	Dict toDict()
	{
		Map<var> values = new Map();
		Collection<string> names = rtl::getFields(this.getClassName());
		
		for (int i=0; i<names.count(); i++)
		{
			string variable_name = names.item(i);
			var value = this.get(variable_name, null);
			values.setValue(variable_name, value);
		}
		
		delete names;
		return values.toDict();
	}
	
	
	
	#switch
	#case ifcode PHP then
	function get($ctx,$k,$v = nul){$k="__".$k;return isset($_this->$k)?$_this->$k:$v;}
	function __get($k){$k="__".$k;return isset($this->$k)?$this->$k:null;}
	function __getKey($k){return "__".$k;}
	function __set($k,$v){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	function offsetExists($k){$k="__".$k;return isset($this->$k);}
	function offsetGet($k){$k="__".$k;return isset($this->$k)?$this->$k:null;}
	function offsetSet($k,$v){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	function offsetUnset($k){throw new \Runtime\Exceptions\AssignStructValueError(null, $k);}
	#endswitch
	
}

#ifcode JAVASCRIPT then
Runtime.BaseStruct.prototype.get = function(ctx, k, v)
{
	if (v == undefined) v = null;
	return this[k] != undefined ? this[k] : v;
};
#endif