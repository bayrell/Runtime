/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rs;
use Runtime.rtl;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.FactoryInterface;
use Runtime.Vector;
use Runtime.Map;


export class Utils{
	
	
	protected static var _global_context = null;
	
	
	/**
	 * Returns global context
	 * @return ContextInterface
	 */
	public static ContextInterface globalContext(){
		#switch
		#case ifcode PHP then
		return self::$_global_context;
		#case ifcode JAVASCRIPT then
		if (isBrowser()) return BayrellRtl.Lib.rtl._global_context;
		return rtl._global_context;
		#endswitch
	}
	
	
	
	/**
	 * Set global context
	 * @param ContextInterface context
	 */
	public static ContextInterface setGlobalContext(ContextInterface context){
		#switch
		#case ifcode PHP then
		self::$_global_context = $context;
		#case ifcode JAVASCRIPT then
		if (isBrowser()) BayrellRtl.Lib.rtl._global_context = context;
		else rtl._global_context = context;
		#endswitch
		return context;
	}
	
	
	
	/**
	 * Returns global context
	 * @param Context context
	 */
	public static ContextInterface getGlobalContext(){
		return self::globalContext();
	}
	
	
	/**
	 * Register global Context
	 */
	public ContextInterface createContext(Vector<string> modules){
		
		ContextInterface context = new Context();
		modules.each(void (string module) use (context){
			context.registerModule(module);
		});
		
		return context;
	}
	
	
	
	/**
	 * Register global Context
	 */
	public ContextInterface registerGlobalContext(Vector<string> modules){
		ContextInterface context = self::createContext(modules);
		self::setGlobalContext(context);
		return context;
	}
	
	
	
	/**
	 * Returns true if value is primitive value
	 * @return boolean 
	 */
	public static bool isPrimitiveValue(var value){
		if (rtl::isScalarValue(value)) return true;
		if (value instanceof Vector) return true;
		if (value instanceof Map) return true;
		return false;
	}
	
	
	
	/**
	 * Convert bytes to string
	 * @param Vector<byte> arr - vector of the bytes
	 * @string charset - charset of the bytes vector. Default utf8
	 * @return string
	 */
	public string bytesToString(Vector<byte> arr, string charset="utf8"){}
	
	
	
	/**
	 * Convert string to bytes
	 * @param string s - incoming string
	 * @param Vector<byte> arr - output vector
	 * @param charset - Result bytes charset. Default utf8
	 */
	public void stringToBytes(string s, Vector<byte> arr, string charset="utf8"){}
	
}