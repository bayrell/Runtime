/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.Context;
use Runtime.Map;
use Runtime.rs;
use Runtime.rtl;
use Runtime.Vector;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.FactoryInterface;
use Runtime.Interfaces.SerializeInterface;


#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


export class Utils{
	
	
	protected static var _global_context = null;
	
	
	/**
	 * Returns global context
	 * @return ContextInterface
	 */
	public static ContextInterface globalContext(){
		#switch
		#case ifcode PHP then
		return self::$_global_context;
		#case ifcode JAVASCRIPT then
		if (isBrowser()) return Runtime.Utils._global_context;
		return Utils._global_context;
		#endswitch
	}
	
	
	
	/**
	 * Set global context
	 * @param ContextInterface context
	 */
	public static ContextInterface setGlobalContext(ContextInterface context){
		#switch
		#case ifcode PHP then
		self::$_global_context = $context;
		#case ifcode JAVASCRIPT then
		if (isBrowser()) Runtime.Utils._global_context = context;
		else Utils._global_context = context;
		#endswitch
		return context;
	}
	
	
	
	/**
	 * Returns global context
	 * @param Context context
	 */
	public static ContextInterface getGlobalContext(){
		return self::globalContext();
	}
	
	
	/**
	 * Register global Context
	 */
	public static ContextInterface createContext(Vector<string> modules = null){
		
		ContextInterface context = new Context();
		if (modules != null){
			modules.each(void (string module) use (context){
				context.registerModule(module);
			});
		}
		
		return context;
	}
	
	
	
	/**
	 * Register global Context
	 */
	public static ContextInterface registerGlobalContext(Vector<string> modules = null){
		ContextInterface context = self::createContext(modules);
		self::setGlobalContext(context);
		return context;
	}
	
	
	
	/**
	 * Returns parents class names
	 * @return Vector<string>
	 */
	public static Vector<string> getParents(string class_name){
		Vector<string> res = new Vector();
		
		while (class_name != ""){
			class_name = rtl::callStaticMethod(class_name, "getParentClassName");
			if (class_name != ""){
				res.push(class_name);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Returns true if value is primitive value
	 * @return boolean 
	 */
	public static bool isPrimitiveValue(var value){
		if (rtl::isScalarValue(value)) return true;
		if (value instanceof Vector) return true;
		if (value instanceof Map) return true;
		return false;
	}
	
	
	
	/**
	 * Get value from object
	 */
	static mixed get(mixed obj, string key, mixed default_value = null){
		if (obj instanceof Vector){
			return obj.get(key, default_value);
		}
		if (obj instanceof Map){
			return obj.get(key, default_value);
		}
		
		#switch
		#case ifcode JAVASCRIPT then
		if (typeof obj == 'object'){
			if (typeof obj[key] != undefined) 
				return obj[key];
		}
		#endswitch
		
		return default_value;
	}
	
	
	
	/**
	 * Set value to object
	 */
	static mixed set(mixed obj, string key, mixed value = null){
		if (obj instanceof Vector){
			obj.set(key, value);
		}
		if (obj instanceof Map){
			obj.set(key, value);
		}
		
		#switch
		#case ifcode JAVASCRIPT then
		if (typeof obj == 'object'){
			obj[key] = value;
		}
		#endswitch
	}
	
	
	
	/**
	 * Call each
	 */
	static mixed each(mixed obj, func f){
		if (obj instanceof Vector){
			obj.each(f);
		}
		if (obj instanceof Map){
			obj.each(f);
		}
	}
	
	
	/**
	 * Convert bytes to string
	 * @param Vector<byte> arr - vector of the bytes
	 * @string charset - charset of the bytes vector. Default utf8
	 * @return string
	 */
	public string bytesToString(Vector<byte> arr, string charset="utf8"){}
	
	
	
	/**
	 * Convert string to bytes
	 * @param string s - incoming string
	 * @param Vector<byte> arr - output vector
	 * @param charset - Result bytes charset. Default utf8
	 */
	public void stringToBytes(string s, Vector<byte> arr, string charset="utf8"){}
	
	
	
	/**
	 * Translate message
	 * @params string message - message need to be translated
	 * @params MapInterface params - Messages params. Default null.
	 * @params string locale - Different locale. Default "".
	 * @return string - translated string
	 */
	public static string translate(string message, MapInterface params = null, string locale = "", 
	Object context = null){
			
		if (context == null) context = self::globalContext();
		if (context != null) {
			Vector<var> args = (new Vector<var>())
				.push(message)
				.push(params)
				.push(locale)
			;
			return rtl::callMethod(
				context,
				"translate",
				args
			);
		}	
		return message;
	}
	
	
	
	
	/**
	 * Returns object to primitive value
	 * @param mixed obj
	 * @return mixed
	 */
	public static mixed ObjectToPrimitive(mixed obj){
	
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		if (obj instanceof Vector){
			return obj.map(mixed (mixed value){
				return self::ObjectToPrimitive( value );
			});
		}
		if (obj instanceof Map){
			return obj.map(mixed (string key, mixed value){
				return self::ObjectToPrimitive( value );
			});
		}
		if (obj implements SerializeInterface){
			
			Vector<string> names = new Vector();
			Map<string, mixed> values = new Map();
			obj.getVariablesNames(names);
			
			names.each(void (string variable_name) use (values, obj){
				var value = obj.takeValue(variable_name, null);
				var value = self::ObjectToPrimitive( value );
				values.set(variable_name, value);
			});
			
			values.set("__class_name__", obj.getClassName());
			
			return values;
		}
		
		return null;
	}
	
	
	
	/**
	 * Returns object to primitive value
	 * @param SerializeContainer container
	 * @return mixed
	 */
	public static mixed PrimitiveToObject(mixed obj, ContextInterface context = null){
		
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		if (context == null) context = self::globalContext();
		
		if (obj instanceof Vector){
			return obj.map(mixed (mixed value) use (context){
				return self::PrimitiveToObject( value, context );
			});
		}
		
		if (obj instanceof Map){
			
			obj = obj.map(mixed (string key, mixed value) use (context){
				return self::PrimitiveToObject( value, context );
			});
			
			if ( !obj.has("__class_name__") ) 
				return obj;
			
			string class_name = obj.item("__class_name__");
			if (not rtl::class_exists(class_name)){
				return null;
			}
			if (not rtl::method_exists(class_name, "createNewInstanceFromValues")){
				return null;
			}
			
			Vector<string> names = new Vector();
			SerializeInterface instance = rtl::callStaticMethod(
				class_name, 
				"createNewInstanceFromValues", 
				[context, obj]
			);
			
			instance.getVariablesNames(names);
			names.each(void (string variable_name) use (instance, obj){
				if (variable_name == "__class_name__") 
					return;
				var value = obj.get(variable_name, null);
				instance.assignValue(variable_name, value);
			});
			
			return instance;
		}
		
		return null;
	}
	
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	declare export static string json_encode(mixed value, bool convert = true);

	#switch
	#case ifcode PHP then
	static function json_encode($value, $convert = true){
		if ($convert){
			$value = self::ObjectToPrimitive($value);
		}
		return json_encode($value, JSON_UNESCAPED_UNICODE);
	}
	#case ifcode JAVASCRIPT then
	static json_encode(value, convert){
		if (convert == undefined) convert = true;
		var _Utils=null;if (isBrowser()) _Utils=Runtime.Utils; else _Utils=Utils;
		var _Vector=null;if (isBrowser()) _Vector=Runtime.Vector; else _Vector=Vector;
		var _Map=null;if (isBrowser()) _Map=Runtime.Map; else _Map=Map;
		var _rtl=null;if (isBrowser()) _rtl=Runtime.rtl; else _rtl=rtl;
		if (convert) value = _Utils.ObjectToPrimitive(value);
		return JSON.stringify(value, function (key, value){
			if (_rtl.isScalarValue(value)) return value;
			if (value instanceof _Vector) return value;
			if (value instanceof _Map) return value.toObject();
			return undefined;
		});
	}
	#endswitch
	
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return mixed 
	 */
	declare export static mixed json_decode(string s, ContextInterface context = null);

	#switch
	#case ifcode PHP then
	static function json_decode($obj){
		$res = @json_decode($obj, true);
		if (!$res)
			return null;
		return self::NativeToPrimitive($res);
	}
	#case ifcode JAVASCRIPT then
	static json_decode(s, context){
		if (context == undefined) context = null;
		try{
			var _Utils=null;if (isBrowser()) _Utils=Runtime.Utils; else _Utils=Utils;
			var _Vector=null;if (isBrowser()) _Vector=Runtime.Vector; else _Vector=Vector;
			var _Map=null;if (isBrowser()) _Map=Runtime.Map; else _Map=Map;			
			var obj = JSON.parse(s, function (key, value){
				if (Array.isArray(value)){
					return new _Vector(value);
				}
				if (typeof value == 'object'){
					return new _Map(value);
				}
				
				return value;
			});
			return _Utils.PrimitiveToObject(context, obj);
		}
		catch(e){
			return null;
		}
	}
	#endswitch
	
	
	
	#switch
	#case ifcode PHP then
	
	static function NativeToPrimitive($value){
		if ($value === null)
			return null;
			
		if (is_array($value)){
			$is_vector = false;
			if (!isset($value['__class_name__'])){
				$pos = 0;
				$is_vector = true;
				foreach ($value as $key => &$val){
					if ($key != $pos){
						$is_vector = false;
						break;
					}
					$pos++;
				}
			}
			if ($is_vector){
				$arr = array_values($value);
				$res = (new \Runtime\Vector())->_assignArr($arr);
				$res = $res->map(function ($item){
					return self::NativeToPrimitive($item);
				});
				return $res;
			}
			else{
				$res = new \Runtime\Map($value);
				$res = $res->map(function ($key, $val){
					return self::NativeToPrimitive($val);
				});
				return $res;
			}
		}
		
		return $value;
	}
	
	#case ifcode JAVASCRIPT then
	static NativeToPrimitive(value){
		
		var _rtl = null; if (isBrowser()) _rtl=Runtime.rtl; else _rtl=rtl;
		var _Utils = null; if (isBrowser()) _Utils=Runtime.Utils; else _Utils=Utils;
		var _Vector=null; if (isBrowser()) _Vector=Runtime.Vector; else _Vector=Vector;
		var _Map=null; if (isBrowser()) _Map=Runtime.Map; else _Map=Map;
		
		if (value === null)
			return null;
		
		if (Array.isArray(value)){
			var new_value = (new _Vector()).concat(value);
			new_value = new_value.map((val)=>{
				return _Utils.NativeToPrimitive(val);
			});
			return new_value;
		}
		if (typeof value == 'object'){
			var new_value = new _Map(value);
			new_value = new_value.map((key, val)=>{
				return _Utils.NativeToPrimitive(val);
			});
			return new_value;
		}
		
		return value;
	}
	static PrimitiveToNative(value){
		
		var _rtl = null; if (isBrowser()) _rtl=Runtime.rtl; else _rtl=rtl;
		var _Utils = null; if (isBrowser()) _Utils=Runtime.Utils; else _Utils=Utils;
		var _Vector=null; if (isBrowser()) _Vector=Runtime.Vector; else _Vector=Vector;
		var _Map=null; if (isBrowser()) _Map=Runtime.Map; else _Map=Map;
		
		if (value === null)
			return null;
		
		if (value instanceof _Vector){
			var arr = [];
			value.each((v)=>{
				arr.push( _Utils.PrimitiveToNative(v) );
			});
			return arr;
		}
		if (value instanceof _Map){
			var obj = {};
			value.each((k, v)=>{
				obj[k] = _Utils.PrimitiveToNative(v);
			});
			return obj;
		}
		
		return value;
	}
	static ObjectToNative(value){
		var _Utils = null; if (isBrowser()) _Utils=Runtime.Utils; else _Utils=Utils;
		value = _Utils.ObjectToPrimitive(value);
		value = _Utils.PrimitiveToNative(value);
		return value;
	}
	#endswitch
}