/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.rtl;
use Runtime.PathInfo;
use Runtime.Vector;


#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


export class rs
{


	/**
	 * Returns string lenght
	 * @param string s The string
	 * @return int
	 */
	declare export static int strlen(string s);
	 
	#switch
	#case ifcode PHP then
	static function strlen($s)
	{
		if (gettype($s) != "string") return 0;
		return @mb_strlen($s);
	}
	#case ifcode JAVASCRIPT then
	static strlen(s){
		if (isBrowser())
			return Runtime.rtl.toString(s).length;
		return rtl.toString(s).length;
	}
	#endswitch
	
	
	
	/**
	 * Ищет позицию первого вхождения подстроки search в строке s.
	 * @param {string} s - строка, в которой производится поиск 
	 * @param {string} search - строка, которую ищем 
	 * @param {string} offset - если этот параметр указан, 
	 *                 то поиск будет начат с указанного количества символов с начала строки.  
	 * @return {variable} Если строка найдена, то возвращает позицию вхождения, начиная с 0.
	 *                    Если строка не найдена, то вернет -1
	 */
	declare export static int search(string s, string search, string offset = 0);

	#switch
	#case ifcode PHP then
	static function search($s, $search, $offset = 0){
		if ($search == ""){
			return -1;
		}
		$res = mb_strpos($s, $search, $offset);
		if ($res === false)
			return -1;
		return $res;
	}
	#case ifcode JAVASCRIPT then
	static search(s, search, offset){
		var _rtl; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		if (!_rtl.exists(offset)) offset = 0;
		var res = _rtl.toString(s).indexOf(search);
		return res;
	}
	#endswitch
	
	
	
	/**
	 * Returns substring
	 * @param string s The string
	 * @param int start
	 * @param int length
	 * @return string
	 */
	declare export static string substr(string s, int start, int length);
	 
	#switch
	#case ifcode PHP then
	static function substr(&$s, $start, $length = null){
		return mb_substr($s, $start, $length);
	}
	#case ifcode JAVASCRIPT then
	static substr(s, start, length){
		var _rtl = null; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		var _rs = null; if (isBrowser()) _rs = Runtime.rs; else _rs = rs;
		var end = start + length;
		if (length == undefined){
			return _rtl.toString(s).substring(start);
		}
		if (length < 0){
			var sz = _rs.strlen(s);
			end = sz + length;
		}
		return _rtl.toString(s).substring(start, end);
	}
	#endswitch
	
	
	
	
	/**
	 * Returns char from string at the position
	 * @param string s The string
	 * @param int pos The position
	 * @return string
	 */
	static string charAt(string s, int pos){
		int sz = static::strlen(s);
		if (pos >= 0 and pos < sz)
			return s[pos];
		return "";
	}
	
	
	
	/**
	 * Returns ASCII symbol code
	 * @param char ch
	 */
	declare export static int ord(char ch);

	#switch
	#case ifcode PHP then
	static function ord($s){	
		if ($s == "") return 0;
		$s1 = mb_convert_encoding($s, 'UCS-4LE', 'UTF-8');
		$result = @unpack('V', $s1);
		if ($result) return $result[1];
		/*return mb_ord($s);*/
		return 0;
	}
	#case ifcode JAVASCRIPT then
	static ord(s){
		if (isBrowser())
			return Runtime.rtl.toString(s).charCodeAt(0);
		return rtl.toString(s).charCodeAt(0);
	}
	#endswitch
	
	
	
	/**
	 * Convert string to lower case
	 * @param string s 
	 * @return string
	 */
	declare export static string strtolower(string s);

	#switch
	#case ifcode PHP then
	static function strtolower($s){
		return mb_strtolower($s);
	}
	#case ifcode JAVASCRIPT then
	static strtolower(s){
		if (isBrowser())
			return Runtime.rtl.toString(s).toLowerCase();
		return rtl.toString(s).toLowerCase();
	}
	#endswitch
	
	
	
	/**
	 * Convert string to upper case
	 * @param string s
	 * @return string
	 */
	declare export static string strtoupper(string s);

	#switch
	#case ifcode PHP then
	static function strtoupper($s){
		return mb_strtoupper($s);
	}
	#case ifcode JAVASCRIPT then
	static strtoupper(s){
		if (isBrowser())
			return Runtime.rtl.toString(s).toUpperCase();
		return rtl.toString(s).toUpperCase();
	}
	#endswitch
	
	
	
	/**
	 * Заменяет одну строку на другую
	 */
	declare export static int replace(string search, string item, string s);

	#switch
	#case ifcode PHP then
	static function replace($search, $item, $s)
	{
		return str_replace($search, $item, $s);
	}
	#case ifcode JAVASCRIPT then
	static replace(search, item, s){
		return s.replace(new RegExp(search, "g"), item);
	}
	#endswitch
	
	
	
	/**
	 * Возвращает повторяющуюся строку
	 * @param {string} s - повторяемая строка
	 * @param {integer} n - количество раз, которые нужно повторить строку s
	 * @return {string} строка
	 */
	declare export static string str_repeat(string s, int n);
	 
	#switch
	#case ifcode PHP then
	static function str_repeat($s, $n){
		if ($n <= 0) return "";
		return str_repeat($s, $n);
	}
	#case ifcode JAVASCRIPT then
	static str_repeat(s, n){
		if (n <= 0) return "";
		var res = '';
		for (var i=0; i < n; i++){
			res += s;
		}
		return res;
	}
	#endswitch
	
	
	
	/**
	 * Разбивает строку на подстроки
	 * @param string reg - regular expression
	 * @param string s - строка, которую нужно разбить
	 * @param integer limit - ограничение 
	 * @return Collection<string>
	 */
	declare lambda string split(string reg, string s, int limit = -1);
	
	#switch
	#case ifcode PHP then
	static function split($delimiter, $s, $limit = -1)
	{
		$arr = preg_split("/".$delimiter."/", $s, $limit);
		return Collection::create($arr);
	}
	#case ifcode JAVASCRIPT then
	static split(delimiter, s, limit)
	{
		var _rtl; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		var _Collection; if (isBrowser()) _Collection = Runtime.Collection; else _Collection = Collection;
		var arr = null;
		var delimiter = new RegExp(delimiter, "g");
		if (!_rtl.exists(limit))
		{
			arr = s.split(delimiter);
		}
		else
		{
			arr = s.split(delimiter, limit);
		}
		return _Collection.create(arr);
	}
	#endswitch
	
	
	
	/**
	 * Разбивает строку на подстроки
	 * @param string ch - разделитель
	 * @param string s - строка, которую нужно разбить
	 * @param integer limit - ограничение 
	 * @return Collection<string>
	 */
	declare lambda Collection<string> splitArr(Collection<string> delimiters, string s, int limit = -1);
	
	#switch
	#case ifcode PHP then
	static function splitArr($delimiters, $s, $limit = -1)
	{
		$pattern = "[".implode("", $delimiters->_getArr())."]";
		$pattern = str_replace("/", "\/", $pattern);
		$arr = preg_split("/".$pattern."/", $s, $limit);
		return Collection::create($arr);
	}
	#case ifcode JAVASCRIPT then
	static splitArr(delimiters, s, limit)
	{
		var _rtl; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		var _Collection; if (isBrowser()) _Collection = Runtime.Collection; else _Collection = Collection;
		var arr = null;
		var delimiter = new RegExp("[" + delimiters.join("") + "]", "g");
		if (!_rtl.exists(limit))
		{
			arr = s.split(delimiter);
		}
		else
		{
			arr = s.split(delimiter, limit);
		}
		return _Collection.create(arr);
	}
	#endswitch
	
	
	
	/**
	 * Разбивает строку на подстроки
	 * @param string ch - разделитель
	 * @param string s - строка, которую нужно разбить
	 * @param integer limit - ограничение 
	 * @return Vector<string>
	 */
	declare static string join(string ch, Vector<string> arr);
	 
	#switch
	#case ifcode PHP then
	static function join($s, $arr){
		return implode($s, $arr->_getArr());
	}
	#case ifcode JAVASCRIPT then
	static join(ch, arr){
		return arr.join(ch);
	}
	#endswitch
	
	
	
	/**
	 * Удаляет лишние символы слева и справа
	 * @param {string} s - входная строка
	 * @return {integer} новая строка
	 */
	declare export static string trim(string s, string ch = "");

	#switch
	#case ifcode PHP then
	static function trim($s, $ch=""){
		if ($ch=="")
			return trim($s);
		return trim($s, $ch);
	}
	#case ifcode JAVASCRIPT then
	static trim(s, ch){
		if (ch == undefined) ch = "";
		if (isBrowser()) s = Runtime.rtl.toString(s);
		else s = rtl.toString(s);
		if (ch == ""){
			return s.trim();
		}
		return s.replace(new RegExp("^[" + ch + "]+", "g"),"").replace(new RegExp("[" + ch + "]+$", "g"),"");
	}
	#endswitch
	
	
	
	/**
	 * json encode scalar values
	 * @param {mixed} obj - объект
	 * @param {int} flags - Флаги
	 * @return {string} json строка
	 */
	declare export static string json_encode(var s, int flags);

	#switch
	#case ifcode PHP then
	static function json_encode($s, $flags = 0){
		$flags = $flags || JSON_UNESCAPED_UNICODE;
		return json_encode($s, JSON_UNESCAPED_UNICODE);
	}
	#case ifcode JAVASCRIPT then
	static json_encode(obj, flags = 0){
		if (flags & 128 == 128) 
			return JSON.stringify(obj, null, 2);
		return JSON.stringify(obj);
	}
	#endswitch
	
	
	
	/**
	 * Escape HTML special chars
	 * @param string s
	 * @return string
	 */
	declare export static string htmlEscape(string s);

	#switch
	#case ifcode PHP then
	static function htmlEscape($s){
		if ($s instanceof \Runtime\Collection) return $s;
		if ($s instanceof \Runtime\UIStruct) return $s;
		return htmlspecialchars($s, ENT_QUOTES | ENT_HTML401);
	}
	#case ifcode JAVASCRIPT then
	static htmlEscape(s){
		if (s instanceof Runtime.Collection) return s;
		if (s instanceof Runtime.UIStruct) return s;
		var obj = {
			"<":"&lt;",
			">": "&gt;", 
			"&": "&amp;",
			'"': '&quot;',
			"'": '&#39;',
			'`': '&#x60;',
			'=': '&#x3D;'
		};
		return (new String(s)).replace(/[<>&"'`=]/g, function(v){ return obj[v]; });
	}
	#endswitch
	
	
	
	/**
	 * Разбивает путь файла на составляющие
	 * @param {string} filepath путь к файлу
	 * @return {json} Объект вида:
	 *         dirname    - папка, в которой находиться файл
	 *         basename   - полное имя файла
	 *         extension  - расширение файла
	 *         filename   - имя файла без расширения
	 */
	public static PathInfo pathinfo(string filepath)
	{
		Vector<string> arr1 = rs::explode(".", filepath).toVector();
		Vector<string> arr2 = rs::explode("/", filepath).toVector();
		
		PathInfo ret = new PathInfo();
		
		ret.filepath = filepath;
		ret.extension = arr1.pop();
		ret.basename = arr2.pop();
		ret.dirname = rs::implode("/", arr2);
		
		int ext_length = rs::strlen(ret.extension);
		if (ext_length > 0) ext_length++;
		ret.filename = rs::substr(ret.basename, 0, -1*ext_length);
		
		delete arr1;
		delete arr2;
		
		return ret;
	}
	
	
	
	/**
	 * Возвращает имя файла без расширения
	 * @param {string} filepath - путь к файлу
	 * @return {string} полное имя файла
	 */
	public static string filename(string filepath)
	{
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.basename;
		string ext = ret.extension;
		if (ext != "")
		{
			int sz = 0 - rs::strlen(ext) - 1;
			res = rs::substr(res, 0, sz);
		}
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Возвращает полное имя файла
	 * @param {string} filepath - путь к файлу
	 * @return {string} полное имя файла
	 */
	public static string basename(string filepath)
	{
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.basename;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Возвращает расширение файла
	 * @param {string} filepath - путь к файлу
	 * @return {string} расширение файла
	 */
	public static string extname(string filepath)
	{
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.extension;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Возвращает путь к папке, содержащий файл
	 * @param {string} filepath - путь к файлу
	 * @return {string} путь к папке, содержащий файл
	 */
	public static string dirname(string filepath)
	{
		PathInfo ret = self::pathinfo(filepath);
		string res = ret.dirname;
		delete ret;
		return res;
	}
	
	
	
	/**
	 * Returns relative path of the filepath
	 * @param string filepath
	 * @param string basepath
	 * @param string ch - Directory separator
	 * @return string relative path
	 */
	public static string relativePath(string filepath, string basepath, string ch = "/")
	{
		Vector<string> source = rs::explode(ch, filepath);
		Vector<string> base = rs::explode(ch, basepath);
		
		source = source.filter(bool (string s){ return s != ""; });
		base = base.filter(bool (string s){ return s != ""; });
		
		int i=0;
		while (source.count() > 0 and base.count() > 0 and source.item(0) == base.item(0))
		{
			source.shift();
			base.shift();
		}
		
		base.each(
			void (string s) use (source)
			{
				source.unshift("..");
			}
		);
		
		return rs::implode(ch, source);
	}
	
	
	
	/**
	 * Return normalize path
	 * @param string filepath - File path
	 * @return string
	 */
	public static string normalize(string filepath)
	{
		return filepath;
	}
	
	
	
	/* =================== Deprecated =================== */
	
	
	
	
	
	/**
	 * Разбивает строку на подстроки
	 * @param string ch - разделитель
	 * @param string s - строка, которую нужно разбить
	 * @param integer limit - ограничение 
	 * @return Vector<string>
	 */
	declare export static Vector<string> explode(string ch, string s, int limit = -1);
	
	#switch
	#case ifcode PHP then
	static function explode($delimiter, $s, $limit = -1)
	{
		$arr = [];
		if ($limit < 0) $arr = explode($delimiter, $s);
		else $arr = explode($delimiter, $s, $limit);
		return Collection::create($arr);
	}
	#case ifcode JAVASCRIPT then
	static explode(delimiter, s, limit){
		var _rtl; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		var _Collection; if (isBrowser()) _Collection = Runtime.Collection; else _Vector = Collection;
		var arr = null;
		if (!_rtl.exists(limit))
			arr = s.split(delimiter);
		arr = s.split(delimiter, limit);
		return _Collection.create(arr);
	}
	#endswitch
	
	
	
	/**
	 * Разбивает строку на подстроки
	 * @param string ch - разделитель
	 * @param string s - строка, которую нужно разбить
	 * @param integer limit - ограничение 
	 * @return Vector<string>
	 */
	declare export static string implode(string ch, Vector<string> arr);
	 
	#switch
	#case ifcode PHP then
	static function implode($s, $arr){
		return implode($s, $arr->_getArr());
	}
	#case ifcode JAVASCRIPT then
	static implode(ch, arr){
		return arr.join(ch);
	}
	#endswitch
	
	
	/**
	 * Ищет позицию первого вхождения подстроки search в строке s.
	 * @param {string} s - строка, в которой производится поиск 
	 * @param {string} search - строка, которую ищем 
	 * @param {string} offset - если этот параметр указан, 
	 *                 то поиск будет начат с указанного количества символов с начала строки.  
	 * @return {variable} Если строка найдена, то возвращает позицию вхождения, начиная с 0.
	 *                    Если строка не найдена, то вернет -1
	 */
	declare export static int strpos(string s, string search, string offset = 0);

	#switch
	#case ifcode PHP then
	static function strpos($s, $search, $offset = 0){
		if ($search == ""){
			return -1;
		}
		$res = mb_strpos($s, $search, $offset);
		if ($res === false)
			return -1;
		return $res;
	}
	#case ifcode JAVASCRIPT then
	static strpos(s, search, offset){
		var _rtl; if (isBrowser()) _rtl = Runtime.rtl; else _rtl = rtl;
		if (!_rtl.exists(offset)) offset = 0;
		var res = _rtl.toString(s).indexOf(search);
		return res;
	}
	#endswitch
	
}