/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.rtl;
use Runtime.Vector;
use Runtime.Exceptions.KeyNotFound;


class Map<T> extends Dict<T>
{
	/**
	 * Returns new Instance
	 * @return Object
	 */
	static Collection<T> Instance(var val = null)
	{
		return new Map(val);
	}
	
	
	/**
	 * Set value size_to position
	 * @param string key - position
	 * @param T value 
	 * @return self
	 */
	public Map<T> set(string key, T value)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		this._map["|" + key] = value;
		return this;
		#case ifcode PHP then
		$key = rtl::toStr($key);
		$this->_map[$key] = $value;
		return $this;
		#endswitch
	}
	
	
	/**
	 * Remove value from position
	 * @param string key
	 * @return self
	 */
	public Map<T> remove(string key)
	{
		#switch
		#case ifcode JAVASCRIPT then
		key = this.toStr(key);
		if (typeof this._map["|" + key] != "undefined")
		{
			delete this._map["|" + key];
		}
		return this;
		#case ifcode PHP then
		$key = rtl::toStr($key);
		if (isset($this->_map[$key]))
			unset($this->_map[$key]);
		return $this;
		#endswitch
	}
	
	
	/**
	 * Clear all values from vector
	 * @return self
	 */
	public Map<T> clear()
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._map = {};
		return this;
		#case ifcode PHP then
		$this->_map = [];
		return $this;
		#endswitch
	}
}

