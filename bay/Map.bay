/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.Vector;
use Runtime.Exceptions.KeyNotFound;

#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


declare class Map<T1, T2>{


	/**
	 * Returns value from position
	 * @param T1 key
	 * @param T2 default_value
	 * @return T2
	 */
	declare public T2 get(T1 key, T2 default_value);
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T1 key - position
	 * @return T2
	 */
	declare public T2 item(T1 key);
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 * @return self
	 */
	declare public Map<T1, T2> set(T1 key, T2 value);
	
	
	
	/**
	 * Remove value from position
	 * @param T1 key
	 * @return self
	 */
	declare public Map<T1, T2> remove(T1 key);
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	declare public bool contains(T1 key);
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	declare public bool has(T1 key);
	
	
	
	/**
	 * Clear all values from vector
	 * @return self
	 */
	declare public Map<T1, T2> clear();

	
	
	/**
	 * Returns count items in vector
	 */
	declare public int count();
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T1>
	 */
	declare public Vector<T1> keys();
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T2>
	 */
	declare public Vector<T2> values();
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	declare void each(func f);
	
	
	/**
	 * Add values from other map
	 * @param Map<T1, T2> map
	 * @return self
	 */
	declare public Map<T1, T2> addMap(Map<T1, T2> map);
}



#switch
#case ifcode JAVASCRIPT then
if (typeof Runtime == "undefined") Runtime = {};

Runtime.Map = class extends Map{
	
	
	/**
	 * Map constructor
	 */
	constructor(map){
		super();
		if (map != undefined && typeof map == 'object'){
			for (var i in map){
				super.set(i, map[i]);
			}
		}
	}
	
	
	/**
	 * Returns value from position
	 * @param T1 key
	 * @param T2 default_value
	 * @return T2
	 */
	get(key, default_value){
		var val = super.get(key);
		if (val == undefined)
			return default_value;
		return val;
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T1 key - position
	 * @return T2
	 */
	item(key){
		var val = super.get(key);
		if (val === null) return null;
		if (val == undefined){
			if (isBrowser()) throw new Runtime.Exceptions.KeyNotFound(null, key);
			throw new KeyNotFound(null, key);
		}
		return val;
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 */
	set(key, value){
		super.set(key, value);
		return this;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param T1 key
	 */
	remove(key){
		if (super.has(key)){
			super.delete(key);
		}
		return this;
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	contains(key){
		return super.has(key);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	has(key){
		return super.has(key);
	}
	
	
	
	/**
	 * Clear all values from vector
	 */
	clear(){
		super.clear();
		return this;
	}

	
	
	/**
	 * Returns count items in vector
	 */
	count(){
		return this.size;
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T1>
	 */
	keys(){
		var it = super.keys();
		var res = new Runtime.Vector();
		var next = it.next();
		while (!next.done){
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T2>
	 */
	values(){
		var it = super.values();
		var res = new Runtime.Vector();
		var next = it.next();
		while (!next.done){
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	each(f){
		var keys = this.keys();
		keys.each(f);
		return this;
	}
	
	
	
	/**
	 * Add values from other map
	 * @param Map<T1, T2> map
	 * @return self
	 */
	addMap(map){
		if (map != null)
			map.each((key)=>{
				this.set(key, map.item(key));
			});
		return this;
	}
	
	
	
	/**
	 * Convert Map to Object
	 */
	toObject(){
		var obj = {};
		this.each((key)=>{obj[key]=this.get(key);});
		return obj;
	}
}

#case ifcode NODEJS then
module.exports = Runtime.Map;



#case ifcode PHP then

class Map{
	
	
	protected $_map = null;
	
	
	/**
	 * Constructor
	 */
	public function __construct($map = []){
		$this->_map = [];
		foreach ($map as $key => $value){
			$this->_map[$key] = $value;
		}
	}
	
	
	
	/**
	 * Destructor
	 */
	public function __destruct(){
		unset($this->_map);
	}
	
	
	/**
	 * Returns value from position
	 * @param T1 key
	 * @param T2 default_value
	 * @return T2
	 */
	public function get($key, $default_value){
		return isset($this->_map[$key]) ? $this->_map[$key] : $default_value;
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T1 key - position
	 * @return T2
	 */
	public function item($key){	
		if (!isset($this->_map[$key])){
			throw new KeyNotFound(null, $key);
		}
		return $this->_map[$key];
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 * @return self
	 */
	public function set($key, $value){
		$this->_map[$key] = $value;
		return $this;
	}
	
	
	
	/**
	 * Remove value from position
	 * @param T1 key
	 * @return self
	 */
	public function remove($key){
		if (isset($this->_map[$key]))
			unset($this->_map[$key]);
		return $this;
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	public function contains($key){
		return isset($this->_map[$key]);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	public function has($key){
		return isset($this->_map[$key]);
	}
	
	
	
	/**
	 * Clear all values from vector
	 * @return self
	 */
	public function clear(){
		$this->_map = [];
		return $this;
	}

	
	
	/**
	 * Returns count items in vector
	 */
	public function count(){
		return count($this->_map);
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T1>
	 */
	public function keys(){
		$keys = array_keys($this->_map);
		$res = new Vector();
		$res->_assignArr($keys);		
		return $res;
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T2>
	 */
	public function values(){
		$values = array_values($this->_map);
		$res = new Vector();
		$res->_assignArr($values);		
		return $res;
	}
	
	
	
	/**
	 * Call function for each item
	 * @param func f
	 */
	function each($f){
		$keys = array_keys($this->_map);
		array_walk($keys, $f);
		return $this;
	}
	
	
	
	/**
	 * Add values from other map
	 * @param Map<T1, T2> map
	 * @return self
	 */
	function addMap($map){
		if ($map != null)
			$map->each(function ($key) use ($map){
				$this->set($key, $map->item($key));
			});
		return $this;
	}
	
	
	
	/**
	 * Get and set methods
	 */
	function __set($name, $value){
		return $this->set($name, $value);
	}
	function __get($name){
		return $this->get($name, null);
	}
	function __isset($name){
		return $this->has($name);
	}
	function __unset($name){
		return $this->remove($name);
	}
}

#endswitch