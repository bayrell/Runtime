/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Callback;
use Runtime.Date;
use Runtime.DateTime;
use Runtime.SerializeInterface;


class Serializer extends BaseObject
{	
	static const int ALLOW_CLASS_NAME = 1;
	static const int EXPORT = 2;
	static const int IMPORT = 4;
	static const int JSON_PRETTY = 8;
	
	int flags = 0;
	string callback_name = "";
	
	bool isImport() => this.flags & static::IMPORT == static::IMPORT;
	bool isExport() => this.flags & static::EXPORT == static::EXPORT;
	bool allowClassName() => this.flags & static::ALLOW_CLASS_NAME == static::ALLOW_CLASS_NAME;
	
	
	/**
	 * Set flag
	 */
	void setFlag(int flag)
	{
		this.flags = this.flags | flag;
	}
	
	
	/**
	 * Remove flag
	 */
	void removeFlag(int flag)
	{
		this.flags = this.flags & !flag;
	}
	
	
	/**
	 * Check flag
	 */
	bool hasFlag(int flag) => this.flags & flag == flag;
	
	
	/**
	 * Set callback
	 */
	void setCallback(string value)
	{
		this.callback_name = value;
	}
	
	
	/**
	 * Process data
	 */
	void process(BaseObject object, string field_name, Map data)
	{
		if (this.isImport())
		{
			var value = data.get(field_name);
			var old_value = static::getAttr(object, field_name);
			var new_value = this.importItem(old_value, value);
			static::setAttr(object, field_name, new_value);
		}
		if (this.isExport())
		{
			var old_value = static::getAttr(object, field_name);
			var new_value = this.exportItem(old_value);
			data.set(field_name, new_value);
		}
	}
	
	
	/**
	 * Process items
	 */
	void processItems(BaseObject object, string field_name, Map data, fn create = null)
	{
		if (this.isImport())
		{
			var value = data.get(field_name);
			var old_value = static::getAttr(object, field_name);
			var new_value = this.importItems(old_value, value, create);
			static::setAttr(object, field_name, new_value);
		}
		if (this.isExport())
		{
			var old_value = static::getAttr(object, field_name);
			var new_value = this.exportItems(old_value);
			data.set(field_name, new_value);
		}
	}
	
	
	/**
	 * Get attr
	 */
	static var getAttr(BaseObject object, string field_name)
	{
		if (object == null) return null;
		
		#switch
		#case ifcode PHP then
		return $object->$field_name;
		#case ifcode JAVASCRIPT then
		return object[field_name];
		#endswitch
		
		return null;
	}
	
	
	/**
	 * Set attr
	 */
	static var setAttr(BaseObject object, string field_name, var value)
	{
		#switch
		#case ifcode PHP then
		$object->$field_name = $value;
		#case ifcode JAVASCRIPT then
		object[field_name] = value;
		#endswitch
	}
	
	
	/**
	 * New instance
	 */
	BaseObject newInstance(string class_name, Dict value)
	{
		return rtl::newInstance(class_name);
	}
	
	
	/**
	 * Create object
	 */
	BaseObject newObject(var old_value, Dict value, fn create = null)
	{
		if (not(value instanceof Dict)) return null;
		if (not this.allowClassName()) return null;
		
		/* Check if class name is exists */
		string class_name = value.get("__class_name__");
		if (create == null and not(
			rtl::exists(rtl::find_class(class_name)) and
			rtl::is_instanceof(class_name, "Runtime.BaseObject"))
		)
		{
			return null;
		}
		
		/* Create instance */
		BaseObject instance = null;
		if (rtl::is_instanceof(old_value, class_name))
		{
			instance = old_value;
		}
		else if (create != null)
		{
			instance = rtl::apply(create, [value]);
		}
		else
		{
			instance = this.newInstance(class_name, value);
		}
		
		/* Process instance */
		if (instance implements SerializeInterface)
		{
			instance.serialize(this, value);
		}
		else
		{
			Callback callback = new Callback(instance, this.callback_name)
			if (callback.exists())
			{
				rtl::apply(callback, [this, value]);
			}
		}
		
		/* Return instance */
		return instance;
	}
	
	
	/**
	 * Import item
	 */
	void importItem(var old_value, var value, fn create = null)
	{
		if (create)
		{
			return this.newObject(old_value, value, create);
		}
		
		if (rtl::isScalarValue(value)) return value;
		if (value instanceof BaseStruct) return value;
		if (value instanceof Date) return value;
		if (value instanceof DateTime) return value;
		
		if (
			value instanceof Dict and
			(value.has("__class_name__") or create != null)
		)
		{
			return this.newObject(old_value, value, create);
		}
		
		return this.importItems(old_value, value);
	}
	
	
	/**
	 * Import items
	 */
	void importItems(var old_value, var value, fn create = null)
	{
		if (value instanceof Dict)
		{
			Map new_value = {};
			value.each(
				void (var item, string key) use (old_value, new_value, create)
				{
					var old_item = static::getAttr(old_value, key);
					var new_item = this.importItem(old_item, item, create);
					new_value.set(key, new_item);
				}
			);
			return new_value;
		}
		
		if (value instanceof Collection)
		{
			Map new_value = [];
			for (int i=0; i<value.count(); i++)
			{
				var item = value.get(i);
				var old_item = (old_value instanceof Collection) ? old_value.get(i) : null;
				var new_item = this.importItem(old_item, item, create);
				new_value.push(new_item);
			}
			return new_value;
		}
		
		return null;
	}
	
	
	/**
	 * Export item
	 */
	void exportItem(var value)
	{
		if (rtl::isScalarValue(value)) return value;
		if (value instanceof BaseStruct) return value;
		if (value instanceof Date) return value;
		if (value instanceof DateTime) return value;
		
		return this.exportItems(value);
	}
	
	
	/**
	 * Export items
	 */
	void exportItems(var value)
	{
		if (value instanceof Dict)
		{
			Map new_value = {};
			value.each(
				void (var item, string key) use (new_value)
				{
					var new_item = this.exportItem(item);
					new_value.set(key, new_item);
				}
			);
			return new_value;
		}
		
		if (value instanceof Collection)
		{
			Map new_value = [];
			for (int i=0; i<value.count(); i++)
			{
				var item = value.get(i);
				var new_item = this.exportItem(item);
				new_value.push(new_item);
			}
			return new_value;
		}
		
		if (value instanceof BaseObject)
		{
			Map new_value = {};
			if (this.allowClassName())
			{
				new_value.set("__class_name__", value::getClassName());
			}
			if (value implements SerializeInterface)
			{
				value.serialize(this, new_value);
			}
			else
			{
				Callback callback = new Callback(value, this.callback_name)
				if (callback.exists())
				{
					rtl::apply(callback, [this, new_value]);
				}
			}
			return new_value;
		}
		
		return null;
	}
	
	
	/**
	 * Convert primitive data to native
	 */
	var toNative(var value)
	{
		if (rtl::isScalarValue(value)) return value;
		
		bool allow_class_name = this.allowClassName();
		
		#switch
		#case ifcode PHP then
		
		if ($value instanceof \Runtime\Date)
		{
			$value = $value->toMap();
			if ($allow_class_name) $value->set("__class_name__", "Runtime.Date");
		}
		else if ($value instanceof \Runtime\DateTime)
		{
			$value = $value->toMap();
			if ($allow_class_name) $value->set("__class_name__", "Runtime.DateTime");
		}
		if ($value instanceof \Runtime\BaseStruct)
		{
			$class_name = $value::getClassName();
			$value = $value->toMap();
			$value = $this->exportItems($value);
			if ($allow_class_name) $value->set("__class_name__", $class_name);
		}
		if ($value instanceof \Runtime\Collection)
		{
			$arr = $value->cp()->_arr;
			for ($i=0; $i<count($arr); $i++)
			{
				$arr[$i] = static::toNative($arr[$i], $allow_class_name);
			}
			return $arr;
		}
		if ($value instanceof \Runtime\Dict)
		{
			$map = $value->cp()->_map;
			foreach ($map as $key => $value)
			{
				$map[$key] = static::toNative($map[$key], $allow_class_name);
			}
			return (object)$map;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _BaseStruct = use("Runtime.BaseStruct");
		var _SerializeInterface = use("Runtime.SerializeInterface");
		var _Collection = use("Runtime.Collection");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Dict = use("Runtime.Dict");
		
		if (value instanceof _Date)
		{
			value = value.toMap(ctx);
			if (allow_class_name) value.set(ctx, "__class_name__", "Runtime.Date");
		}
		else if (value instanceof _DateTime)
		{
			value = value.toMap(ctx);
			if (allow_class_name) value.set(ctx, "__class_name__", "Runtime.DateTime");
		}
		else if (value instanceof _BaseStruct)
		{
			let class_name = value.constructor.getClassName();
			value = value.toMap(ctx);
			if (allow_class_name) value.set(ctx, "__class_name__", class_name);
		}
		if (value instanceof _Collection)
		{
			value = value.cp(ctx);
			for(let i=0; i<value.length; i++)
			{
				value[i] = this.toNative(ctx, value[i], allow_class_name);
			}
			return value.cp(ctx);
		}
		if (value instanceof _Dict)
		{
			let res = {};
			value.each(
				(ctx, v, k) => {
					res[k] = this.toNative(ctx, v, allow_class_name);
				}
			);
			return res;
		}
		
		#endswitch
		
		if (value instanceof BaseObject)
		{
			return null;
		}
		
		return value;
	}
	
	
	/**
	 * Convert native data to primitive
	 */
	var toPrimitive(var value)
	{
		if (rtl::isScalarValue(value)) return value;
		
		bool allow_class_name = this.allowClassName();
		
		#switch
		#case ifcode PHP then
		
		if (is_object($value) || is_array($value))
		{
			$class_name = null;
			if (is_object($value))
				if (property_exists($value, "__class_name__"))
					$class_name = $value->__class_name__;
			if (is_array($value))
				if (isset($value["__class_name__"]))
					$class_name = $value["__class_name__"];
			
			/* Is vector */
			if (is_array($value) && $class_name == null)
			{
				$arr = array_values($value);
				$res = \Runtime\Vector::from($arr);
				$res = $res->map(function ($item){
					return $this->toPrimitive($item);
				});
				return $res;
			}
			
			/* Convert value items */
			$value = \Runtime\Map::from($value);
			$value = $value->map(function ($item, $key){
				return $this->toPrimitive($item);
			});
			
			/* Is date */
			if ($class_name == "Runtime.Date")
			{
				return new \Runtime\Date($value);
			}
			
			/* Is datetime */
			else if ($class_name == "Runtime.DateTime")
			{
				return new \Runtime\DateTime($value);
			}
			
			/* Is struct */
			else if (
				$allow_class_name &&
				\Runtime\rtl::is_instanceof($class_name, "Runtime.BaseStruct")
			)
			{
				$value = $this->importItems(null, $value);
				return rtl::newInstance($class_name, [$value]);
			}
			
			return $value;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Vector = use("Runtime.Vector");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Map = use("Runtime.Map");
		
		/* Is native array */
		if (Array.isArray(value))
		{
			var new_value = _Vector.from(value);
			new_value = new_value.map(ctx, (ctx, val)=>{
				return this.toPrimitive(ctx, val);
			});
			return new_value;
		}
		
		/* Is native object */
		if (
			typeof value == 'object' &&
			!_rtl.is_instanceof(ctx, value, "Runtime.Map") &&
			!_rtl.is_instanceof(ctx, value, "Runtime.BaseObject")
		)
		{
			let class_name = value["__class_name__"];
			
			/* Convert value items */
			value = _Map.from(value);
			value = value.map(ctx, (ctx, val, key)=>{
				return this.toPrimitive(ctx, val);
			});
			
			/* Is date */
			if (class_name == "Runtime.Date")
			{
				return new _Date(ctx, value);
			}
			
			/* Is datetime */
			if (class_name == "Runtime.DateTime")
			{
				return new _DateTime(ctx, value);
			}
			
			/* Is struct */
			else if (
				allow_class_name &&
				_rtl.exists(ctx, _rtl.find_class(class_name)) &&
				_rtl.is_instanceof(ctx, class_name, "Runtime.BaseStruct")
			)
			{
				value.remove(ctx, "__class_name__");
				value = this.importItems(null, value);
				return _rtl.newInstance(ctx, class_name, new _Vector(ctx, value));
			}
			
			return value;
		}
		
		#endswitch
		
		return value;
	}
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	string json_encode(var value)
	{
		#switch
		#case ifcode PHP then
		$value = $this->toNative($value);
		$json_flags = JSON_UNESCAPED_UNICODE;
		if ($this->hasFlag(static::JSON_PRETTY))
		{
			$json_flags = $json_flags | JSON_PRETTY_PRINT;
		}
		return json_encode($value, $json_flags);
		
		#case ifcode JAVASCRIPT then
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Dict = use("Runtime.Dict");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		
		value = this.toNative(ctx, value);
		return JSON.stringify(value, (key, value) => {
			return value;
		});
		#endswitch
	}
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return var 
	 */
	var json_decode(var obj)
	{
		#switch
		#case ifcode PHP then
		
		$res = @json_decode($obj, false);
		if ($res === null || $res === false)
			return null;
		return $this->toPrimitive($res);
		
		#case ifcode JAVASCRIPT then
		try{
			var _Serializer = use("Runtime.Serializer");
			var res = null;
			try
			{
				res = JSON.parse(obj, (key, value) => {
					if (value == null) return value;
					return this.toPrimitive(ctx, value);
				});
			}
			catch (e)
			{
				if (e instanceof SyntaxError)
				{
					res = null;
				}
				else
				{
					throw e;
				}
			}
			return res;
		}
		catch(e){
			throw e;
		}
		return null;
		#endswitch
	}
	
	
	/**
	 * Copy object
	 */
	static var copy(var obj)
	{
		Serializer serializer = rtl::newInstance( static::getClassName() );
		return serializer.toPrimitive( serializer.toNative(obj) );
	}
}