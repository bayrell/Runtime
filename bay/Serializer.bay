/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.SerializeInterface;


class Serializer extends BaseObject
{
	const ASSIGN_DATA = 1;
	const ENCODE_DATA = 2;
	int kind = 0;
	
	
	bool isAssign() => this.kind == static::ASSIGN_DATA;
	bool isEncode() => this.kind == static::ENCODE_DATA;
	
	
	/**
	 * Assign data to object
	 */
	void assign(var obj, Map data)
	{
		if (not(obj implements SerializeInterface)) return;
		this.kind = static::ASSIGN_DATA;
		obj.serialize(this, data);
	}
	
	
	/**
	 * Convert object to Map
	 */
	var encode(var obj)
	{
		this.kind = static::ENCODE_DATA;
		var data = obj;
		if (rtl::isObject(obj) and obj implements SerializeInterface)
		{
			data = {
				"__class_name__": rtl::className(obj),
			};
			obj.serialize(this, data);
		}
		return data;
	}
	
	
	/**
	 * Serialize item
	 */
	void process(SerializeInterface obj, string field_name, Map data, Callback create = null)
	{
		if (this.kind == static::ASSIGN_DATA)
		{
			var value = data.get(field_name);
			var new_value = value;
			if (value instanceof Map and value.has("__class_name__"))
			{
				string class_name = value.has("__class_name__");
				new_value = create ? create(value) : rtl::newInstance(class_name);
				this.assign(new_value, value);
			}
			else if (value instanceof Vector or value instanceof Map)
			{
				new_value = value.map(var (var item) use (create)
				{
					var new_item = item;
					if (create)
					{
						new_item = create.apply([this, item]);
						this.assign(new_item, item);
					}
					return new_item;
				});
			}
			rtl::setAttr(obj, field_name, new_value);
		}
		else
		{
			var value = rtl::attr(obj, field_name);
			var new_value = value;
			if (value instanceof Vector or value instanceof Map)
			{
				new_value = value.map(var (var item) => this.encode(item));
			}
			else
			{
				new_value = this.encode(value);
			}
			data.set(field_name, new_value);
		}
	}
}