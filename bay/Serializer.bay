/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.Date;
use Runtime.DateTime;
use Runtime.BaseStruct;
use Runtime.SerializeInterface;


class Serializer
{	
	static const int JSON_PRETTY = 1;
	static const int ALLOW_CLASS_NAME = 1;
	static const int ALLOW_OBJECT = 2;
	
	
	/**
	 * Convert primitive data to native
	 */
	static var toNative(var value, int flags = 3)
	{
		if (rtl::isScalarValue(value)) return value;
		
		bool allow_class_name = flags & static::ALLOW_CLASS_NAME == static::ALLOW_CLASS_NAME;
		bool allow_object = flags & static::ALLOW_OBJECT == static::ALLOW_OBJECT;
		
		#switch
		#case ifcode PHP then
		
		if ($value instanceof \Runtime\Date)
		{
			$value = $value->toMap();
			if ($allow_class_name) $value->set("__class_name__", "Runtime.Date");
		}
		else if ($value instanceof \Runtime\DateTime)
		{
			$value = $value->toMap();
			if ($allow_class_name) $value->set("__class_name__", "Runtime.DateTime");
		}
		if ($value instanceof \Runtime\BaseStruct)
		{
			$class_name = $value::getClassName();
			$value = $value->toMap();
			if ($allow_class_name) $value->set("__class_name__", $class_name);
		}
		if ($allow_serialize && \Runtime\rtl::is_implements($value, "Runtime.SerializeInterface"))
		{
			$class_name = $value::getClassName();
			$value = $value->exportData();
			if ($allow_class_name) $value->set("__class_name__", $class_name);
		}
		if ($value instanceof \Runtime\Collection)
		{
			$arr = $value->cp()->_arr;
			for ($i=0; $i<count($arr); $i++)
			{
				$arr[$i] = static::toNative($arr[$i], $allow_class_name);
			}
			return $arr;
		}
		if ($value instanceof \Runtime\Dict)
		{
			$map = $value->cp()->_map;
			foreach ($map as $key => $value)
			{
				$map[$key] = static::toNative($map[$key], $allow_class_name);
			}
			return (object)$map;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _BaseStruct = use("Runtime.BaseStruct");
		var _SerializeInterface = use("Runtime.SerializeInterface");
		var _Collection = use("Runtime.Collection");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Dict = use("Runtime.Dict");
		
		if (value instanceof _Date)
		{
			value = value.toMap();
			if (allow_class_name) value.set("__class_name__", "Runtime.Date");
		}
		else if (value instanceof _DateTime)
		{
			value = value.toMap();
			if (allow_class_name) value.set("__class_name__", "Runtime.DateTime");
		}
		else if (value instanceof _BaseStruct)
		{
			let class_name = value.constructor.getClassName();
			value = value.toMap();
			if (allow_class_name) value.set("__class_name__", class_name);
		}
		if (
			allow_object &&
			typeof value == "object" &&
			value.constructor.getClassName != undefined &&
			_rtl.is_implements(value, _SerializeInterface)
		)
		{
			class_name = value.constructor.getClassName();
			value = value.exportData();
			if (allow_class_name) value.set("__class_name__", class_name);
		}
		if (value instanceof _Collection)
		{
			value = value.cp();
			for(let i=0; i<value.length; i++)
			{
				value[i] = this.toNative(value[i], allow_class_name);
			}
			return value.cp();
		}
		if (value instanceof _Dict)
		{
			let res = {};
			value.each(
				(v, k) => {
					res[k] = this.toNative(v, allow_class_name);
				}
			);
			return res;
		}
		
		#endswitch
		
		return value;
	}
	
	
	/**
	 * Convert native data to primitive
	 */
	static var toPrimitive(var value, int flags = 3)
	{
		if (rtl::isScalarValue(value)) return value;
		
		bool allow_class_name = flags & static::ALLOW_CLASS_NAME == static::ALLOW_CLASS_NAME;
		bool allow_object = flags & static::ALLOW_OBJECT == static::ALLOW_OBJECT;
		
		#switch
		#case ifcode PHP then
		
		if (is_object($value) || is_array($value))
		{
			$class_name = null;
			if (is_object($value)) $class_name = $value->__class_name__;
			if (is_array($value)) $class_name = $value['__class_name__'];
			
			/* Is vector */
			if (is_array($value) && $class_name == null)
			{
				$arr = array_values($value);
				$res = \Runtime\Vector::from($arr);
				$res = $res->map(function ($item) use ($allow_class_name){
					return static::toPrimitive($item, $allow_class_name);
				});
				return $res;
			}
			
			/* Convert value items */
			$value = \Runtime\Map::from($value);
			$value = $value->map(function ($item, $key) use ($allow_class_name){
				return static::toPrimitive($item, $allow_class_name);
			});
			
			/* Is date */
			if ($class_name == "Runtime.Date")
			{
				return new \Runtime\Date($value);
			}
			
			/* Is datetime */
			else if ($class_name == "Runtime.DateTime")
			{
				return new \Runtime\DateTime($value);
			}
			
			/* Is struct */
			else if (
				$allow_class_name &&
				\Runtime\rtl::is_instanceof($class_name, "Runtime.BaseStruct")
			)
			{
				return rtl::newInstance($class_name, [$value]);
			}
			
			/* Is SerializeInterface */
			else if (
				$allow_object &&
				\Runtime\rtl::class_implements($class_name, "Runtime.SerializeInterface")
			)
			{
				$obj = rtl::newInstance($class_name);
				$obj->importData($value);
				return $obj;
			}
			
			return $value;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Vector = use("Runtime.Vector");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Map = use("Runtime.Map");
		
		/* Is vector */
		if (Array.isArray(value))
		{
			var new_value = _Vector.from(value);
			new_value = new_value.map((val)=>{
				return Runtime.Serializer.toPrimitive(val, allow_class_name);
			});
			return new_value;
		}
		
		if (typeof value == 'object')
		{
			let class_name = value["__class_name__"];
			
			/* Convert value items */
			value = _Map.from(value);
			value = value.map((val, key)=>{
				return Runtime.Serializer.toPrimitive(val, allow_class_name);
			});
			
			/* Is date */
			if (class_name == "Runtime.Date")
			{
				return new _Date(value);
			}
			
			/* Is datetime */
			if (class_name == "Runtime.DateTime")
			{
				return new _DateTime(value);
			}
			
			/* Is struct */
			else if (
				allow_class_name &&
				_rtl.exists(_rtl.find_class(class_name)) &&
				_rtl.is_instanceof(class_name, "Runtime.BaseStruct")
			)
			{
				value.remove("__class_name__");
				return _rtl.newInstance(class_name, new _Vector(value));
			}
			
			/* Is SerializeInterface */
			else if (
				allow_object &&
				_rtl.class_implements(class_name, "Runtime.SerializeInterface")
			)
			{
				let obj = _rtl.newInstance(class_name);
				obj.importData(value);
				return obj;
			}
			
			return value;
		}
		
		#endswitch
		
		return value;
	}
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	static string json_encode(var value, int flags = 0, string allow_class_name = true)
	{
		#switch
		#case ifcode PHP then
		$value = static::toNative($value, $allow_class_name);
		$json_flags = JSON_UNESCAPED_UNICODE;
		if ( ($flags & 1) == 1 ) $json_flags = $json_flags | JSON_PRETTY_PRINT;
		return json_encode($value, $json_flags);
		
		#case ifcode JAVASCRIPT then
		if (flags == undefined) flags = 0;
		if (allow_class_name == undefined) convert = true;
		
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Dict = use("Runtime.Dict");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		
		value = this.toNative(value, allow_class_name);
		return JSON.stringify(value, (key, value) => {
			return value;
		});
		#endswitch
	}
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return var 
	 */
	static var json_decode(var obj, string allow_class_name = true)
	{
		#switch
		#case ifcode PHP then
		
		$res = @json_decode($obj, false);
		if ($res === null || $res === false)
			return null;
		return static::toPrimitive($res, $allow_class_name);
	
		#case ifcode JAVASCRIPT then
		try{
			
			var _Serializer = use("Runtime.Serializer");
			var res = null;
			try
			{
				res = JSON.parse(obj, (key, value) => {
					if (value == null) return value;
					return _Serializer.toPrimitive(value, allow_class_name);
				});
			}
			catch (e)
			{
				res = null;
			}
			return res;
		}
		catch(e){
			throw e;
		}
		return null;
		#endswitch
	}
}