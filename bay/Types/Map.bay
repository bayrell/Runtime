/*!
 *  Bayrell Runtime Library.  
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellRtl.Types;

use BayrellRtl.Types.Vector;
use BayrellRtl.Exceptions.KeyNotFound;
use BayrellRtl.Interfaces.MapInterface;


declare class Map<T1, T2> implements MapInterface{


	/**
	 * Returns value from position
	 * @param T1 key
	 * @param T2 default_value
	 * @return T2
	 */
	declare public T2 get(T1 key, T2 default_value);
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T1 key - position
	 * @return T2
	 */
	declare public T2 item(T1 key);
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 */
	declare public void set(T1 key, T2 value);
	
	
	
	/**
	 * Remove value from position
	 * @param T1 key
	 */
	declare public void remove(T1 key);
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	declare public bool contains(T1 key);
	
	
	
	/**
	 * Clear all values from vector
	 */
	declare public void clear();

	
	
	/**
	 * Returns count items in vector
	 */
	declare public size_t count();
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T1>
	 */
	declare public Vector<T1> keys();
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T2>
	 */
	declare public Vector<T2> values();
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 */
	public void push(T1 key, T2 value){
		this.set(key, value);
	}
}



#switch
#case ifcode JAVASCRIPT then
if (typeof BayrellRtl == "undefined") BayrellRtl = {};
if (typeof BayrellRtl.Types == "undefined") BayrellRtl.Types = {};

BayrellRtl.Types.Map = class extends Map{
	
	
	/**
	 * Returns value from position
	 * @param T1 key
	 * @param T2 default_value
	 * @return T2
	 */
	get(key, default_value){
		var val = super.get(key);
		if (val == undefined)
			return default_value;
		return val;
	}
	
	
	
	/**
	 * Returns value from position. Throw exception, if position does not exists
	 * @param T1 key - position
	 * @return T2
	 */
	item(key){
		var val = super.get(key);
		if (val == undefined){
			throw new KeyNotFound();
		}
		return val;
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 */
	set(key, value){
		super.set(key, value);
	}
	
	
	
	/**
	 * Remove value from position
	 * @param T1 key
	 */
	remove(key){
		super.delete(key);
	}
	
	
	
	/**
	 * Return true if key exists
	 * @param T1 key
	 * @return bool var
	 */
	contains(key){
		return super.has(key);
	}
	
	
	
	/**
	 * Clear all values from vector
	 */
	clear(){
		super.clear();
	}

	
	
	/**
	 * Returns count items in vector
	 */
	count(){
		return 0;
	}
	
	
	
	/**
	 * Returns vector of the keys
	 * @return Vector<T1>
	 */
	keys(){
		var it = super.keys();
		var res = new BayrellRtl.Types.Vector();
		var next = it.next();
		while (!next.done){
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Returns vector of the values
	 * @return Vector<T2>
	 */
	values(){
		var it = super.values();
		var res = new BayrellRtl.Types.Vector();
		var next = it.next();
		while (!next.done){
			res.push( next.value );
			next = it.next();
		}
		return res;
	}
	
	
	
	/**
	 * Set value size_to position
	 * @param T1 pos - position
	 * @param T2 value 
	 */
	push(key, value){
		this.set(key, value);
	}
	
}

#case ifcode NODEJS then
module.exports = BayrellRtl.Types.Map;
#endswitch