/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Monad;


class Chain extends Callback
{
	public Collection<Dict> chain = [];
	
	
	/**
	 * Constructor
	 */
	public void constructor()
	{
		parent(null, null);
	}
	
	
	/**
	 * Check if method exists
	 */
	bool exists() => true;
	
	
	/**
	 * Check callback
	 */
	void check()
	{
	}
	
	
	/**
	 * Returns true if async
	 */
	bool getChain() => this.chain.slice();
	
	
	/**
	 * Add function to chain
	 */
	public Chain add(fn f, int priority = 100)
	{
		this.chain.push({
			"callback": f,
			"priority": priority,
		});
		return this;
	}
	
	
	/**
	 * Sort chain
	 */
	public void sort()
	{
		this.chain = this.chain.sort(lib::sortAttr("priority", "asc"));
	}
	
	
	/**
	 * Apply chain
	 */
	void apply(Collection args = null)
	{
		for (int i=0; i<this.chain.count(); i++)
		{
			Dict item = this.chain.get(i);
			Callback f = item.get("callback");
			#switch
			#case ifcode PHP then
			call_user_func_array([$obj, $this->name], $args);
			#case ifcode JAVASCRIPT then
			obj[this.name].bind(obj).apply(null, args);
			#endswitch
		}
	}
	
	
	#ifcode PHP then
	
	function __invoke()
	{
		return $this->apply(func_get_args());
	}
	
	#endif
}