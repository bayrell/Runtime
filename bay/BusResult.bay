/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime;

use Runtime.CoreStruct;
use Runtime.Collection;
use Runtime.Map;
use Runtime.rtl;
use Runtime.RuntimeConstant;


struct BusResult<primitive> extends CoreStruct
{
	
	public bool success = false;
	public int code = 0;
	public string error = "";
	public string url = "";
	public string api_name = "";
	public string interface_name = "";
	public string method_name = "";
	public string text = "";
	public primitive data = null;
	public primitive params = null;
	public Collection<string> logs = null;
	
	
	/**
	 * Returns true if success
	 * @return bool
	 */
	static bool isSuccess(BusResult bus) => bus.success and bus.code >= RuntimeConstant::ERROR_OK;
	
	
	
	/**
	 * Set error data
	 * @param int code
	 * @param string error
	 * @return BusResult
	 */
	static BusResult setError(BusResult bus, string error = "", int code) =>
		bus.copy({
			"code": code,
			"error": error,
			"success": false
		})
	;
	
	
	
	/**
	 * Set result
	 * @param primitive res
	 * @return BusResult
	 */
	static BusResult setSuccess(BusResult bus, primitive res) =>
		bus.copy({ "code": RuntimeConstant::ERROR_OK, "error": "", "success": true, "data": res })
	;
	
	
	
	/**
	 * Set result
	 * @param primitive res
	 * @return BusResult
	 */
	static BusResult setResult(BusResult bus, BusResult res) =>
		bus.copy( res.takeDict() )
	;
	
	
	
	/**
	 * Set result
	 * @param primitive res
	 * @return BusResult
	 */
	static BusResult create(primitive res) =>
		new BusResult({ "code": RuntimeConstant::ERROR_OK, "error": "", "success": true, "data": res })
	;
	
	
	
	/**
	 * Set result
	 * @param primitive res
	 * @return BusResult
	 */
	static BusResult fail(primitive res, string error = "", int code = -1) =>
		new BusResult({ "code": code, "error": error, "success": false, "data": res })
	;
}
