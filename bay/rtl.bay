/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseStruct;
use Runtime.Collection;
use Runtime.Date;
use Runtime.DateTime;
use Runtime.Dict;
use Runtime.Map;
use Runtime.Monad;
use Runtime.Vector;


class rtl
{
	/* Log level */
	
	/**
	 * Fatal error. Application stoped
	 */
	static const int LOG_FATAL = 0;
	
	/**
	 * Critical error. Application damaged, but works
	 */	
	static const int LOG_CRITICAL = 2;
	
	/**
	 * Any Application error or exception
	 */	
	static const int LOG_ERROR = 4;
	
	/**
	 * Log warning. Developer should attention to this
	 */
	static const int LOG_WARNING = 6;
	
	/**
	 * Information about any event
	 */
	static const int LOG_INFO = 8;
	
	/**
	 * Debug level 1
	 */
	static const int LOG_DEBUG = 10;
	
	/**
	 * Debug level 2
	 */	
	static const int LOG_DEBUG2 = 12;
	
	/* Status codes */ 
	static const int STATUS_PLAN = 0;
	static const int STATUS_DONE = 1;
	static const int STATUS_PROCESS = 100;
	static const int STATUS_FAIL = -1;
	
	/* Errors */
	static const int ERROR_NULL = 0;
	static const int ERROR_OK = 1;
	static const int ERROR_PROCCESS = 100;
	static const int ERROR_FALSE = -100;
	static const int ERROR_UNKNOWN = -1;
	static const int ERROR_INDEX_OUT_OF_RANGE = -2;
	static const int ERROR_KEY_NOT_FOUND = -3;
	static const int ERROR_STOP_ITERATION = -4;
	static const int ERROR_FILE_NOT_FOUND = -5;
	static const int ERROR_ITEM_NOT_FOUND = -5;
	static const int ERROR_OBJECT_DOES_NOT_EXISTS = -5;
	static const int ERROR_OBJECT_ALLREADY_EXISTS = -6;
	static const int ERROR_ASSERT = -7;
	static const int ERROR_REQUEST = -8;
	static const int ERROR_RESPONSE = -9;
	static const int ERROR_CSRF_TOKEN = -10;
	static const int ERROR_RUNTIME = -11;
	static const int ERROR_VALIDATION = -12;
	static const int ERROR_PARSE_SERIALIZATION_ERROR = -14;
	static const int ERROR_ASSIGN_DATA_STRUCT_VALUE = -15;
	static const int ERROR_AUTH = -16;
	static const int ERROR_DUPLICATE = -17;
	static const int ERROR_API_NOT_FOUND = -18;
	static const int ERROR_API_WRONG_FORMAT = -19;
	static const int ERROR_API_WRONG_APP_NAME = -20;
	static const int ERROR_FATAL = -99;
	static const int ERROR_HTTP_CONTINUE = -100;
	static const int ERROR_HTTP_SWITCH = -101;
	static const int ERROR_HTTP_PROCESSING = -102;
	static const int ERROR_HTTP_OK = -200;
	static const int ERROR_HTTP_BAD_GATEWAY = -502;
	
	
	
	/**
	 * Define class
	 */
	static bool @defClass(var obj)
	{
		#switch
		#case ifcode ES6 then
		if (Runtime.rtl._classes == undefined) Runtime.rtl._classes = {};
		Runtime.rtl._classes[obj.getClassName()] = obj;
		#endswitch
	}
	
	
	
	/**
	 * Find class instance by name. If class does not exists return null.
	 * @return var - class instance
	 */
	static var @find_class(string class_name)
	{
		#switch
		#case ifcode PHP then
		return "\\" . preg_replace("/\\./", "\\", $class_name);
		
		#case ifcode ES6 then
		if (class_name instanceof Function)
			return class_name;
		
		if (window[class_name] != undefined)
			return window[class_name];
			
		return Runtime.rtl._classes[class_name];
		
		if (class_name instanceof Runtime.BaseObject) class_name = class_name.getClassName();
		else if (class_name instanceof Object) class_name = class_name.constructor.name;
		
		if (Runtime.rtl._classes==undefined) Runtime.rtl._classes = {};
		if (Runtime.rtl._classes[class_name]!=undefined) return Runtime.rtl._classes[class_name];
		
		var arr = class_name.split('.');
		var obj = window;
		
		for (var i=0; i<arr.length; i++){
			var key = arr[i];
			if (obj[key] == undefined)
				return null;
			obj = obj[key];
		}
		
		Runtime.rtl._classes[class_name] = obj;
		return obj;
		
		#case ifcode NODEJS then
		if (class_name instanceof Function)
			return class_name;
		
		return use(class_name);
		
		#endswitch
	}
	
	
	
	/**
	 * Returns true if class instanceof class_name
	 * @return bool
	 */
	static bool is_instanceof(var obj, string class_name)
	{
		#switch
		#case ifcode PHP then
		
		$class_name = static::find_class($class_name);
		if ($obj == null) return false;
		if (gettype($obj) != "object") return false;
		if (is_subclass_of($obj, $class_name)){ return true;}
		return is_a($obj, $class_name);
	
		#case ifcode JAVASCRIPT then
		
		var c = this.find_class(class_name);
		if (c == null) return false;
		return c.prototype.isPrototypeOf(obj);
	
		#endswitch
	}
	
	
	
	/**
	 * Returns true if obj implements interface_name
	 * @return bool
	 */
	static bool is_implements(var obj, string interface_name)
	{
		#switch
		#case ifcode PHP then
	
		$class_name = get_class($obj);
		return static::class_implements($class_name, $interface_name);
	
		#case ifcode JAVASCRIPT then
		if (obj == undefined) return false;
		if (obj.constructor.__implements__ == undefined) return false;
		return obj.constructor.__implements__.indexOf(interface_name) != -1;
	
		#endswitch
	}
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool class_exists(string class_name)
	{
		#switch
		#case ifcode PHP then
		$class_name = static::find_class($class_name);
		return class_exists($class_name);
		
		#case ifcode JAVASCRIPT then
		var obj = this.find_class(class_name);
		if (!this.exists(ctx, obj)) return false;
		return true;
		
		#endswitch
	}
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool class_implements(string class_name, string interface_name)
	{
		#switch
		#case ifcode PHP then
		
		$class_name = static::find_class($class_name);
		$interface_name = static::find_class($interface_name);
		$arr = @class_implements($class_name, true);
		if ($arr == false){
			return false;
		}
		foreach ($arr as $name)
		{
			if ($name == $interface_name or "\\" . $name == $interface_name)
				return true;
		}
		return false;
		
		#case ifcode JAVASCRIPT then
		var obj = this.find_class(class_name);
		var obj2 = this.find_class(interface_name);
		
		while (obj != null){
			if (obj.__implements__){
				if (obj.__implements__.indexOf( obj2 ) > -1 ){
					return true;
				}
			}
			obj = obj.__proto__;
		}
		
		return false;
		
		#endswitch
	}
	
	
	
	/**
	 * Returns interface of class
	 * @param string class_name
	 * @return Collection<string>
	 */
	static Collection<string> getInterfaces(string class_name)
	{
		#switch
		#case ifcode PHP then
		$arr = array_values(class_implements(rtl::find_class($class_name)));
		$arr = array_map
		(
			function($s){ return str_replace("\\", ".", $s); },
			$arr
		);
		return \Runtime\Collection::from($arr);
		#case ifcode JAVASCRIPT then
		return this.find_class(class_name).__implements__;
		#endswitch
	}
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool method_exists(string class_name, string method_name)
	{
		#switch
		#case ifcode PHP then
		
		if (gettype($class_name) == "object")
		{
			if (method_exists($class_name, $method_name)) return true;
			return false;
		}
		
		$class_name = static::find_class($class_name);
		if (!class_exists($class_name)) return false;
		if (!method_exists($class_name, $method_name)) return false;
		return true;
	
		#case ifcode JAVASCRIPT then
		
		if (typeof(class_name) == "object")
		{
			if (class_name[method_name] != undefined) return true;
			return false;
		}
		
		var obj = this.find_class(class_name);
		if (!this.exists(ctx, obj)) return false;
		if (this.exists(ctx, obj[method_name])) return true;
		return false;
	
		#endswitch
	}
	
	
	
	/**
	 * Create object by class_name. If class name does not exists return null
	 * @return Object
	 */
	static Object newInstance(string class_name, Collection<var> args = null)
	{
		#switch
		#case ifcode PHP then
	
		$class_name = static::find_class($class_name);
		if ($args == null)
			return new $class_name($ctx);
		$r = new \ReflectionClass($class_name);
		$arr = $args->_arr;
		array_unshift($arr, $ctx);
		return $r->newInstanceArgs($arr);
	
		#case ifcode JAVASCRIPT then
	
		var obj = this.find_class(class_name);
		if (!this.exists(ctx, obj)) return null;
		if (!(obj instanceof Function)) return null;
		if (args == undefined || args == null){ args = []; } else { args = args.toArray(); }
		args = args.slice(); 
		args.unshift(ctx);
		args.unshift(null);
		var f = Function.prototype.bind.apply(obj, args);
		return new f;
		
		#endswitch
	}
	
	
	
	/**
	 * Returns callback
	 * @return fn
	 */
	static fn method(var obj, string method_name)
	{
		#switch
		#case ifcode PHP then
		
		return new \Runtime\Callback($obj, $method_name);
		
		#case ifcode JAVASCRIPT then
		
		var save = obj;
		if (!(obj instanceof Object))
		{
			var find_obj = this.find_class(obj);
			if (find_obj == null)
			{
				throw new Error("Object " + obj + " not found");
			}
			obj = find_obj;
		}
		
		if (obj[method_name] == null || obj[method_name] == "undefined")
		{
			var class_name = "";
			if (obj.getClassName != undefined) class_name = obj.getClassName();
			else if (obj.getCurrentClassName != undefined) class_name = obj.getCurrentClassName();
			else class_name = save;
			throw new Error("Method " + method_name + " not found in " + class_name);
		}
		
		return obj[method_name].bind(obj);
		return function(obj, method_name){ return function () {
			return obj[method_name].apply(obj, arguments);
		}}(obj, method_name);
		
		#endswitch
	}
	
	
	
	/**
	 * Returns callback
	 * @return fn
	 */
	static var apply(fn f, Collection args)
	{
		bool is_ctx = false;
		
		#ifdef ENABLE_CONTEXT then
		is_ctx = true;
		#endif
		
		#switch
		#case ifcode PHP then
		
		$arr = ($args != null) ? (($args instanceof \Runtime\Collection) ? $args->_getArr() : $args) : [];
		if ($is_ctx) array_unshift($arr, $ctx);
		if ($f instanceof \Runtime\Callback)
		{
			return $f->invokeArgs($arr);
		}
		if (gettype($f) == "string") $f = static::find_class($f);
		return call_user_func_array($f, $arr);
		
		#case ifcode JAVASCRIPT then
		
		var res;
		if (args == null) args = [];
		else args = Array.prototype.slice.call(args);
		
		if (typeof ctx != "undefined") args.unshift(ctx);
		if (this.isString(ctx, f))
		{
			var a = f.split("::");
			var c = a[0]; var m = a[1];
			c = this.find_class(c);
			f = c[m];
			res = f.apply(c, args);
		}
		else
		{
			res = f.apply(null, args);
		}
		
		return res;
		#endswitch
	}
	
	
	
	/**
	 * Call await method
	 * @return fn
	 */
	static async var applyAsync(fn f, Collection args)
	{
		#switch
		#case ifcode PHP then
		
		$arr = ($args != null) ? (($args instanceof \Runtime\Collection) ? $args->_getArr() : $args) : [];
		if (isset($ctx)) array_unshift($arr, $ctx);
		if ($f instanceof \Runtime\Callback)
		{
			return $f->invokeArgs($arr);
		}
		if (gettype($f) == "string") $f = static::find_class($f);
		return call_user_func_array($f, $arr);
		
		#case ifcode JAVASCRIPT then
		
		var res;
		if (args == null) args = [];
		else args = Array.prototype.slice.call(args);
		
		if (typeof ctx != "undefined") args.unshift(ctx);
		if (this.isString(ctx, f))
		{
			var a = f.split("::");
			var c = a[0]; var m = a[1];
			c = this.find_class(c);
			f = c[m];
			res = await f.apply(c, args);
		}
		else
		{
			res = await f.apply(null, args);
		}
		
		return res;
		
		#endswitch
	}
	
	
	
	/**
	 * Apply method
	 * @return var
	 */
	static var methodApply(string class_name, string method_name, Collection args = null)
	{
		fn f = rtl::method(class_name, method_name);
		return rtl::apply(f, args);
	}
	static var applyMethod(string class_name, string method_name, Collection args = null) =>
		static::methodApply(class_name, method_name, args);
	
	
	
	/**
	 * Apply method async
	 * @return var
	 */
	static async var methodApplyAsync(string class_name, string method_name, Collection args = null)
	{
		fn f = rtl::method(class_name, method_name);
		return await rtl::applyAsync(f, args);
	}
	static async var applyMethodAsync(string class_name, string method_name, Collection args = null) =>
		await static::methodApplyAsync(class_name, method_name, args);
		
	
	
	/**
	 * Returns value
	 */
	static var get(var item, string key, var def_val = null)
	{
		return static::attr(item, key, def_val)
	}
	
	
	
	/**
	 * Returns callback
	 * @return var
	 */
	static var attr(var item, Collection path, var def_val = null)
	{
		if (path === null) return def_val;
		#switch
		#case ifcode PHP then
		
		if ($item === null) return $def_val;
		if (gettype($path) == "array") $path = \Runtime\Collection::from($path);
		else if (static::isScalarValue($ctx, $path)) $path = \Runtime\Collection::from([$path]);
		if (!($path instanceof \Runtime\Collection)) return $def_val;
		if (count($path->_arr) == 0) 
		{
			return $item;
		}
		$key = $path->first($ctx);
		$path = $path->removeFirstIm($ctx);
		$val = $def_val;
		if ($item instanceof \Runtime\Dict or $item instanceof \Runtime\Collection)
		{
			$item = $item->get($ctx, $key, $def_val);
			$val = static::attr($ctx, $item, $path, $def_val);
			return $val;
		}
		else if ($item instanceof \Runtime\BaseStruct)
		{
			$item = $item->get($ctx, $key, $def_val);
			$val = static::attr($ctx, $item, $path, $def_val);
			return $val;
		}
		return $val;
		
		#case ifcode JAVASCRIPT then
		var Collection = use("Runtime.Collection");
		var Dict = use("Runtime.Dict");
		var BaseStruct = use("Runtime.BaseStruct");
		
		if (def_val == undefined) def_val = null;
		if (item === null) return def_val;
		if (item === undefined) return def_val;
		if (Array.isArray(path) && path.count == undefined) path = Collection.from(path);
		if (this.isScalarValue(ctx, path)) path = Collection.from([path]);
		if (!(path instanceof Collection)) return def_val;
		if (path.count(ctx) == 0)
		{
			return item;
		}
		var key = path.first(ctx);
		var path = path.removeFirstIm(ctx);
		var val = def_val;
		if (item instanceof Dict || item instanceof Collection)
		{
			var new_item = item.get(ctx, key, def_val);
			val = this.attr(ctx, new_item, path, def_val);
			return val;
		}
		else if (item instanceof BaseStruct)
		{
			var new_item = item.get(ctx, key, def_val);
			val = this.attr(ctx, new_item, path, def_val);
			return val;
		}
		else
		{
			var new_item = item[key] || def_val;
			val = this.attr(ctx, new_item, path, def_val);
			return val;
		}
		return val;
		
		#endswitch
	}
	
	
	
	/**
	 * Update current item
	 * @return var
	 */
	static var setAttr(var item, Collection attrs, var new_value)
	{
		if (attrs == null) return item;
		#switch
		#case ifcode PHP then
		if (gettype($attrs) == "string") $attrs = \Runtime\Collection::from([$attrs]);
		else if (gettype($attrs) == "array") $attrs = \Runtime\Collection::from($attrs);
		#case ifcode JAVASCRIPT then
		var Collection = use("Runtime.Collection");
		if (typeof attrs == "string") attrs = Collection.from([attrs]);
		else if (Array.isArray(attrs) && attrs.count == undefined) attrs = Collection.from(attrs);
		#endswitch
		
		fn f = var (Collection attrs, var data, var new_value, var f)
		{
			if (attrs.count() == 0) return new_value;
			if (data == null) data = {};
			
			var new_data = null;
			var attr_name = attrs.first();
			
			if (data instanceof BaseStruct)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs.removeFirstIm(), attr_data, new_value, f);			
				new_data = data.copy( (new Map()).setValue(attr_name, res) );
			}
			else if (data instanceof Dict)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs.removeFirstIm(), attr_data, new_value, f);			
				new_data = data.setIm( attr_name, res );
			}
			else if (data instanceof Collection)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs.removeFirstIm(), attr_data, new_value, f);			
				new_data = data.setIm( attr_name, res );
			}
			
			return new_data;
		};
		
		var new_item = f(attrs, item, new_value, f);
		return new_item;
	}
	
	
	
	/**
	 * Returns value
	 * @param var value
	 * @param var def_val
	 * @param var obj
	 * @return var
	 */
	static var @to(var v, var o)
	{
		var ctx = null;
		var e = o.e;
		if (e == "mixed" or e == "primitive" or e == "var" or e == "fn" or e == "callback") return v;
		if (e == "bool") return static::toBool(ctx, v);
		else if (e == "string") return static::toString(ctx, v);
		else if (e == "int") return static::toInt(ctx, v);
		else if (e == "float") return static::toFloat(ctx, v);
		else if (rtl::is_instanceof(ctx, v, e)) return v;
		return v;
	}
	
	
	
	/**
	 * Convert monad by type
	 */
	pure fn m_to(string type_value, var def_value = null) =>
		bool (Monad m) use (type_value, def_value) =>
			new Monad
			(
				m.err == null ? static::convert( m.val, type_value, def_value ) : def_value
			)
	;
	
	
	
	/**
	 * Convert monad to default value
	 */
	pure fn m_def(var def_value = null) =>
		bool (Monad m) use (def_value) =>
			(m.err != null or m.val === null) ? new Monad(def_value) : m
	;
	
	
	
	/**
	 * Returns value if value instanceof type_value, else returns def_value
	 * @param var value
	 * @param string type_value
	 * @param var def_value
	 * @param var type_template
	 * @return var
	 */
	static var convert(var v, string t, var d = null)
	{
		if (v === null) return d;
		if (t == "mixed" or t == "primitive" or t == "var" or t == "fn" or t == "callback") return v;
		if (t == "bool" or t == "boolean") return static::toBool(v);
		else if (t == "string") return static::toString(v);
		else if (t == "int") return static::toInt(v);
		else if (t == "float" or t == "double") return static::toFloat(v);
		else if (static::is_instanceof(v, t)) return v;
		return static::toObject(v, t, d);
	}
	
	
	
	/**
	 * Returns true if value instanceof tp
	 * @param var value
	 * @param string tp
	 * @return bool
	 */
	static var checkValue(var value, string tp)
	{
		if (tp == "int") return static::isInt(value);
		if (tp == "float" or tp == "double") return static::isDouble(value);
		if (tp == "string") return static::isString(value);
		if (tp == "bool" or tp == "boolean") return static::isBoolean(value);
		if (rtl::is_instanceof(value, tp)){ return true;}
		return false;
	}
	
	
	
	/**
	 * Return true if value is empty
	 * @param var value
	 * @return bool
	 */
	static bool isEmpty(var value)
	{
		return (not static::exists(value)) or
			value === null or
			value === "" or
			value === false or
			value === 0
		;
	}
	
	
	
	/**
	 * Return true if value is exists
	 * @param var value
	 * @return bool
	 */
	static bool exists(var value)
	{
		#switch
		#case ifcode PHP then
		return isset($value);
		
		#case ifcode JAVASCRIPT then
		
		return (value != null) && (value != undefined);
		#endswitch
	}
	
	
	
	/**
	 * Returns true if value is scalar value
	 * @return bool 
	 */
	static bool isScalarValue(var value)
	{
		if (value == null) return true;
		if (rtl::isString(value)) return true;
		if (rtl::isNumber(value)) return true;
		if (rtl::isBoolean(value)) return true;
		return false;
	}
	
	
	
	/**
	 * Returns true if value is scalar array
	 * @return bool
	 */
	static bool isArray(var value)
	{
		if (value instanceof Collection) return true;
		#switch
		#case ifcode JAVASCRIPT then
		if (value instanceof Array) return true;
		#case ifcode PHP then
		if (is_array($value)) return true;
		#endswitch
		return false;
	}
	
	
	
	/**
	 * Return true if value is boolean
	 * @param var value
	 * @return bool
	 */
	static bool isBoolean(var value)
	{
		if (value === false or value === true) return true;
		return false;
	}
	
	
	
	/**
	 * Return true if value is boolean
	 * @param var value
	 * @return bool
	 */
	static bool isBool(var value) => static::isBoolean(value);
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return bool
	 */
	static bool isInt(var value)
	{
		#switch
		#case ifcode PHP then
		
		return is_int($value);
		
		#case ifcode JAVASCRIPT then
		
		if (typeof value != "number") return false;
		if (value % 1 !== 0) return false;
		return true;
		
		#endswitch
	}
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return bool
	 */
	static bool isDouble(var value)
	{
		#switch
		#case ifcode PHP then
		return is_int($value) or is_float($value);
		
		#case ifcode JAVASCRIPT then
		
		if (typeof value == "number") return true;
		return false;
		
		#endswitch
	}
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return bool
	 */
	static bool isNumber(var value)
	{
		#switch
		#case ifcode PHP then
		
		return is_int($value) or is_float($value);
		#case ifcode JAVASCRIPT then
		
		if (typeof value == "number") return true;
		return false;
		
		#endswitch
	}
	
	
	
	/**
	 * Return true if value is string
	 * @param var value
	 * @return bool
	 */
	static bool isString(var value)
	{
		#switch
		#case ifcode PHP then
		
		return is_string($value);
	
		#case ifcode JAVASCRIPT then
		
		if (typeof value == 'string') return true;
		else if (value instanceof String) return true;
		return false;
		
		#endswitch
	}
	
	
	
	/**
	 * Return true if value is function
	 * @param var value
	 * @return bool
	 */
	static bool isFn(var value)
	{
		#switch
		#case ifcode PHP then
		return is_callable($value);
		#case ifcode JAVASCRIPT then
		if (typeof(value) == 'function') return true;
		#endswitch
		
		return false;
	}
	
	
	
	/**
	 * Convert value to string
	 * @param var value
	 * @return string
	 */
	static string toString(var value)
	{
		#switch
		#case ifcode PHP then
		
		$t = gettype($value);
		if ($value === null) return "";
		if ($value instanceof \Runtime\RawString) return $value->toString();
		if ($value instanceof \Runtime\Interfaces\StringInterface) return $value->toString();
		if (is_int($value) or is_float($value) or is_string($value) or is_int($value)) return (string)$value;
		if ($value === true) return "1";
		if ($value === false) return "";
		return "";
		
		#case ifcode JAVASCRIPT then
		
		var _StringInterface = use("Runtime.Interfaces.StringInterface");
		
		if (value === null) return "";
		if (typeof value == 'string') return value;
		if (value instanceof String) return "" + value;
		if (this.is_implements(null, value, _StringInterface)) return value.toString();
		return ""+value;
		
		#endswitch
	}
	
	
	
	/**
	 * Convert value to string
	 * @param var value
	 * @return string
	 */
	static string @toStr(var value)
	{
		#ifdef ENABLE_CONTEXT then
		return static::toString(null, value);
		#endif
		return static::toString(value);
	}
	
	
	
	/**
	 * Convert value to int
	 * @param var value
	 * @return int
	 */
	static int toInt(var val)
	{
		#switch
		#case ifcode PHP then
	
		$res = (int)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = parseInt(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return 0;
	}
	
	
	
	/**
	 * Convert value to boolean
	 * @param var value
	 * @return bool
	 */
	static bool toBool(var val)
	{
		#switch
		#case ifcode PHP then
		
		if ($val === false || $val === "false") return false;
		if ($val === true || $val === "true") return true;
		$res = (bool)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = false;
		if (val == false || val == 'false') return false;
		if (val == true || val == 'true') return true;
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return false;
	}
	
	
	
	/**
	 * Convert value to float
	 * @param var value
	 * @return float
	 */
	static bool toFloat(var val)
	{
		#switch
		#case ifcode PHP then
		
		$res = floatval($val);
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = parseFloat(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return 0;
	}
	
	
	
	/**
	 * Convert to object
	 */
	static var toObject(var v, string t, var d = null)
	{
		if (static::is_instanceof(v, t)) return v;
		if (t == "Runtime.Collection") return Collection::@from(v);
		if (t == "Runtime.Vector") return Vector::@from(v);
		if (t == "Runtime.Dict") return Dict::@from(v);
		if (t == "Runtime.Map") return Map::@from(v);
		try
		{
			fn newInstance = static::method(t, "newInstance");
			return newInstance(v);
		}
		catch (var e){}
		return d;
	}
	
	
	
	/**
	 * Round up
	 * @param double value
	 * @return int
	 */
	static string ceil(double value)
	{
		#switch
		#case ifcode PHP then
		
		return ceil($value);
		
		#case ifcode JAVASCRIPT then
		
		return Math.ceil(value);
		
		#endswitch
	}
	
	
	
	/**
	 * Round down
	 * @param double value
	 * @return int
	 */
	static string floor(double value)
	{
		#switch
		#case ifcode PHP then
		
		return floor($value);
		
		#case ifcode JAVASCRIPT then
		
		return Math.floor(value);
		
		#endswitch
	}
	
	
	
	/**
	 * Round down
	 * @param double value
	 * @return int
	 */
	static string round(double value)
	{
		#switch
		#case ifcode PHP then
		
		return round($value);
		
		#case ifcode JAVASCRIPT then
		
		return Math.round(value);
		
		#endswitch
	}
	
	
	
	/* ================ Memorize functions ================ */
	
	
	static var _memorize_cache = null;
	static var _memorize_not_found = null;
	static var _memorize_hkey = null;
	
	
	static bool @_memorizeValidHKey(var hkey, var key)
	{
		#switch
		#case ifcode PHP then
		if ( static::$_memorize_hkey == null ) static::$_memorize_hkey = [];
		if ( !isset(static::$_memorize_hkey[$hkey]) ) return false;
		if ( static::$_memorize_hkey[$hkey] == $key ) return true;
		return false;
		
		#case ifcode JAVASCRIPT then
		#endswitch
	}
	
	
	
	/**
	 * Clear memorize cache
	 */
	static void @_memorizeClear()
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._memorize_cache = null;
		#case ifcode PHP then
		static::$_memorize_cache = [];
		static::$_memorize_hkey = [];
		#endswitch
	}
	
	
	
	/**
	 * Returns cached value
	 */
	static string @_memorizeValue(string name, var args)
	{
		#switch
		#case ifcode PHP then
		
		if (static::$_memorize_cache == null) return static::$_memorize_not_found;
		if (!isset(static::$_memorize_cache[$name])) return static::$_memorize_not_found;
		
		$arr = &static::$_memorize_cache[$name];
		$sz = count($args);
		for ($i=0; $i<$sz; $i++)
		{
			$key = &$args[$i];
			$hkey = null; 
			if (gettype($key) == 'object') $hkey = spl_object_hash($key); else $hkey = $key;
			if ($i == $sz - 1)
			{
				if (in_array($hkey, array_keys($arr)))
				{
					return $arr[$hkey];
				}
				return static::$_memorize_not_found;
			}
			else
			{
				if (!isset($arr[$hkey])) return static::$_memorize_not_found;
				$arr = &$arr[$hkey];
			}
		}
		
		return static::$_memorize_not_found;
		
		#case ifcode JAVASCRIPT then
		if (this._memorize_cache == null) return this._memorize_not_found;
		if (this._memorize_cache[name] == undefined) return this._memorize_not_found;
		var arr = this._memorize_cache[name];
		var sz = args.length;
		for (var i=0; i<sz; i++)
		{
			var key = args[i];
			var hkey = null;
			if (key != null && typeof key == 'object')
			{
				if (key.__uq__ != undefined) hkey = key.__uq__;
				else return this._memorize_not_found;
			}
			else if (typeof key == 'string') hkey = "__s_" + key;
			else hkey = key;
			if (i == sz - 1)
			{
				if (arr[hkey] == undefined) return this._memorize_not_found;
				return arr[hkey];
			}
			else
			{
				if (arr[hkey] == undefined) arr[hkey] = {};
				arr = arr[hkey];
			}
		}
		
		return this._memorize_not_found;
		
		#endswitch
	}
	
	
	
	/**
	 * Returns cached value
	 */
	static string @_memorizeSave(string name, var args, var value)
	{
		#switch
		#case ifcode PHP then
		
		if (static::$_memorize_cache == null) static::$_memorize_cache = [];
		if (!isset(static::$_memorize_cache[$name])) static::$_memorize_cache[$name] = [];
		
		$arr = &static::$_memorize_cache[$name];
		$sz = count($args);
		for ($i=0; $i<$sz; $i++)
		{
			$key = &$args[$i];
			$hkey = null; 
			if (gettype($key) == 'object') $hkey = spl_object_hash($key); else $hkey = $key;
			if ($i == $sz - 1)
			{
				$arr[$hkey] = $value;
			}
			else
			{
				if (!isset($arr[$hkey])) $arr[$hkey] = [];
				else if (!static::_memorizeValidHKey($hkey, $key)) $arr[$hkey] = [];
				$arr = &$arr[$hkey];
			}
		}
		
		#case ifcode JAVASCRIPT then
		
		if (this._memorize_cache == null) this._memorize_cache = {};
		if (this._memorize_cache[name] == undefined) this._memorize_cache[name] = {};
		var arr = this._memorize_cache[name];
		var sz = args.length;
		for (var i=0; i<sz; i++)
		{
			var key = args[i];
			var hkey = null;
			if (key != null && typeof key == 'object')
			{
				if (key.__uq__ != undefined) hkey = key.__uq__;
				else hkey = null;
			}
			else if (typeof key == 'string') hkey = "__s_" + key;
			else hkey = key;
			if (i == sz - 1)
			{
				arr[hkey] = value;
			}
			else
			{
				if (arr[hkey] == undefined) arr[hkey] = {};
				arr = arr[hkey];
			}
		}
		
		#endswitch
	}
	
	
	
	/* ================ Dirty functions ================ */
	
	
	/**
	 * Sleep in ms
	 */
	static async void sleep(int time)
	{
		#switch
		#case ifcode PHP then
		usleep( $time * 1000 );
		#case ifcode JAVASCRIPT then
		await new Promise((f, e) => setTimeout(f, time));
		#endswitch
	}
	
	
	
	/**
	 * Sleep in microseconds
	 */
	static async void usleep(int time)
	{
		#switch
		#case ifcode PHP then
		usleep($time);
		#case ifcode JAVASCRIPT then
		await new Promise((f, e) => setTimeout(f, Math.round(time / 1000)));
		#endswitch
	}
	
	
	
	/**
	 * Returns unique value
	 * @param bool flag If true returns as text. Default true
	 * @return string
	 */
	static string unique(bool flag = true)
	{
		#switch
		#case ifcode PHP then
		
		return uniqid();
		
		#case ifcode JAVASCRIPT then
		
		if (flag == undefined) flag = true;
		if (flag)
			return "" + (new Date).getTime() + Math.floor((Math.random() * 899999 + 100000));
		return Symbol();
		
		#endswitch
	}
	
	
	
	/**
	 * Generate uuid
	 */
	static string uid()
	{
		#switch
		#case ifcode PHP then
		
		$bytes = bin2hex(random_bytes(16));
		return substr($bytes, 0, 8) . "-" .
			substr($bytes, 8, 4) . "-" .
			substr($bytes, 12, 4) . "-" .
			substr($bytes, 16, 4) . "-" .
			substr($bytes, 20);
		
		#case ifcode JAVASCRIPT then
		
		#endswitch
	}
	
	
	
	/**
	 * Generate timestamp based uuid
	 */
	static string time_uid()
	{
		#switch
		#case ifcode PHP then
		
		$bytes = dechex(time()) . bin2hex(random_bytes(12));
		return substr($bytes, 0, 8) . "-" .
			substr($bytes, 8, 4) . "-" .
			substr($bytes, 12, 4) . "-" .
			substr($bytes, 16, 4) . "-" .
			substr($bytes, 20);
		
		#case ifcode JAVASCRIPT then
		
		#endswitch
	}
	
	
	
	/**
	 * Returns random value x, where a <= x <= b
	 * @param int a
	 * @param int b
	 * @return int
	 */
	static int random(int a, int b)
	{
		#switch
		#case ifcode PHP then
		
		if (PHP_VERSION_ID < 70000) return mt_rand($a, $b);
		return random_int($a, $b);
		
		#case ifcode JAVASCRIPT then
		
		if (window != undefined && window.crypto != undefined && window.crypto.getRandomValues != undefined)
		{
			var s = new Uint32Array(1);
			window.crypto.getRandomValues(s);
			return Math.floor(s[0] / 4294967296 * (b - a + 1) + a);
		}
		return Math.floor(Math.random() * (b - a + 1) + a);
			
		#endswitch
	}
	
	
	
	/**
	 * Returns current unix time in seconds
	 * @return int
	 */
	static int time()
	{
		#switch
		#case ifcode PHP then
		
		return time();
		
		#case ifcode JAVASCRIPT then
		
		return Math.round((new Date()).getTime() / 1000);
		
		#endswitch
	}
	
	
	
	/**
	 * Returns unix timestamp
	 */
	static int utime()
	{
		#switch
		#case ifcode PHP then
		return microtime(true);
		#case ifcode JAVASCRIPT then
		return (new Date()).getTime() * 1000;
		#endswitch
	}
	
	
	
	/**
	 * Debug
	 */
	void @trace()
	{
		#switch
		#case ifcode PHP then
		
		$trace = debug_backtrace();
		foreach ($trace as $index => $arr)
		{
			$file = isset($arr['file']) ? $arr['file'] : "";
			$line = isset($arr['line']) ? $arr['line'] : "";
			$function = isset($arr['function']) ? $arr['function'] : "";
			echo "${index}) ${file}:${line} ${function}\n";
		}
		
		#endswitch
	}
	
	
	/* ================================ Context Functions ================================ */
	
	protected static var _global_context = null;
	
	
	/**
	 * Returns global context
	 * @return Context
	 */
	public static var @getContext()
	{
		#switch
		#case ifcode PHP then
		return static::$_global_context;
		#case ifcode NODEJS then
		return rtl._global_context;
		#case ifcode ES6 then
		return Runtime.rtl._global_context;
		#endswitch
	}
	
	
	
	/**
	 * Set global context
	 * @param Context context
	 */
	public static var @setContext(var context)
	{
		#switch
		#case ifcode PHP then
		static::$_global_context = $context;
		#case ifcode JAVASCRIPT then
		use("Runtime.rtl")._global_context = context;
		#endswitch
		return context;
	}
	
	
	/**
	 * Create global context
	 * @param Dict d
	 */
	public static async var @createContext(var d)
	{
		var context = null;
		
		#switch
		#case ifcode PHP then
		
		#case ifcode JAVASCRIPT then
		
		let Dict = use("Runtime.Dict");
		let class_name = use("Runtime.Context");
		context = await class_name.create(null, Dict.from(d));
		
		#endswitch
		
		/* Setup global context */
		static::setContext(context);
		
		return context;
	}
	
	
	
	/**
	 * Run application
	 * @param Dict d
	 */
	public static async int @runContext(var d)
	{
		var ctx = await static::createContext(d);
		return await ctx.run(ctx);
	}
	
	
	/* ============================= Runtime Utils Functions ============================= */
	
	
	/**
	 * Returns parents class names
	 * @return Vector<string>
	 */
	pure memorize Collection<string> getParents(string class_name)
	{
		Vector<string> res = new Vector();
		while (class_name != "")
		{
			res.pushValue(class_name);
			class_name = static::methodApply(class_name, "getParentClassName");
		}
		
		return res.toCollection();
	}
	
	
	
	/**
	 * Returns class annotations
	 */
	pure memorize Collection getClassAnnotations(string class_name, Collection res = null)
	{
		if (res == null) res = [];
		Dict info = static::methodApply(class_name, "getClassInfo");
		Collection arr = info["annotations"] |> default Collection [];
		return res.concat(arr);
	}
	
	
	
	/**
	 * Returns class annotations with parents
	 */
	pure memorize Collection getClassAnnotationsWithParents(string class_name)
	{
		Collection res = {};
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			res = static::getClassAnnotations(parent_class_name, res);
		}
		return res;
	}
	
	
	
	/**
	 * Returns field info
	 */
	pure memorize Dict getFieldInfo(string class_name, string field_name)
	{
		Dict res = static::methodApply(class_name, "getFieldInfoByName", [field_name]);
		return res;
	}
	
	
	
	/**
	 * Returns field info
	 */
	pure memorize Dict getFieldInfoWithParents(string class_name, string field_name)
	{
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			Dict res = static::methodApply(parent_class_name, "getFieldInfoByName", [field_name]);
			if (res != null) return res;
		}
		return null;
	}
	
	
	
	/**
	 * Returns fields of class
	 */
	pure memorize Collection getFields(string class_name, int flag = 255)
	{
		Vector<string> names = new Vector();
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			Collection<string> item_fields = static::methodApply
			(
				parent_class_name, "getFieldsList", [flag]
			);
			if (item_fields != null)
			{
				names.appendVector(item_fields);
			}
		}
		return names.toCollection().removeDuplicatesIm();
	}
	
	
	
	/**
	 * Returns fields annotations
	 */
	pure memorize Dict getFieldsAnnotations(string class_name, Dict res = null)
	{
		if (res == null) res = {};
		Collection<string> methods = static::methodApply(class_name, "getFieldsList", [255]);
		for (int i=0; i<methods.count(); i++)
		{
			string method_name = methods[i];
			Dict info = static::methodApply(class_name, "getFieldInfoByName", [method_name]);
			Collection annotations = info["annotations"];
			Collection arr = res[method_name] |> default Collection [];
			res <= { method_name } <= arr.concat(annotations);
		}
		return res;
	}
	
	
	
	/**
	 * Returns fields annotations with parents
	 */
	pure memorize Dict getFieldsAnnotationsWithParents(string class_name)
	{
		Dict res = {};
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			res = static::getFieldsAnnotations(parent_class_name, res);
		}
		return res;
	}
	
	
	
	/**
	 * Returns methods annotations
	 */
	pure memorize Dict getMethodsAnnotations(string class_name, Dict res = null)
	{
		if (res == null) res = {};
		Collection<string> methods = static::methodApply(class_name, "getMethodsList", [255]);
		for (int i=0; i<methods.count(); i++)
		{
			string method_name = methods[i];
			Dict info = static::methodApply(class_name, "getMethodInfoByName", [method_name]);
			Collection annotations = info["annotations"];
			Collection arr = res[method_name] |> default Collection [];
			res <= { method_name } <= arr.concat(annotations);
		}
		return res;
	}
	
	
	
	/**
	 * Returns methods annotations with parents
	 */
	pure memorize Dict getMethodsAnnotationsWithParents(string class_name)
	{
		Dict res = {};
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			res = static::getMethodsAnnotations(parent_class_name, res);
		}
		return res;
	}
	
	
	/* ============================= Serialization Functions ============================= */
	
	
	static var ObjectToNative(var value, bool force_class_name = true)
	{
		var value1 = static::ObjectToPrimitive(value, force_class_name);
		var value2 = static::PrimitiveToNative(value1);
		return value2;
	}
	static var NativeToObject(var value)
	{
		var value1 = static::NativeToPrimitive(value);
		var value2 = static::PrimitiveToObject(value1);
		return value2;
	}
	
	
	
	/**
	 * Returns object to primitive value
	 * @param var obj
	 * @return var
	 */
	public static var ObjectToPrimitive(var obj, bool force_class_name = true)
	{
	
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		
		if (obj instanceof Collection)
		{
			return obj.map(
				var (var value) use (force_class_name)
				{
					return static::ObjectToPrimitive( value, force_class_name );
				}
			);
		}
		
		if (obj instanceof Dict)
		{
			
			obj = obj.map(
				var (var value, string key) use (force_class_name)
				{
					return static::ObjectToPrimitive( value, force_class_name );
				}
			);
			
			return obj.toDict();
		}
		
		if (obj instanceof Date)
		{
			return obj;
		}
		if (obj instanceof DateTime)
		{
			return obj;
		}
		
		if (obj instanceof BaseStruct)
		{
			Map<var> values = new Map();
			Collection<string> names = rtl::getFields(obj.getClassName());
			
			for (int i=0; i<names.count(); i++)
			{
				string variable_name = names.item(i);
				var value = obj.get(variable_name, null);
				var value = static::ObjectToPrimitive( value, force_class_name );
				values.setValue(variable_name, value);
			}
			
			if (force_class_name)
			{
				values.setValue("__class_name__", obj.getClassName());
			}
			delete names;
			
			return values.toDict();
		}
		
		return null;
	}
	
	
	
	/**
	 * Returns object to primitive value
	 * @param SerializeContainer container
	 * @return var
	 */
	public static var PrimitiveToObject(var obj)
	{
		if (obj === null) return null;
		if (rtl::isScalarValue(obj)) return obj;
		
		if (obj instanceof Collection)
		{
			Vector<var> res = new Vector();
			for (int i=0; i<obj.count(); i++)
			{
				var value = obj.item(i);
				value = static::PrimitiveToObject(value);
				res.pushValue(value);
			}
			return res.toCollection();
		}
		
		if (obj instanceof Dict)
		{
			Map<var> res = new Map();
			Vector<string> keys = obj.keys();
		
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys.item(i);
				var value = obj.item(key);
				value = static::PrimitiveToObject(value);
				res.setValue(key, value);
			}
			
			delete keys;
			
			if ( !res.has("__class_name__") ) return res.toDict();
			if ( res.item("__class_name__") == "Runtime.Map" or res.item("__class_name__") == "Runtime.Dict" )
			{
				res.remove("__class_name__");
				return res.toDict();
			}
			
			string class_name = res.item("__class_name__");
			if (not rtl::class_exists(class_name))
			{
				return null;
			}
			if (not rtl::class_implements(class_name, "Runtime.SerializeInterface"))
			{
				return null;
			}
			
			/* Assign values */
			Map<var> obj = new Map();
			Collection<string> names = rtl::getFields(class_name);
			for (int i=0; i<names.count(); i++)
			{
				string variable_name = names.item(i);
				if (variable_name != "__class_name__") 
				{
					var value = res.get(variable_name, null);
					obj.setValue(variable_name, value);
				}
			}
			
			/* New instance */
			var instance = rtl::newInstance(class_name, [obj]);
			
			delete res;
			delete obj;
			
			return instance;
		}
		
		if (obj instanceof Date)
		{
			return obj;
		}
		if (obj instanceof DateTime)
		{
			return obj;
		}
		
		return null;
	}
	
	
	static var NativeToPrimitive(var value)
	{
		#switch
		#case ifcode PHP then
		
		if ($value === null)
			return null;
			
		if (is_object($value))
		{
			if (isset($value->__class_name__) && $value->__class_name__ == "Runtime.Date")
			{
				$value = \Runtime\Dict::from($value);
				$res = new \Runtime\Date($ctx, $value);
				return $res;
			}
			else if (isset($value->__class_name__) && $value->__class_name__ == "Runtime.DateTime")
			{
				$value = \Runtime\Dict::from($value);
				$res = new \Runtime\DateTime($ctx, $value);
				return $res;
			}
			else
			{
				$res = \Runtime\Dict::from($value);
				$res = $res->map($ctx, function ($ctx, $val, $key){
					return static::NativeToPrimitive($ctx, $val);
				});
				return $res;
			}
		}
		
		if (is_array($value))
		{
			if ( isset($value['__class_name__']) )
			{
				if ($value['__class_name__'] == "Runtime.Date")
				{
					$res = \Runtime\Date::from($value);
					return $res;
				}
				else if ($value['__class_name__'] == "Runtime.DateTime")
				{
					$res = \Runtime\DateTime::from($value);
					return $res;
				}
				else
				{
					$res = \Runtime\Dict::from($value);
					$res = $res->map($ctx, function ($ctx, $val, $key){
						return static::NativeToPrimitive($ctx, $val);
					});
					return $res;
				}
			}
			$arr = array_values($value);
			$res = \Runtime\Collection::from($arr);
			$res = $res->map($ctx, function ($ctx, $item){
				return static::NativeToPrimitive($ctx, $item);
			});
			return $res;
		}
		
		return $value;
	
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		var _Dict = use("Runtime.Dict");
		
		if (value === null)
			return null;
		
		if (Array.isArray(value))
		{
			var new_value = _Collection.from(value);
			new_value = new_value.map(ctx, (ctx, val)=>{
				return _Utils.NativeToPrimitive(ctx, val);
			});
			return new_value;
		}
		if (typeof value == 'object')
		{
			if (value["__class_name__"] == "Runtime.Date")
			{
				var new_value = _Date.from(value);
				return new_value;
			}
			if (value["__class_name__"] == "Runtime.DateTime")
			{
				var new_value = _DateTime.from(value);
				return new_value;
			}
			var new_value = _Dict.from(value);
			new_value = new_value.map(ctx, (ctx, val, key)=>{
				return _Utils.NativeToPrimitive(ctx, val);
			});
			return new_value;
		}
		
		return value;
		#endswitch
	}
	
	static var PrimitiveToNative(var value)
	{
		#switch
		
		#case ifcode PHP then
		
		if ($value === null)
			return null;
		
		if ($value instanceof \Runtime\Date)
		{
			$value = $value->toDict($ctx)->setIm($ctx, "__class_name__", "Runtime.Date");
		}
		else if ($value instanceof \Runtime\DateTime)
		{
			$value = $value->toDict($ctx)->setIm($ctx, "__class_name__", "Runtime.DateTime");
		}
		
		if ($value instanceof \Runtime\Collection)
		{
			$arr = [];
			$value->each
			(
				$ctx,
				function ($ctx, $v) use (&$arr)
				{
					$arr[] = static::PrimitiveToNative($ctx, $v);
				}
			);
			return $arr;
		}
		
		if ($value instanceof \Runtime\Dict)
		{
			$arr = [];
			$value->each
			(
				$ctx,
				function ($ctx, $v, $k) use (&$arr)
				{
					$arr[$k] = static::PrimitiveToNative($ctx, $v);
				}
			);
			return $arr;
		}
		
		#case ifcode JAVASCRIPT then
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _DateTime = use("Runtime.DateTime");
		var _Date = use("Runtime.Date");
		var _Dict = use("Runtime.Dict");
		
		if (value === null)
			return null;
		
		if (value instanceof _Date)
		{
			value = value.toDict(ctx).setIm(ctx, "__class_name__", "Runtime.Date");
		}
		else if (value instanceof _DateTime)
		{
			value = value.toDict(ctx).setIm(ctx, "__class_name__", "Runtime.DateTime");
		}
		
		if (value instanceof _Collection)
		{
			var arr = [];
			value.each(ctx, (ctx, v)=>{
				arr.push( _Utils.PrimitiveToNative(ctx, v) );
			});
			return arr;
		}
		if (value instanceof _Dict)
		{
			var obj = {};
			value.each(ctx, (ctx, v, k)=>{
				obj[k] = _Utils.PrimitiveToNative(ctx, v);
			});
			return obj;
		}
		
		#endswitch
		
		return value;
	}
	
	
	
	static const int JSON_PRETTY = 1;
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	static string json_encode(var value, int flags = 0, bool convert = true)
	{
		#switch
		#case ifcode PHP then
		if ($convert){
			$value = static::ObjectToNative($ctx, $value);
		}
		$json_flags = JSON_UNESCAPED_UNICODE;
		if ( ($flags & 1) == 1 ) $json_flags = $json_flags | JSON_PRETTY_PRINT;
		return json_encode($value, $json_flags);
		
		#case ifcode JAVASCRIPT then
		if (flags == undefined) flags = 0;
		if (convert == undefined) convert = true;
		
		var _rtl = use("Runtime.rtl");
		var _Utils = use("Runtime.RuntimeUtils");
		var _Collection = use("Runtime.Collection");
		var _Dict = use("Runtime.Dict");
		var _Date = use("Runtime.Date");
		var _DateTime = use("Runtime.DateTime");
		
		if (convert) value = _Utils.ObjectToPrimitive(ctx, value);
		return JSON.stringify(value, (key, value) => {
			if (value instanceof _Date) value = value.toDict().setIm("__class_name__", "Runtime.Date");
			if (value instanceof _DateTime) value = value.toDict().setIm("__class_name__", "Runtime.DateTime");
			if (value instanceof _Collection) return value;
			if (value instanceof _Dict) return value.toObject();
			if (_rtl.isScalarValue(value)) return value;
			return null;
		});
		#endswitch
	}
	
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return var 
	 */
	static var json_decode(var obj)
	{
		#switch
		#case ifcode PHP then
	
		$res = @json_decode($obj, false);
		if ($res === null || $res === false)
			return null;
		return static::NativeToObject($ctx, $res);
	
		#case ifcode JAVASCRIPT then
		try{
			
			var _rtl = use("Runtime.rtl");
			var _Utils = use("Runtime.RuntimeUtils");
			var _Collection = use("Runtime.Collection");
			var _Dict = use("Runtime.Dict");
			
			var obj = JSON.parse(obj, function (key, value){
				if (value == null) return value;
				if (Array.isArray(value)){
					return _Collection.from(value);
				}
				if (typeof value == 'object'){
					return _Dict.from(value);
				}
				return value;
			});
			return this.PrimitiveToObject(ctx, obj);
		}
		catch(e){
			throw e;
		}
		return null;
		#endswitch
	}
}


#switch
#case ifcode PHP then
rtl::$_memorize_not_found = (object) ['s' => 'memorize_key_not_found'];

#case ifcode ES6 then
var use = function(s){return Runtime.rtl.find_class(s);}

#case ifcode JAVASCRIPT then
if (typeof Runtime != 'undefined' && typeof Runtime.rtl != 'undefined')
	Runtime.rtl._memorize_not_found = {'s':'memorize_key_not_found','id':Symbol()};

#case ifcode NODEJS then

Runtime.rtl.runApp = async function (d)
{
	let code = 0;
	
	try
	{
		code = await Runtime.rtl.runContext(d);
	}
	catch (e)
	{
		process.stderr.write("\x1B[0;91m");
		process.stderr.write(e.stack);
		process.stderr.write("\x1B[0m\n");
	}

	process.exit(code);
}
#endswitch
