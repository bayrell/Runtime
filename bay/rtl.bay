/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.Callback;
use Runtime.Collection;
use Runtime.Context;
use Runtime.Date;
use Runtime.DateTime;
use Runtime.Dict;
use Runtime.Map;
use Runtime.Monad;
use Runtime.Serializer;
use Runtime.Vector;
use Runtime.Exceptions.AssertException;


class rtl
{
	/* Log level */
	
	/**
	 * Fatal error. Application stoped
	 */
	static const int LOG_FATAL = 0;
	
	/**
	 * Critical error. Application damaged, but works
	 */	
	static const int LOG_CRITICAL = 2;
	
	/**
	 * Any Application error or exception
	 */	
	static const int LOG_ERROR = 4;
	
	/**
	 * Log warning. Developer should attention to this
	 */
	static const int LOG_WARNING = 6;
	
	/**
	 * Information about any event
	 */
	static const int LOG_INFO = 8;
	
	/**
	 * Debug level 1
	 */
	static const int LOG_DEBUG = 10;
	
	/**
	 * Debug level 2
	 */	
	static const int LOG_DEBUG2 = 12;
	
	/* Status codes */ 
	static const int STATUS_PLAN = 0;
	static const int STATUS_DONE = 1;
	static const int STATUS_PROCESS = 100;
	static const int STATUS_FAIL = -1;
	
	/* Errors */
	static const int ERROR_NULL = 0;
	static const int ERROR_OK = 1;
	static const int ERROR_PROCCESS = 100;
	static const int ERROR_FALSE = -100;
	static const int ERROR_UNKNOWN = -1;
	static const int ERROR_INDEX_OUT_OF_RANGE = -2;
	static const int ERROR_KEY_NOT_FOUND = -3;
	static const int ERROR_STOP_ITERATION = -4;
	static const int ERROR_FILE_NOT_FOUND = -5;
	static const int ERROR_ITEM_NOT_FOUND = -5;
	static const int ERROR_OBJECT_DOES_NOT_EXISTS = -5;
	static const int ERROR_OBJECT_ALLREADY_EXISTS = -6;
	static const int ERROR_ASSERT = -7;
	static const int ERROR_REQUEST = -8;
	static const int ERROR_RESPONSE = -9;
	static const int ERROR_CSRF_TOKEN = -10;
	static const int ERROR_RUNTIME = -11;
	static const int ERROR_VALIDATION = -12;
	static const int ERROR_PARSE_SERIALIZATION_ERROR = -14;
	static const int ERROR_ASSIGN_DATA_STRUCT_VALUE = -15;
	static const int ERROR_AUTH = -16;
	static const int ERROR_DUPLICATE = -17;
	static const int ERROR_API_NOT_FOUND = -18;
	static const int ERROR_API_WRONG_FORMAT = -19;
	static const int ERROR_API_WRONG_APP_NAME = -20;
	static const int ERROR_API_ERROR = -21;
	static const int ERROR_FATAL = -99;
	static const int ERROR_HTTP_CONTINUE = -100;
	static const int ERROR_HTTP_SWITCH = -101;
	static const int ERROR_HTTP_PROCESSING = -102;
	static const int ERROR_HTTP_OK = -200;
	static const int ERROR_HTTP_BAD_GATEWAY = -502;
	static const int ERROR_USER = -10000;
	
	
	/**
	 * Define class
	 */
	static bool @defClass(var obj)
	{
		#switch
		#case ifcode ES6 then
		if (Runtime.rtl._classes == undefined) Runtime.rtl._classes = {};
		Runtime.rtl._classes[obj.getClassName()] = obj;
		#endswitch
	}
	
	
	/**
	 * Find class instance by name. If class does not exists return null.
	 * @return var - class instance
	 */
	static var @find_class(string class_name)
	{
		#switch
		#case ifcode PHP then
		return "\\" . preg_replace("/\\./", "\\", $class_name);
		
		#case ifcode ES6 then
		if (class_name instanceof Function)
			return class_name;
		
		if (window[class_name] != undefined)
			return window[class_name];
			
		return Runtime.rtl._classes[class_name];
		
		#case ifcode NODEJS then
		if (class_name instanceof Function)
			return class_name;
		
		return use(class_name);
		
		#endswitch
	}
	
	
	/**
	 * Returns true if class instanceof class_name
	 * @return bool
	 */
	static bool is_instanceof(var obj, string class_name)
	{
		if (obj == null) return false;
		
		#switch
		#case ifcode PHP then
		
		$class_name = static::find_class($class_name);
		if (gettype($obj) != "object") return false;
		if (is_subclass_of($obj, $class_name)){ return true;}
		return is_a($obj, $class_name);
	
		#case ifcode JAVASCRIPT then
		
		var c = this.find_class(class_name);
		if (c == null) return false;
		return c.prototype.isPrototypeOf(obj);
	
		#endswitch
	}
	
	
	/**
	 * Returns true if obj implements interface_name
	 * @return bool
	 */
	static bool is_implements(var obj, string interface_name)
	{
		return static::class_implements(obj::getClassName(), interface_name);
	}
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool class_implements(string class_name, string interface_name)
	{
		#switch
		#case ifcode PHP then
		
		$class_name = static::find_class($class_name);
		$interface_name = static::find_class($interface_name);
		$arr = @class_implements($class_name, true);
		if ($arr == false){
			return false;
		}
		foreach ($arr as $name)
		{
			if ($name == $interface_name or "\\" . $name == $interface_name)
				return true;
		}
		return false;
		
		#case ifcode JAVASCRIPT then
		var obj = this.find_class(class_name);
		var obj2 = this.find_class(interface_name);
		
		while (obj != null){
			if (obj.__implements__){
				if (obj.__implements__.indexOf( obj2 ) > -1 ){
					return true;
				}
			}
			obj = obj.__proto__;
		}
		
		return false;
		
		#endswitch
	}
	
	
	/**
	 * Returns interface of class
	 * @param string class_name
	 * @return Collection<string>
	 */
	static Vector<string> getInterfaces(string class_name)
	{
		#switch
		#case ifcode PHP then
		$arr = array_values(class_implements(rtl::find_class($class_name)));
		$arr = array_map
		(
			function($s){ return str_replace("\\", ".", $s); },
			$arr
		);
		return \Runtime\Vector::from($arr);
		#case ifcode JAVASCRIPT then
		return Runtime.Vector.from(this.find_class(class_name).__implements__);
		#endswitch
	}
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool class_exists(string class_name)
	{
		#switch
		#case ifcode PHP then
		$class_name = static::find_class($class_name);
		return class_exists($class_name);
		
		#case ifcode JAVASCRIPT then
		var obj = this.find_class(class_name);
		if (!this.exists(obj)) return false;
		return true;
		
		#endswitch
	}
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool get_class_name(var obj)
	{
		if (static::isString(obj)) return obj;
		return obj::getClassName();
	}
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	static bool method_exists(string class_name, string method_name)
	{
		#switch
		#case ifcode PHP then
		
		if (gettype($class_name) == "object")
		{
			try
			{
				$r = new \ReflectionMethod(get_class($class_name),$method_name);
				if (!$r) return false;
				if ($r->isStatic()) return false;
				return true;
			}
			catch (\Exception $e) {}
			
			return false;
		}
		
		$class_name = static::find_class($class_name);
		if (!class_exists($class_name)) return false;
		
		try
		{
			$r = new \ReflectionMethod($class_name,$method_name);
			if (!$r) return false;
			if (!$r->isStatic()) return false;
			return true;
		}
		catch (\Exception $e) {}
		
		return false;
		
		#case ifcode JAVASCRIPT then
		
		if (typeof(class_name) == "object")
		{
			if (class_name[method_name] != undefined) return true;
			return false;
		}
		
		var obj = this.find_class(class_name);
		if (!this.exists(obj)) return false;
		if (this.exists(obj[method_name])) return true;
		return false;
	
		#endswitch
	}
	
	
	/**
	 * Create object by class_name. If class name does not exists return null
	 * @return Object
	 */
	static Object newInstance(string class_name, Collection<var> args = null)
	{
		#switch
		#case ifcode PHP then
		
		$class_name = static::find_class($class_name);
		if ($args == null)
			return new $class_name();
		$r = new \ReflectionClass($class_name);
		$arr = $args->_arr;
		return $r->newInstanceArgs($arr);
		
		#case ifcode JAVASCRIPT then
		
		var obj = this.find_class(class_name);
		if (!this.exists(obj) || !(obj instanceof Function))
		{
			throw new Runtime.Exceptions.ItemNotFound(class_name, "class name");
		}
		if (args == undefined || args == null){ args = []; } else { args = args.toArray(); }
		args = args.slice(); 
		args.unshift(null);
		var f = Function.prototype.bind.apply(obj, args);
		return new f;
		
		#endswitch
	}
	
	
	/**
	 * Returns callback
	 * @return fn
	 */
	static Callback method(var obj, string method_name)
	{
		return new Callback(obj, method_name);
	}
	
	
	/**
	 * Call function
	 * @return fn
	 */
	static var apply(fn f, Collection args = null)
	{
		#switch
		#case ifcode PHP then
		
		if ($args == null) $args = [];
		else if ($args instanceof \Runtime\Collection) $args = $args->_arr;
		
		if ($f instanceof \Runtime\Callback)
		{
			if (!$f->exists())
			{
				throw new \Runtime\Exceptions\RuntimeException("Method '" .
					$f->name . "' not found in " .
					static::get_class_name($f->obj)
				);
			}
			
			$obj = $f->obj;
			if (gettype($obj) == "string") $obj = static::find_class($obj);
			return call_user_func_array([$obj, $f->name], $args);
		}
		
		return call_user_func_array($f, $args);
		
		#case ifcode JAVASCRIPT then
		
		if (args == null) args = [];
		else args = Array.prototype.slice.call(args);
		
		if (f instanceof Runtime.Callback)
		{
			let obj = f.obj;
			let method_name = f.name;
			if (typeof obj == "string") obj = this.find_class(obj);
			if (!this.exists(obj) || !this.exists(obj[method_name]))
			{
				throw new Runtime.Exceptions.RuntimeException("Method '" +
					this.name + "' not found in " +
					this.get_class_name(this.obj)
				);
			}
			return Runtime.rtl.apply(obj[f.name].bind(obj), args);
		}
		
		return f.apply(null, args);
		#endswitch
	}
	
	
	/**
	 * Run async function
	 * @return fn
	 */
	static void runAsync(fn f, Collection args = null)
	{
		#switch
		#case ifcode PHP then
		#case ifcode JAVASCRIPT then
		(async () => {
			try
			{
				await Runtime.rtl.apply(f, args);
			}
			catch (e)
			{
				Runtime.io.print_error(e);
			}
		})()
		#endswitch
	}
	
	
	/**
	 * Returns callback
	 * @return var
	 */
	static var attr(var item, Collection path, var def_val = null)
	{
		if (path === null) return def_val;
		#switch
		#case ifcode PHP then
		
		if ($item === null) return $def_val;
		if (gettype($path) == "array") $path = \Runtime\Collection::from($path);
		else if (static::isScalarValue($path)) $path = \Runtime\Collection::from([$path]);
		if (!($path instanceof \Runtime\Collection)) return $def_val;
		if (count($path->_arr) == 0) 
		{
			return $item;
		}
		if (is_string($item)) return mb_substr($item, $path->_arr[0], 1);
		$key = $path->first();
		$path = $path->slice(1);
		$val = $def_val;
		if (
			$item instanceof \Runtime\Dict or
			$item instanceof \Runtime\Collection or
			$item instanceof \Runtime\BaseStruct
		)
		{
			$item = $item->get($key, $def_val);
			$val = static::attr($item, $path, $def_val);
			return $val;
		}
		else if ($item instanceof \Runtime\BaseObject)
		{
			if (property_exists($item, $key)) $item = $item->$key;
			else $item = $def_val;
			$val = static::attr($item, $path, $def_val);
			return $val;
		}
		return $def_val;
		
		#case ifcode JAVASCRIPT then
		var Collection = use("Runtime.Collection");
		var Dict = use("Runtime.Dict");
		var BaseStruct = use("Runtime.BaseStruct");
		var BaseObject = use("Runtime.BaseObject");
		
		if (def_val == undefined) def_val = null;
		if (item === null) return def_val;
		if (item === undefined) return def_val;
		if (Array.isArray(path) && path.count == undefined) path = Collection.from(path);
		if (this.isScalarValue(path)) path = Collection.from([path]);
		if (!(path instanceof Collection)) return def_val;
		if (path.count() == 0)
		{
			return item;
		}
		if (typeof item == "string") return item.charAt(path[0]);
		var key = path.first();
		var path = path.slice(1);
		var val = def_val;
		if (
			item instanceof Dict ||
			item instanceof Collection ||
			item instanceof BaseStruct
		)
		{
			var new_item = item.get(key, def_val);
			val = this.attr(new_item, path, def_val);
			return val;
		}
		else
		{
			var new_item = item[key] || def_val;
			val = this.attr(new_item, path, def_val);
			return val;
		}
		return def_val;
		
		#endswitch
	}
	
	
	/**
	 * Update current item
	 * @return var
	 */
	static var setAttr(var item, Vector attrs, var new_value)
	{
		if (attrs == null) return item;
		#switch
		#case ifcode PHP then
		if (gettype($attrs) == "string") $attrs = \Runtime\Vector::from([$attrs]);
		else if (gettype($attrs) == "array") $attrs = \Runtime\Vector::from($attrs);
		#case ifcode JAVASCRIPT then
		var Vector = use("Runtime.Vector");
		if (typeof attrs == "string") attrs = Vector.from([attrs]);
		else if (Array.isArray(attrs) && attrs.count == undefined) attrs = Vector.from(attrs);
		#endswitch
		
		fn f = var (Vector attrs, var data, var new_value, var f)
		{
			if (attrs.count() == 0) return new_value;
			if (data == null) data = {};
			
			var new_data = null;
			var attr_name = attrs.first();
			attrs.removeItem(0);
			
			if (data instanceof BaseStruct)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs, attr_data, new_value, f);
				var d = (new Map()).set(attr_name, res);
				new_data = data.copy(d);
			}
			else if (data instanceof BaseObject)
			{
				var attr_data = data.takeValue(attr_name, null);
				var res = f(attrs, attr_data, new_value, f);
				new_data = data;
				new_data.assignValue(attr_name, res);
			}
			else if (data instanceof Dict)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs, attr_data, new_value, f);
				new_data = data.setIm( attr_name, res );
			}
			else if (data instanceof Collection)
			{
				var attr_data = data.get(attr_name, null);
				var res = f(attrs, attr_data, new_value, f);
				new_data = data.setIm( attr_name, res );
			}
			
			return new_data;
		};
		
		var new_item = f(attrs, item, new_value, f);
		return new_item;
	}
	
	
	/**
	 * Convert monad by type
	 */
	pure fn m_to(string type_value, var def_value = null) =>
		bool (Monad m) use (type_value, def_value) =>
			new Monad
			(
				m.err == null ? static::convert( m.val, type_value, def_value ) : def_value
			)
	;
	
	
	/**
	 * Convert monad to default value
	 */
	pure fn m_def(var def_value = null) =>
		bool (Monad m) use (def_value) =>
			(m.err != null or m.val === null) ? new Monad(def_value) : m
	;
	
	
	/**
	 * Returns value if value instanceof type_value, else returns def_value
	 * @param var value
	 * @param string type_value
	 * @param var def_value
	 * @param var type_template
	 * @return var
	 */
	static var convert(var v, string t, var d = null)
	{
		if (v === null) return d;
		if (t == "mixed" or t == "primitive" or t == "var" or t == "fn" or t == "callback") return v;
		if (t == "bool" or t == "boolean") return static::toBool(v);
		else if (t == "string") return static::toString(v);
		else if (t == "int") return static::toInt(v);
		else if (t == "float" or t == "double") return static::toFloat(v);
		else if (static::is_instanceof(v, t)) return v;
		return null;
	}
	
	
	/**
	 * Returns value
	 * @param var value
	 * @param var def_val
	 * @param var obj
	 * @return var
	 */
	static var @to(var v, var o)
	{
		var ctx = null;
		var e = "";
		
		#switch
		#case ifcode PHP then
		$e = $o["e"];
		#case ifcode JAVSCRIPT then
		e = o.e;
		#endswitch
		
		return static::convert(v, e);
	}
	
	
	/**
	 * Return true if value is empty
	 * @param var value
	 * @return bool
	 */
	static bool isEmpty(var value)
	{
		return (not static::exists(value)) or
			value === null or
			value === "" or
			value === false or
			value === 0
		;
	}
	
	
	/**
	 * Return true if value is exists
	 * @param var value
	 * @return bool
	 */
	static bool exists(var value)
	{
		#switch
		#case ifcode PHP then
		return isset($value);
		
		#case ifcode JAVASCRIPT then
		
		return (value != null) && (value != undefined);
		#endswitch
	}
	
	
	/**
	 * Returns true if value is scalar value
	 * @return bool
	 */
	static string getType(var value)
	{
		if (value == null) return "null";
		if (rtl::isString(value)) return "string";
		if (rtl::isInt(value)) return "int";
		if (rtl::isDouble(value)) return "double";
		if (rtl::isBoolean(value)) return "boolean";
		if (rtl::isCallable(value)) return "fn";
		if (value instanceof Collection) return "collection";
		if (value instanceof Dict) return "dict";
		if (value instanceof BaseObject) return "object";
		return "unknown";
	}
	
	
	/**
	 * Returns true if value is scalar value
	 * @return bool 
	 */
	static bool isScalarValue(var value)
	{
		if (value == null) return true;
		if (rtl::isString(value)) return true;
		if (rtl::isInt(value)) return true;
		if (rtl::isDouble(value)) return true;
		if (rtl::isBoolean(value)) return true;
		return false;
	}
	
	
	/**
	 * Return true if value is boolean
	 * @param var value
	 * @return bool
	 */
	static bool isBoolean(var value)
	{
		if (value === false or value === true) return true;
		return false;
	}
	
	
	/**
	 * Return true if value is boolean
	 * @param var value
	 * @return bool
	 */
	static bool isBool(var value) => static::isBoolean(value);
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return bool
	 */
	static bool isInt(var value)
	{
		#switch
		#case ifcode PHP then
		
		return is_int($value);
		
		#case ifcode JAVASCRIPT then
		
		if (typeof value != "number") return false;
		if (value % 1 !== 0) return false;
		return true;
		
		#endswitch
	}
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return bool
	 */
	static bool isDouble(var value)
	{
		#switch
		#case ifcode PHP then
		return is_int($value) or is_float($value);
		
		#case ifcode JAVASCRIPT then
		
		if (typeof value == "number") return true;
		return false;
		
		#endswitch
	}
	
	
	/**
	 * Return true if value is string
	 * @param var value
	 * @return bool
	 */
	static bool isString(var value)
	{
		#switch
		#case ifcode PHP then
		
		return is_string($value);
	
		#case ifcode JAVASCRIPT then
		
		if (typeof value == 'string') return true;
		else if (value instanceof String) return true;
		return false;
		
		#endswitch
	}
	
	
	/**
	 * Return true if value is function
	 * @param var value
	 * @return bool
	 */
	static bool isCallable(var value)
	{
		if (value instanceof Callback) return true;
		
		#switch
		#case ifcode PHP then
		return is_callable($value);
		#case ifcode JAVASCRIPT then
		if (typeof(value) == 'function') return true;
		#endswitch
		
		return false;
	}
	
	
	/**
	 * Return true if value is Promise
	 * @param var value
	 * @return bool
	 */
	static bool isPromise(var value)
	{
		#ifcode JAVASCRIPT then
		if (value instanceof Promise) return true;
		#endif
		return false;
	}
	
	
	/**
	 * Convert value to string
	 * @param var value
	 * @return string
	 */
	static string toString(var value)
	{
		#switch
		#case ifcode PHP then
		
		$t = gettype($value);
		if ($value === null) return "";
		if (is_string($value)) return $value;
		if ($value instanceof \Runtime\StringInterface) return $value->toString();
		if (is_int($value) or is_float($value) or is_int($value))
			return (string)$value;
		if ($value === true) return "1";
		if ($value === false) return "";
		return (string)$value;
		
		#case ifcode JAVASCRIPT then
		
		var _StringInterface = use("Runtime.StringInterface");
		
		if (value === null) return "";
		if (typeof value == 'string') return value;
		if (typeof value == 'number') return ""+value;
		if (value instanceof String) return ""+value;
		if (typeof value == 'object' && this.is_implements(value, _StringInterface))
			return value.toString();
		return ""+value;
		
		#endswitch
	}
	
	
	/**
	 * Convert value to string
	 * @param var value
	 * @return string
	 */
	static string @toStr(var value)
	{
		return static::toString(value);
	}
	
	
	/**
	 * Convert value to int
	 * @param var value
	 * @return int
	 */
	static int toInt(var val)
	{
		#switch
		#case ifcode PHP then
	
		$res = (int)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = parseInt(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return 0;
	}
	
	
	/**
	 * Convert value to boolean
	 * @param var value
	 * @return bool
	 */
	static bool toBool(var val)
	{
		#switch
		#case ifcode PHP then
		
		if ($val === false || $val === "false") return false;
		if ($val === true || $val === "true") return true;
		$res = (bool)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = false;
		if (val == false || val == 'false') return false;
		if (val == true || val == 'true') return true;
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return false;
	}
	
	
	/**
	 * Convert value to float
	 * @param var value
	 * @return float
	 */
	static float toFloat(var val)
	{
		#switch
		#case ifcode PHP then
		
		$res = floatval($val);
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		
		#case ifcode JAVASCRIPT then
		
		var res = parseFloat(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		
		#endswitch
		return 0;
	}
	
	
	/* ============================= Instrospection ============================= */
	
	
	/**
	 * Returns parents class names
	 * @return Vector<string>
	 */
	pure memorize Collection<string> getParents(string class_name)
	{
		Vector<string> res = new Vector();
		while (class_name != "")
		{
			Callback getParentClassName = new Callback(class_name, "getParentClassName");
			if (not getParentClassName.exists()) break;
			
			class_name = static::apply(getParentClassName);
			if (class_name == "") break;
			
			res.push(class_name);
		}
		return res.toCollection();
	}
	
	
	/**
	 * Returns fields of class
	 */
	pure memorize Collection getFields(string class_name, int flag = 255)
	{
		Vector<string> names = new Vector();
		
		fn appendFields = void (string parent_class_name) use (names, flag)
		{
			Callback getFieldsList = new Callback(parent_class_name, "getFieldsList");
			if (not getFieldsList.exists()) return;
			
			Collection<string> item_fields = static::apply(getFieldsList, [flag]);
			if (not item_fields) return;
			
			names.appendItems(item_fields);
		}
		
		appendFields(class_name);
		
		Collection<string> parents = static::getParents(class_name);
		for (int i=0; i<parents.count(); i++)
		{
			string parent_class_name = parents[i];
			appendFields(parent_class_name);
		}
		
		return names.removeDuplicates().toCollection();
	}
	
	
	
	/* ====================== Assert ====================== */
	
	static void assert(bool expr, string message)
	{
		if (not expr)
		{
			throw new AssertException(message);
		}
	}
	
	
	/* ================ Memorize functions ================ */
	
	static var _memorize_cache = null;
	static var _memorize_not_found = null;
	static var _memorize_hkey = null;
	
	
	static bool @_memorizeValidHKey(var hkey, var key)
	{
		#switch
		#case ifcode PHP then
		if ( static::$_memorize_hkey == null ) static::$_memorize_hkey = [];
		if ( !isset(static::$_memorize_hkey[$hkey]) ) return false;
		if ( static::$_memorize_hkey[$hkey] == $key ) return true;
		return false;
		
		#case ifcode JAVASCRIPT then
		#endswitch
	}
	
	
	/**
	 * Clear memorize cache
	 */
	static void @_memorizeClear()
	{
		#switch
		#case ifcode JAVASCRIPT then
		this._memorize_cache = null;
		#case ifcode PHP then
		static::$_memorize_cache = [];
		static::$_memorize_hkey = [];
		#endswitch
	}
	
	
	/**
	 * Returns cached value
	 */
	static string @_memorizeValue(string name, var args)
	{
		#switch
		#case ifcode PHP then
		
		if (static::$_memorize_cache == null) return static::$_memorize_not_found;
		if (!isset(static::$_memorize_cache[$name])) return static::$_memorize_not_found;
		
		$arr = &static::$_memorize_cache[$name];
		$sz = count($args);
		for ($i=0; $i<$sz; $i++)
		{
			$key = &$args[$i];
			$hkey = null; 
			if (gettype($key) == 'object') $hkey = spl_object_hash($key); else $hkey = $key;
			if ($i == $sz - 1)
			{
				if (in_array($hkey, array_keys($arr)))
				{
					return $arr[$hkey];
				}
				return static::$_memorize_not_found;
			}
			else
			{
				if (!isset($arr[$hkey])) return static::$_memorize_not_found;
				$arr = &$arr[$hkey];
			}
		}
		
		return static::$_memorize_not_found;
		
		#case ifcode JAVASCRIPT then
		if (this._memorize_cache == null) return this._memorize_not_found;
		if (this._memorize_cache[name] == undefined) return this._memorize_not_found;
		var arr = this._memorize_cache[name];
		var sz = args.length;
		for (var i=0; i<sz; i++)
		{
			var key = args[i];
			var hkey = null;
			if (key != null && typeof key == 'object')
			{
				if (key.__uq__ != undefined) hkey = key.__uq__;
				else return this._memorize_not_found;
			}
			else if (typeof key == 'string') hkey = "__s_" + key;
			else hkey = key;
			if (i == sz - 1)
			{
				if (arr[hkey] == undefined) return this._memorize_not_found;
				return arr[hkey];
			}
			else
			{
				if (arr[hkey] == undefined) arr[hkey] = {};
				arr = arr[hkey];
			}
		}
		
		return this._memorize_not_found;
		
		#endswitch
	}
	
	
	/**
	 * Returns cached value
	 */
	static string @_memorizeSave(string name, var args, var value)
	{
		#switch
		#case ifcode PHP then
		
		if (static::$_memorize_cache == null) static::$_memorize_cache = [];
		if (!isset(static::$_memorize_cache[$name])) static::$_memorize_cache[$name] = [];
		
		$arr = &static::$_memorize_cache[$name];
		$sz = count($args);
		for ($i=0; $i<$sz; $i++)
		{
			$key = &$args[$i];
			$hkey = null; 
			if (gettype($key) == 'object') $hkey = spl_object_hash($key); else $hkey = $key;
			if ($i == $sz - 1)
			{
				$arr[$hkey] = $value;
			}
			else
			{
				if (!isset($arr[$hkey])) $arr[$hkey] = [];
				else if (!static::_memorizeValidHKey($hkey, $key)) $arr[$hkey] = [];
				$arr = &$arr[$hkey];
			}
		}
		
		#case ifcode JAVASCRIPT then
		
		if (this._memorize_cache == null) this._memorize_cache = {};
		if (this._memorize_cache[name] == undefined) this._memorize_cache[name] = {};
		var arr = this._memorize_cache[name];
		var sz = args.length;
		for (var i=0; i<sz; i++)
		{
			var key = args[i];
			var hkey = null;
			if (key != null && typeof key == 'object')
			{
				if (key.__uq__ != undefined) hkey = key.__uq__;
				else hkey = null;
			}
			else if (typeof key == 'string') hkey = "__s_" + key;
			else hkey = key;
			if (i == sz - 1)
			{
				arr[hkey] = value;
			}
			else
			{
				if (arr[hkey] == undefined) arr[hkey] = {};
				arr = arr[hkey];
			}
		}
		
		#endswitch
	}
	
	
	/* ================ Dirty functions ================ */
	
	/**
	 * Sleep in ms
	 */
	static async void sleep(int time)
	{
		#switch
		#case ifcode PHP then
		usleep( $time * 1000 );
		#case ifcode JAVASCRIPT then
		await new Promise((f, e) => setTimeout(f, time));
		#endswitch
	}
	
	
	/**
	 * Returns unique value
	 * @param bool flag If true returns as text. Default true
	 * @return string
	 */
	static string unique(bool flag = true)
	{
		#switch
		#case ifcode PHP then
		
		return uniqid();
		
		#case ifcode JAVASCRIPT then
		
		if (flag == undefined) flag = true;
		if (flag)
			return "" + (new Date).getTime() + Math.floor((Math.random() * 899999 + 100000));
		return Symbol();
		
		#endswitch
	}
	
	
	/**
	 * Returns current unix time in seconds
	 * @return int
	 */
	static int time()
	{
		#switch
		#case ifcode PHP then
		return time();
		#case ifcode JAVASCRIPT then
		return Math.round((new Date()).getTime() / 1000);
		#endswitch
	}
	
	
	/**
	 * Returns unix timestamp in microseconds
	 */
	static int utime()
	{
		#switch
		#case ifcode PHP then
		return microtime(true);
		#case ifcode JAVASCRIPT then
		return (new Date()).getTime() * 1000;
		#endswitch
	}
	
	
	/**
	 * Json encode serializable values
	 * @param serializable value
	 * @param SerializeContainer container
	 * @return string 
	 */
	static string json_encode(var value, int flags = 0, bool convert = true)
	{
		return Serializer::json_encode(value, flags, convert);
	}
	
	
	/**
	 * Json decode to primitive values
	 * @param string s Encoded string
	 * @return var 
	 */
	static var json_decode(var obj, string allow_class_name = true)
	{
		return Serializer::json_decode(obj, allow_class_name);
	}
	
	
	/* ================================ Context Functions ================================ */
	
	protected static var _global_context = null;
	
	
	/**
	 * Returns global context
	 * @return Context
	 */
	static Context @getContext()
	{
		#switch
		#case ifcode PHP then
		if (!static::$_global_context) return new \Runtime\Context();
		return static::$_global_context;
		#case ifcode NODEJS then
		if (!rtl._global_context) return new use("Runtime.Context")();
		return rtl._global_context;
		#case ifcode ES6 then
		if (!Runtime.rtl._global_context) return new Runtime.Context();
		return Runtime.rtl._global_context;
		#endswitch
	}
	
	
	/**
	 * Set global context
	 * @param Context context
	 */
	static void setContext(Context context)
	{
		#switch
		#case ifcode PHP then
		static::$_global_context = $context;
		#case ifcode JAVASCRIPT then
		use("Runtime.rtl")._global_context = context;
		#case ifcode ES6 then
		window['global_context'] = context;
		#endswitch
	}
	
	
	/**
	 * Create context
	 */
	static static async Context createContext(Map params)
	{
		/* Create contenxt */
		var context = Context::create(params);
		
		/* Setup global context */
		static::setContext(context);
		
		/* Init context */
		await context.init();
		
		return context;
	}
	
	
	/**
	 * Run application
	 * @param Dict d
	 */
	public static async int @runApp
	(
		string class_name,
		Collection<string> modules,
		Dict params = null
	)
	{
		if (params == null) params = {};
		
		params.set("entry_point", class_name);
		params.set("modules", modules);
		
		#switch
		#case ifcode PHP then
		
		$context = static::createContext($params);
		$context->start($context);
		$code = $context->run($context);
		
		return $code;
		
		#case ifcode ES6 then
		
		try
		{
			let context = await Runtime.rtl.createContext(params);
			await context.start(context);
			await context.run(context);
		}
		catch (e)
		{
			console.log("\x1B[0;31m" + e.stack + "\x1B[0m\n");
		}
		
		#case ifcode NODEJS then
		
		let code = 0;
		
		try
		{
			let context = await Runtime.rtl.createContext(params);
			await context.start(context);
			code = await context.run(context);
		}
		catch (e)
		{
			process.stderr.write("\x1B[0;91m");
			process.stderr.write(e.stack);
			process.stderr.write("\x1B[0m\n");
		}
		
		return code;
		
		#endswitch
		
		return 0;
	}
	
	
	#ifcode PHP then
	
	/**
	 * Register PHP error handler
	 */
	function set_default_exception_handler()
	{
		set_exception_handler( function ($e){
		
			if (!$e) return;
			
			http_response_code(500);
			
			$message = "Fatal Error:\n";
			$message .= $e->getMessage() . "\n";
			$message .= "in file " . $e->getFile() . ":" . $e->getLine() . "\n";
			$message .= $e->getTraceAsString() . "\n";
			
			if (php_sapi_name() === 'cli')
			{
				$color = "0;91";
				echo chr(27) . "[" . $color . "m" . $message . chr(27) . "[0m";
			}
			else
			{
				echo nl2br($message);
			}
			
			exit (1);
		} );
	}
	
	#endif
	
}


#switch
#case ifcode PHP then
rtl::$_memorize_not_found = (object) ['s' => 'memorize_key_not_found'];

#case ifcode ES6 then
var use = function(s){return Runtime.rtl.find_class(s);}

#case ifcode JAVASCRIPT then
if (typeof Runtime != 'undefined' && typeof Runtime.rtl != 'undefined')
	Runtime.rtl._memorize_not_found = {'s':'memorize_key_not_found','id':Symbol()};

#case ifcode NODEJS then

#endswitch
