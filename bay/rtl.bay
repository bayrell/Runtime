/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime;

use Runtime.Interfaces.StringInterface;


#switch
#case ifcode JAVASCRIPT then
var isBrowser=function(){return typeof window !== "undefined" && this === window;}
#endswitch


export class rtl{
	
	
	static bool isBrowser(){
		#switch
		#case ifcode JAVASCRIPT then
		return typeof window !== "undefined";
		#endswitch
		return false;
	}
	
	
	#switch
	#case ifcode PHP then
	
	/**
	 * Find class instance by name. If class does not exists return null.
	 * @return var - class instance
	 */
	static function find_class($class_name){
		return "\\" . re::replace("\\.", "\\", $class_name);
	}
	
	#case ifcode ES6 then
	/**
	 * Find class instance by name. If class does not exists return null.
	 * @return var - class instance
	 */
	static find_class(class_name){
		if (class_name instanceof Function)
			return class_name;
		
		if (Runtime.rtl._classes==undefined) Runtime.rtl._classes = {};
		if (Runtime.rtl._classes[class_name]!=undefined) return Runtime.rtl._classes[class_name];
		
		var arr = class_name.split('.');
		var obj = window;
		
		for (var i=0; i<arr.length; i++){
			var key = arr[i];
			if (obj[key] == undefined)
				return null;
			obj = obj[key];
		}
		
		Runtime.rtl._classes[class_name] = obj;
		return obj;
	}
	#case ifcode NODEJS then
	/**
	 * Find class instance by name. If class does not exists return null.
	 * @return var - class instance
	 */
	static find_class(class_name){
		if (class_name instanceof Function)
			return class_name;
		
		var class_name_arr = class_name.split('.');
		if (class_name_arr.length < 2)
			return null;
		
		var module_name = class_name_arr[0];
		var last_name = class_name_arr[ class_name_arr.length - 1 ];
		
		if (module_name == 'Runtime') 
			module_name = 'BayrellRuntime';
		
		module_name = rtl.convertNodeJSModuleName(module_name);
		var obj = require(module_name);
		for (var i=1; i<class_name_arr.length - 1; i++){
			if (!this.exists(obj[class_name_arr[i]])){
				obj = null;
				break;
			}
			obj = obj[ class_name_arr[i] ];
		}
		
		if (!this.exists(obj))
			return null;
		
		obj = obj[last_name];
		return obj;
	}
	#endswitch
	
	
	
	/**
	 * Returns true if class instanceof class_name
	 * @return bool
	 */
	declare export static bool is_instanceof(var obj, string class_name);
	
	#switch
	#case ifcode PHP then
	static function is_instanceof($obj, $class_name){
		$class_name = self::find_class($class_name);
		if ($obj == null) return false;
		if (gettype($obj) != "object") return false;
		if (is_subclass_of($obj, $class_name)){ return true;}
		return is_a($obj, $class_name);
	}
	#case ifcode JAVASCRIPT then
	static is_instanceof(obj, class_name){
		var c = this.find_class(class_name);
		if (c == null) return false;
		return c.prototype.isPrototypeOf(obj);
	}
	#endswitch
	
	
	
	/**
	 * Returns true if obj implements interface_name
	 * @return bool
	 */
	declare export static bool is_implements(var obj, string interface_name);
	
	#switch
	#case ifcode PHP then
	static function is_implements($obj, $interface_name){
		$class_name = get_class($obj);
		$interface_name = self::find_class($interface_name);
		return self::class_implements($class_name, $interface_name);
	}
	#case ifcode JAVASCRIPT then
	static implements(obj, interface_name){
		if (obj == undefined) return false;
		if (obj.__implements__ == undefined) return false;
		return obj.__implements__.indexOf(interface_name) != -1;
	}
	static is_implements(obj, interface_name){
		return this.implements(obj, interface_name);
	}
	#endswitch
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	declare export static bool class_exists(string class_name);
	
	#switch
	#case ifcode PHP then
	static function class_exists($class_name){
		$class_name = static::find_class($class_name);
		return class_exists($class_name);
	}
	#case ifcode JAVASCRIPT then
	static class_exists(class_name){
		var obj = this.find_class(class_name);
		if (!this.exists(obj)) return false;
		return true;
	}
	#endswitch
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	declare export static bool class_implements(string class_name, string interface_name);
	
	#switch
	#case ifcode PHP then
	static function class_implements($class_name, $interface_name){
		$class_name = self::find_class($class_name);
		$interface_name = self::find_class($interface_name);
		$arr = @class_implements($class_name, true);
		if ($arr == false){
			return false;
		}
		foreach ($arr as $name){
			if ($name == $interface_name or "\\" . $name == $interface_name)
				return true;
		}
		return false;
	}
	#case ifcode JAVASCRIPT then
	static class_implements(class_name, interface_name){
		var obj = this.find_class(class_name);
		var obj2 = this.find_class(interface_name);
		
		while (obj != null){
			if (obj.__static_implements__){
				if (obj.__static_implements__.indexOf( obj2 ) > -1 ){
					return true;
				}
			}
			obj = obj.__proto__;
		}
		
		return false;
	}
	#endswitch
	
	
	
	/**
	 * Returns true if class exists
	 * @return bool
	 */
	declare export static bool method_exists(string class_name, string method_name);
	
	#switch
	#case ifcode PHP then
	static function method_exists($class_name, $method_name){
		$class_name = static::find_class($class_name);
		if (!class_exists($class_name)) return false;
		if (!method_exists($class_name, $method_name)) return false;
		return true;
	}
	#case ifcode JAVASCRIPT then
	static method_exists(class_name, method_name){
		var obj = this.find_class(class_name);
		if (!this.exists(obj)) return false;
		if (
			!this.exists(obj[method_name]) && 
			!this.exists(obj.prototype) && 
			!this.exists(obj.prototype[method_name])
		) return false;
		return true;
	}
	#endswitch
	
	
	
	/**
	 * Create object by class_name. If class name does not exists return null
	 * @return Object
	 */
	declare export static Object newInstance(string class_name, Vector<mixed> args);

	#switch
	#case ifcode PHP then
	static function newInstance($class_name, $args = null){
		$class_name = static::find_class($class_name);
		if ($args == null)
			return new $class_name();
		$r = new \ReflectionClass($class_name);
		return $r->newInstanceArgs($args->_getArr());
	}
	#case ifcode JAVASCRIPT then
	static newInstance(class_name, args){
		var obj = this.find_class(class_name);
		if (!this.exists(obj)) return null;
		if (!(obj instanceof Function)) return null;
		if (args == undefined) args = [];
		args = args.slice(); 
		args.unshift(null);
		var f = Function.prototype.bind.apply(obj, args);
		return new f;
	}
	#endswitch
	
	
	
	/**
	 * Call method
	 * @return Object
	 */
	declare export static var call(callback f, Vector args = null);
	
	#switch
	#case ifcode PHP then
	static function call($f, $args = null){
		if ($args == null) return call_user_func($f);
		return call_user_func_array($f, $args);
	}
	#case ifcode JAVASCRIPT then
	static call(f, args){
		if (args == undefined) return f.apply(null);
		return f.apply(null, args);
	}
	#endswitch
	
	
	
	/**
	 * Call method
	 * @return Object
	 */
	declare export static var callMethod(Object obj, string method_name, Vector args = null);
	
	#switch
	#case ifcode PHP then
	static function callMethod($obj, $method_name, $args = null){
		if ($args != null)
			return call_user_func_array([$obj, $method_name], $args->_getArr());
		return call_user_func([$obj, $method_name]);
	}
	#case ifcode JAVASCRIPT then
	static callMethod(obj, method_name, args){
		var f = obj[method_name];
		return f.apply(obj, args);
	}
	#endswitch
	
	
	
	/**
	 * Call method
	 * @return Object
	 */
	declare export static var callStaticMethod(string class_name, string method_name, Vector args = null);
	
	#switch
	#case ifcode PHP then
	static function callStaticMethod($class_name, $method_name, $args=null){
		$class_name = static::find_class($class_name);
		if (!class_exists($class_name)){
			throw new \Exception($class_name . " not found ");
		}
		if (!method_exists($class_name, $method_name)){
			throw new \Exception("Method '" . $method_name . "' not found in " . $class_name);
		}
		return call_user_func_array([$class_name, $method_name], ($args!=null)?$args->_getArr():[]);
	}
	#case ifcode JAVASCRIPT then
	static callStaticMethod(class_name, method_name, args){
		var obj = this.find_class(class_name);
		var f = obj[method_name];
		if (f == null || f == undefined){
			throw new Error(class_name + "." + method_name + " not found");
		}
		return f.apply(obj, args);
	}
	#endswitch
	
	
	
	/**
	 * Call async method
	 * @return Object
	 */
	declare export static void awaitRun(callback f);
	
	#switch
	#case ifcode PHP then
	static function awaitRun($f){
	}
	#case ifcode ES6 then
	static awaitRun(f){
		var thread = new Runtime.AsyncThread();
		thread.run(f);
	}
	#endswitch
	
	
	
	/**
	 * Returns value if value instanceof type_value, else returns def_value
	 * @param var value
	 * @param string type_value
	 * @param var def_value
	 * @param var type_template
	 * @return var
	 */
	static var correct(var value, string type_value, var def_value = null, string type_template = ""){
		return self::convert(value, type_value, def_value, type_template);
	}
	
	
	
	/**
	 * Returns value if value instanceof type_value, else returns def_value
	 * @param var value
	 * @param string type_value
	 * @param var def_value
	 * @param var type_template
	 * @return var
	 */
	static var convert(var value, string type_value, var def_value = null, string type_template = "")
	{
		if (type_value == "mixed" or type_value == "var")
			return value;
		
		if (type_value == "")
			return def_value;
		
		if (value != null)
		{
		
			/* Is scalar value */
			if (
				type_value == "int" or type_value == "float" or 
				type_value == "double" or type_value == "bool" or type_value == "string"
			){
				try{
					if (type_value == "int"){
						int val = rtl::toInt(value);
						return val;
					}
					else if (type_value == "float" or type_value == "double"){
						int val = rtl::toFloat(value);
						return val;
					}
					else if (type_value == "bool"){
						int val = rtl::toBool(value);
						return val;
					}
					else if (type_value == "string"){
						int val = rtl::toString(value);
						return val;
					}
				}
				catch (var e){}
			}
			
			/* Is Vector or Map */
			else if ( (type_value == "Runtime.Vector" or type_value == "Runtime.Map") and type_template != "")
			{
				#switch
				#case ifcode PHP then
				return $value->_correctItemsByType($type_template);
				#case ifcode JAVASCRIPT then
				return value._correctItemsByType(type_template);
				#endswitch
			}
			
			/* Is instanceof object */
			else if (rtl::is_instanceof(value, type_value))
			{
				return value;
			}
		
		}
		/*
		if (type_value == "int" and not rtl::isInt(def_value)) def_value = 0;
		else if ((type_value == "float" or type_value == "double") and not rtl::isDouble(def_value)) def_value = 0;
		else if (type_value == "string" and not rtl::isString(def_value)) def_value = "";
		else if ((type_value == "bool" or type_value == "boolean") and not rtl::isBoolean(def_value)) 
			def_value = false;
		else def_value = null;
		*/
		return def_value;
	}
	
	static var convert2(var value, string type_value, var def_value = null, string type_template = ""){
		
		if (type_value == "mixed" or type_value == "var")
			return value;
		
		/* check value */
		if (value != null and self::checkValue(value, type_value)){
			if ( (type_value == "Runtime.Vector" or type_value == "Runtime.Map") and type_template != ""){
				#switch
				#case ifcode PHP then
				return $value->_correctItemsByType($type_template);
				#case ifcode JAVASCRIPT then
				return value._correctItemsByType(type_template);
				#endswitch
				
			}
			return value;
		}
		
		/* Try to convert */
		else{
			bool is_string = rtl::isString(value);
			bool is_number = rtl::isNumber(value);
			bool is_bool = rtl::isBoolean(value);
			if (is_string or is_bool or is_number){
				string s_value = rtl::toString(value);
				try{
					if (type_value == "int"){
						int val = rtl::toInt(value);
						return val;
					}
					else if (type_value == "float" or type_value == "double"){
						int val = rtl::toFloat(value);
						return val;
					}
					else if (type_value == "bool"){
						int val = rtl::toBool(value);
						return val;
					}
				}
				catch (var e){}
			}
		}
		
		/* Check def_value */
		if (not self::checkValue(def_value, type_value)){
			if (type_value == "int" or type_value == "float" or type_value == "double") def_value = 0;
			else if (type_value == "string") def_value = "";
			else if (type_value == "bool" or type_value == "boolean") def_value = false;
			else def_value = null;
		}
		return def_value;
	}
	
	
	
	/**
	 * Returns true if value instanceof tp
	 * @param var value
	 * @param string tp
	 * @return bool
	 */
	static var checkValue(var value, string tp){
		if (tp == "int") return self::isInt(value);
		if (tp == "float" or tp == "double") return self::isDouble(value);
		if (tp == "string") return self::isString(value);
		if (tp == "bool" or tp == "boolean") return self::isBoolean(value);
		if (rtl::is_instanceof(value, tp)){ return true;}
		return false;
	}
	
	
	
	/**
	 * Clone var
	 * @param {var} value - Variable
	 * @return {var} result
	 */
	declare static var _clone(var value, ContextInterface context = null);
	
	
	#switch
	#case ifcode PHP then
	static function _clone($val){
		if ($val == null) return null;
		if (self::isScalarValue($val)) return $val;
		if ($val instanceof \Runtime\Interfaces\CloneableInterface){
			$class_name = get_class($val);
			$obj = new $class_name();
			$obj->assignObject($val);
			return $obj;
		}
		return clone $val;
	}
	#case ifcode JAVASCRIPT then
	static clone(val, context){
		if (isBrowser()) return Runtime.rtl._clone(val, context);
		else return rtl._clone(val, context);
	}
	static _clone(val){
		if (val == null)
			return null;
		
		else if (val instanceof Number || typeof val == "number"){
			return val;
		}
		else if (val instanceof String || typeof val == "string"){
			return (new String(val)).toString();
		}
		else if (val instanceof Boolean || typeof val == "boolean"){
			return val;
		}
		else if (val instanceof Date){
			return new Date(val);
		}
		else if (typeof val == 'object' && val.nodeType && typeof val.cloneNode == "function"){
			return val.cloneNode(true);
		}
		else if (typeof val == 'object' && 
			val.createNewInstance && typeof val.createNewInstance == "function" &&
			val.assignObject && typeof val.assignObject == "function")
		{
			var res = val.createNewInstance();
			if (res) res.assignObject(val);
			return res;
		}
		else if (typeof val == 'object' && 
			val.getClassName && typeof val.getClassName == "function" &&
			val.assignObject && typeof val.assignObject == "function")
		{
			var res = null;
			if (isBrowser()) res = Runtime.rtl.newInstance( val.getClassName() );
			else res = rtl.newInstance( val.getClassName() );
			if (res) res.assignObject(val);
			return res;
		}
		else if (Array.isArray(val)){	
			var res = [];
			for (var i=0;i<val.length;i++){
				if (isBrowser()) res[i] = Runtime.rtl._clone(val[i]);
				else res[i] = rtl._clone(val[i]);
			}
			return res;
		}
		
		return null;
	}
	#endswitch
	
	
	
	/**
	 * Return true if value is exists
	 * @param var value
	 * @return boolean
	 */
	declare export static boolean exists(var value);

	#switch
	#case ifcode PHP then
	static function exists(&$value){ 
		return isset($value);
	}
	#case ifcode JAVASCRIPT then
	static exists(value){
		return (value != null) && (value != undefined);
	}
	#endswitch
	
	
	
	/**
	 * Returns true if value is scalar value
	 * @return boolean 
	 */
	static bool isScalarValue(var value){
		if (value == null) return true;
		if (rtl::isString(value)) return true;
		if (rtl::isNumber(value)) return true;
		if (rtl::isBoolean(value)) return true;
		return false;
	}
	
	
	
	/**
	 * Return true if value is boolean
	 * @param var value
	 * @return boolean
	 */
	static boolean isBoolean(var value){
		if (value === false or value === true) return true;
		return false;
	}
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return boolean
	 */
	declare export static boolean isInt(var value);

	#switch
	#case ifcode PHP then
	static function isInt($value){
		return is_int($value);
	}
	#case ifcode JAVASCRIPT then
	static isInt(value){
		if (typeof value != "number") return false;
		if (value % 1 !== 0) return false;
		return true;
	}
	#endswitch
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return boolean
	 */
	declare export static boolean isDouble(var value);

	#switch
	#case ifcode PHP then
	static function isDouble($value){
		return is_int($value) or is_float($value);
	}
	#case ifcode JAVASCRIPT then
	static isDouble(value){
		if (typeof value == "number") return true;
		return false;
	}
	#endswitch
	
	
	
	/**
	 * Return true if value is number
	 * @param var value
	 * @return boolean
	 */
	declare export static boolean isNumber(var value);

	#switch
	#case ifcode PHP then
	static function isNumber($value){
		return is_int($value) or is_float($value);
	}
	#case ifcode JAVASCRIPT then
	static isNumber(value){
		if (typeof value == "number") return true;
		return false;
	}
	#endswitch
	
	
	
	/**
	 * Return true if value is string
	 * @param var value
	 * @return boolean
	 */
	declare export static boolean isString(var value);

	#switch
	#case ifcode PHP then
	static function isString($value){
		return is_string($value);
	}
	#case ifcode JAVASCRIPT then
	static isString(value){
		if (typeof value == 'string') return true;
		else if (value instanceof String) return true;
		return false;
	}
	#endswitch
	
	
	
	/**
	 * Convert value to string
	 * @param var value
	 * @return string
	 */
	declare export static string toString(var value);

	#switch
	#case ifcode PHP then
	static function toString($value){
		if ($value instanceof StringInterface) return $value->toString();
		return (string)$value;
	}
	#case ifcode JAVASCRIPT then
	static toString(value){
		var _StringInterface = null;
		if (isBrowser()) _StringInterface = Runtime.Interfaces.StringInterface; 
		else _StringInterface = StringInterface;
		if (typeof value == 'string') return value;
		if (value instanceof String) return ""+value;
		if (this.implements(value, _StringInterface)) return value.toString();
		return ""+value;
	}
	#endswitch
	
	
	
	/**
	 * Convert value to int
	 * @param var value
	 * @return int
	 */
	declare export static int toInt(var val);

	#switch
	#case ifcode PHP then
	static function toInt($val){
		$res = (int)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		throw new \Exception("Error convert to int");
	}
	#case ifcode JAVASCRIPT then
	static toInt(val){
		var res = parseInt(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		throw new Error("Error convert to int");
	}
	#endswitch
	
	
	
	/**
	 * Convert value to boolean
	 * @param var value
	 * @return bool
	 */
	declare export static bool toBool(var val);

	#switch
	#case ifcode PHP then
	static function toBool($val){
		$res = (bool)$val;
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		throw new \Exception("Error convert to boolean");
	}
	#case ifcode JAVASCRIPT then
	static toBool(val){
		var res = false;
		if (val == 'true') res = true;
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		throw new Error("Error convert to boolean");
	}
	#endswitch
	
	
	
	/**
	 * Convert value to float
	 * @param var value
	 * @return float
	 */
	declare export static bool toFloat(var val);

	#switch
	#case ifcode PHP then
	static function toFloat($val){
		$res = floatval($val);
		$s_res = (string)$res;
		$s_val = (string)$val;
		if ($s_res == $s_val)
			return $res;
		throw new \Exception("Error convert to float");
	}
	#case ifcode JAVASCRIPT then
	static toFloat(val){
		var res = parseFloat(val);
		var s_res = new String(res);
		var s_val = new String(val);
		if (s_res.localeCompare(s_val) == 0)
			return res;
		throw new Error("Error convert to float");
	}
	#endswitch
	
	
	
	/**
	 * Returns unique value
	 * @param bool flag If true returns as text. Default true
	 * @return string
	 */
	declare export static string unique(bool flag = true);
	
	
	#switch
	#case ifcode PHP then
	static function unique(){
		return uniqid();
	}
	#case ifcode JAVASCRIPT then
	static unique(flag){
		if (flag == undefined) flag = true;
		if (flag)
			return "" + (new Date).getTime() + Math.floor((Math.random() * 899999 + 100000));
		return Symbol();
	}
	#endswitch
	
	
	
	/**
	 * Round up
	 * @param double value
	 * @return int
	 */
	declare export static string ceil(double value);
	
	
	#switch
	#case ifcode PHP then
	static function ceil($value){
		return ceil($value);
	}
	#case ifcode JAVASCRIPT then
	static ceil(value){
		return Math.ceil(value);
	}
	#endswitch
	
	
	
	/**
	 * Round down
	 * @param double value
	 * @return int
	 */
	declare export static string floor(double value);
	
	
	#switch
	#case ifcode PHP then
	static function floor($value){
		return floor($value);
	}
	#case ifcode JAVASCRIPT then
	static floor(value){
		return Math.floor(value);
	}
	#endswitch
	
	
	
	/**
	 * Round down
	 * @param double value
	 * @return int
	 */
	declare export static string round(double value);
	
	
	#switch
	#case ifcode PHP then
	static function round($value){
		return round($value);
	}
	#case ifcode JAVASCRIPT then
	static round(value){
		return Math.round(value);
	}
	#endswitch
	
	
	
	/**
	 * Round down
	 * @param double value
	 * @return int
	 */
	declare export static string dump(var value);
	
	
	#switch
	#case ifcode PHP then
	static function dump($value){
		var_dump($value);
	}
	#case ifcode JAVASCRIPT then
	static dump(value){
		console.log(value);
	}
	#endswitch
	
	
	
	/**
	 * Returns random value x, where a <= x <= b
	 * @param int a
	 * @param int b
	 * @return int
	 */
	declare export static int random(int a, int b);
	
	
	#switch
	#case ifcode PHP then
	static function random($a, $b){
		if (PHP_VERSION_ID < 70000) return mt_rand($a, $b);
		return random_int($a, $b);
	}
	#case ifcode JAVASCRIPT then
	static random(a, b){
		if (window != undefined && window.crypto != undefined && window.crypto.getRandomValues != undefined)
		{
			var s = new Uint32Array(1);
			window.crypto.getRandomValues(s);
			return Math.floor(s[0] / 4294967296 * (b - a + 1) + a);
		}
		return Math.floor(Math.random() * (b - a + 1) + a);
	}
	#endswitch
	
	
	
	/**
	 * Returns current unix time in seconds
	 * @return int
	 */
	declare export static int time();
	
	
	#switch
	#case ifcode PHP then
	static function time(){
		return time();
	}
	#case ifcode JAVASCRIPT then
	static time(){
		return Math.round((new Date()).getTime() / 1000);
	}
	#endswitch
	
	
	
	/**
	 * Convert module name to node js package
	 */
	declare export static string convertNodeJSModuleName(string name);
	
	#switch
	#case ifcode PHP then
	static function convertNodeJSModuleName($name){
		$arr1 = "qazwsxedcrfvtgbyhnujmikolp";
		$arr2 = "0123456789";
		$res = "";
		$sz = mb_strlen($name);
		$previsbig = false;
		for ($i = 0; $i < $sz; $i++){
			$ch = mb_substr($name, $i, 1);
			$ch2 = mb_strtoupper($ch);
			$ch3 = mb_strtolower($ch);
			$isAlpha = mb_strpos($arr1, $ch3) !== false;
			$isNum = mb_strpos($arr2, $ch3) !== false;
			if ($i > 0 && $ch == $ch2 && !$previsbig && $isAlpha){
				$res .= "-";
			}
			$res .= $ch3;
			if ($ch == $ch2 && $isAlphaNum){
				$previsbig = true;
			}
			else {
				$previsbig = false;
			}
			if (!$isAlphaNum && !$isNum){
				$previsbig = true;
			}
		}
		$res .= "-nodejs";
		return $res;
	}
	#case ifcode JAVASCRIPT then
	static convertNodeJSModuleName(name){
		name = new String(name);
		var arr1 = "qazwsxedcrfvtgbyhnujmikolp";
		var arr2 = "01234567890";
		var res = "";
		var sz = name.length;
		var previsbig = false;
		for (var i = 0; i < sz; i++){
			var ch = name[i];
			var ch2 = ch.toUpperCase();
			var ch3 = ch.toLowerCase();
			var isAlpha = arr1.indexOf(ch3) != -1;
			var isNum = arr2.indexOf(ch3) != -1;
			if (i > 0 && ch == ch2 && !previsbig && isAlpha){
				res += "-";
			}
			res += ch3;
			if (ch == ch2 && isAlpha){
				previsbig = true;
			}
			else {
				previsbig = false;
			}
			if (!isAlpha && !isNum){
				previsbig = true;
			}
		}
		res += "-nodejs";
		return res;
	}
	#endswitch
	
	
}